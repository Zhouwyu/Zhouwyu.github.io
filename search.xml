<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>泰坦号潜水器发生了什么</title>
      <link href="/2023/06/24/tai-tan-hao-qian-shui-qi-fa-sheng-liao-shi-me/"/>
      <url>/2023/06/24/tai-tan-hao-qian-shui-qi-fa-sheng-liao-shi-me/</url>
      
        <content type="html"><![CDATA[<h1 id="What-Happened-to-the-Titanic-Submersible"><a href="#What-Happened-to-the-Titanic-Submersible" class="headerlink" title="What Happened to the Titanic Submersible?"></a><strong>What Happened to the Titanic Submersible?</strong></h1><hr><p>The five people inside a submersible that went missing Sunday are believed to be dead, according to the U.S. Coast Guard and the company that operated the vessel. </p><p>The craft, called Titan and operated by OceanGate Expeditions, dived in an area about 900 miles off Massachusetts’ Cape Cod on an expedition to visit the wreck of the Titanic. Titan lost contact with a research vessel on the surface about one hour and 45 minutes into the dive, kicking off a desperate, dayslong search for the submersible and its passengers. </p><p>The Coast Guard said Thursday it found debris consistent with “the catastrophic loss” of the submersible’s pressure chamber approximately 1,600 feet from the bow of the Titanic. </p><p><strong>What’s the latest update on the search?</strong> </p><p>The search uncovered five major pieces of debris that told investigators they had found the Titan’s remains, including a nose cone and the front-end bell of the pressure hull, officials said at a news briefing Thursday. </p><p>The debris was found on the ocean floor in a smooth area without any debris from the Titanic shipwreck, said Carl Hartsfield of the Woods Hole Oceanographic Institution, which was helping with the search.</p><p>“The debris is consistent with the catastrophic loss of the pressure chamber,” said Coast Guard Rear Adm. John Mauger, who has been leading the search. Experts previously said death would have been instantaneous in those circumstances.</p><p>Asked about the prospect of finding the passengers’ bodies, Mauger said the operation took place in “an incredibly unforgiving environment.” </p><p>“We’ll continue to work and to search the area but I don’t have an answer for prospects,” he said.</p><p>Teams and equipment from around the world converged in a remote part of the North Atlantic to help with the search. They combed an area at least twice the size of Connecticut for the 22-foot-long Titan. </p><p>Rescuers had focused on an area where Canadian aircraft detected banging noises underwater, officials said Wednesday. Officials said Thursday there didn’t appear to be any connection between the noises and where debris from the vessel was found. </p><p><strong>What is the timeline of events?</strong></p><p>Officials are still piecing together a timeline to determine when the submersible imploded, Mauger said. </p><p>A top secret military acoustic detection system designed to spot enemy submarines first heard what the U.S. Navy suspected was the Titan implosion hours after the submersible began its voyage Sunday, according to officials involved in the search.</p><p><strong>Who were the passengers on the Titan submersible?</strong></p><p>Pakistani businessman Shahzada Dawood was on the craft with his 19-year-old son, Suleman, according to a statement from the family’s company. The Dawoods, one of Pakistan’s richest families, are owners of a conglomerate called Engro that produces everything from electricity to fertilizer to milk.</p><p>British aviator and explorer Hamish Harding was also on board, according to his company Action Aviation, which specializes in services including aircraft brokerage, management and financing. Harding had undertaken a series of record-breaking challenges that led him to the depths of the ocean and around the world. He also went to space on a Blue Origin flight last year.</p><p>Another passenger, Paul-Henry Nargeolet, was considered a leading authority on the Titanic wreck, according to the website of Experiential Media Group. The Georgia-based company lists Nargeolet as its director of underwater research. </p><p>Nargeolet spent 22 years in the French Navy, rising to the rank of commander. He completed more than three dozen dives to the site of the wreckage. </p><p>OceanGate’s founder and chief executive, Stockton Rush, was also aboard the submersible, according to a spokesman for the company.</p><p><strong>What is OceanGate Expeditions?</strong></p><p>Rush founded OceanGate in 2009, saying in a speech last year that he wanted to expand deep-sea exploration. </p><p>The Washington-based firm owns three submersibles, including the Titan, that have completed more than 200 deep-sea dives, according to the company’s website. OceanGate completed two trips to the Titanic wreck in 2021 and 2022.</p><p>This year’s expedition was slated to last 10 days, with eight days at sea. Stefan Williams, a professor of marine robotics at the University of Sydney, said it takes about two hours to travel from the surface of the ocean to the wreckage in the submersible. </p><p>OceanGate, a privately owned company, lists six board members, including Rush, on its website. The other members include an astronaut and a financial executive.</p><p>Tourists can pay $250,000 to join an expedition to see the Titanic.</p><p><strong>What documents did passengers sign?</strong></p><p>Past travelers on the Titan said they signed a waiver before boarding that mentioned the risk of death at least three times.</p><hr><h2 id="生词记录"><a href="#生词记录" class="headerlink" title="生词记录"></a>生词记录</h2><blockquote><p>submersible 潜水器，深潜器</p><p>vessel 容器，器皿；船，舰</p><p>wreck 破坏，损坏；沉船，严重损毁的交通工具</p><p>kick off 开球，开始</p><p>debris 碎片，残渣</p><p>catastrophic 灾难性的；失败的</p><p>chamber 会议室；腔，膛；议院</p><p>bow 鞠躬；船头，舰首；蝴蝶结</p><p>nose cone 航天器，飞机或导弹的锥头</p><p>hull 船体</p><p>instantaneous 即刻的，瞬时的</p><p>converge 趋同；汇聚，集中</p><p>comb 梳子；仔细搜查</p><p>bang重击，发出巨响</p><p>piece sth together 拼合，凑集</p><p>implode 内爆；崩溃</p><p>acoustic 声音的，听觉的</p><p>submarine 潜艇</p><p>voyage 航海，航行</p><p>conglomerate 企业集团</p><p>fertilizer 肥料</p><p>aviator 飞行员</p><p>on board 在船上</p><p>brokerage 经纪商</p><p>wreckage 残骸</p><p>expedition 探险，考察</p><p>slate 预定，计划，安排；候选名单</p><p>waiver 弃权声明书</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 每日阅读分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 英语提升 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>银川一烧烤店发生爆炸事故</title>
      <link href="/2023/06/23/yin-chuan-yi-shao-kao-dian-fa-sheng-bao-zha-shi-gu/"/>
      <url>/2023/06/23/yin-chuan-yi-shao-kao-dian-fa-sheng-bao-zha-shi-gu/</url>
      
        <content type="html"><![CDATA[<h1 id="31-dead-7-injured-in-gas-explosion-at-barbecue-restaurant-in-China"><a href="#31-dead-7-injured-in-gas-explosion-at-barbecue-restaurant-in-China" class="headerlink" title="31 dead, 7 injured in gas explosion at barbecue restaurant in China"></a><strong>31 dead, 7 injured in gas explosion at barbecue restaurant in China</strong></h1><hr><p>Thirty-one people were killed in an explosion at a barbecue restaurant in Yinchuan, the capital of China’s northern Ningxia region, state media reported Thursday morning.</p><p>The blast, the result of a gas leak at Fuyang Barbecue, a popular restaurant on a busy street, happened about 8:40 p.m. Wednesday, the official Xinhua News Agency reported.</p><p>Seven people were injured, one critically, local authorities said.</p><p>Photos from the scene show the front of the restaurant mangled and debris on the ground while emergency services brought people out of the building.</p><p>In the wake of the explosion, Yinchuan city government has ordered the city’s BBQ restaurants and night markets to suspend operation, according to local media.</p><p>According to a fire department inquiry, two employees reported smelling gas about an hour before the explosion, noticed that a gas tank’s valve was broken and sent for a replacement. The explosion occurred while the valve was being replaced, Xinhua reported.</p><p>It took firefighters about 40 minutes to extinguish the resulting blaze, according to the news agency.</p><p>Neighbors told local media that the restaurant, which had karaoke rooms and was known for its lamb barbecued on willow-branch skewers, was probably at peak occupancy at the time of the incident, the night before the Dragon Boat Festival holiday.</p><p>Local media reported that a woman at the scene saw two waiters stumble out of the restaurant after the explosion, one of whom collapsed immediately.</p><p>The provincial authorities have detained nine people, including the restaurant’s manager and several staff members, and the establishment’s assets have been frozen, Xinhua reported.</p><p>Sixty-four neighboring households have been temporarily settled at a nearby hotel as a result of the explosion, state media reported.</p><p>A national analysis of gas-related accidents in 2022 found that 45 people died and 294 people were injured in the course of 450 liquid propane gas leak accidents, according to a report by the China City Gas Association.</p><p>The explosion in Yinchuan prompted people on social media to wonder whether it would put a damper on a recent trend of dining at barbecue restaurants that has swept the country, or prompt government oversight of barbecue venues.</p><hr><h2 id="生词记录"><a href="#生词记录" class="headerlink" title="生词记录"></a>生词记录</h2><blockquote><p>barbecue 烧烤</p><p>capital 省会，首都；大写字母</p><p>blast 爆炸。爆破；抨击，严厉批评</p><p>mangle 撕烂，搅坏，损坏，弄糟</p><p>debris 碎片，残片，垃圾，废弃物</p><p>in the wake of 作为···的后果，随···之后而来</p><p>suspend 暂令停职，暂令停学；暂令停止参加活动；暂停；悬挂</p><p>inquiry 询问，打听；调查</p><p>valve 阀门</p><p>extinguish  扑灭；破灭，消灭，消除</p><p>blaze 火灾，大火；光彩夺目的</p><p>lamb 小羊羔</p><p>willow 垂柳</p><p>skewer 烤肉叉子</p><p>peak 顶峰，顶点</p><p>occupancy 居住，占用；使用率</p><p>stumble 犯错，失足；踉跄，绊倒；跌跌撞撞地走，蹒跚而行</p><p>collapse 倒塌；昏倒</p><p>detain 拘捕；耽搁，阻留</p><p>household 家庭，一家人；家喻户晓的</p><p>settle 安居；安顿下来</p><p>propane 丙烷</p><p>put a damper on sth 搅乱，混乱，扰乱</p><p>sweep 风行，风靡，迅速蔓延</p><p>oversight 监督，监管；疏忽，失察，疏漏</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 每日阅读分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 英语提升 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>川大通报地铁事件涉事女生处理情况</title>
      <link href="/2023/06/22/chuan-da-tong-bao-di-tie-shi-jian-she-shi-nu-sheng-chu-li-qing-kuang/"/>
      <url>/2023/06/22/chuan-da-tong-bao-di-tie-shi-jian-she-shi-nu-sheng-chu-li-qing-kuang/</url>
      
        <content type="html"><![CDATA[<h1 id="A-college-student-is-getting-eviscerated-on-social-media-for-accusing-a-Chinese-migrant-worker-of-taking-upskirt-photos-of-her-even-though-she-knew-he-was-just-minding-his-own-business"><a href="#A-college-student-is-getting-eviscerated-on-social-media-for-accusing-a-Chinese-migrant-worker-of-taking-upskirt-photos-of-her-even-though-she-knew-he-was-just-minding-his-own-business" class="headerlink" title="A college student is getting eviscerated on social media for accusing a Chinese migrant worker of taking upskirt photos of her, even though she knew he was just minding his own business"></a><strong>A college student is getting eviscerated on social media for accusing a Chinese migrant worker of taking upskirt photos of her, even though she knew he was just minding his own business</strong></h1><hr><p>A Chinese university student has found herself in the center of a social media maelstrom after she falsely accused a man of taking upskirt photos of her, despite verifying on-camera that he didn’t commit the act.</p><p>Identified only by her surname, Zhang, the woman made a social media post on June 7 saying that she noticed a migrant worker squatting near her on the Guangzhou subway, per local media.</p><p>Zhang said she suspected him of secretly taking upskirt photos of her, and posted an online video that showed his face.</p><p>“It couldn’t be the first time that this wretched old man has taken photos with skillful tactics,” she wrote in a caption.</p><p>The now-deleted video went viral, but the footage appeared to debunk Zhang’s claim. It showed Zhang’s confrontation with the man, who Chinese media outlets identified by his last name, Deng. </p><p>“Hello. May I see your phone to check if you took photos of me?” she asked Zhang.</p><p>Appearing confused, the man immediately opened his photo gallery and showed that it did not have any photos of Zhang or anyone on the subway.</p><p>“Watch it. Don’t carelessly take photos of others,” Zhang told him before leaving.</p><p>Zhang gets blasted online and quickly goes viral</p><p>As Zhang’s video and accusations about the man’s conduct spread, she started getting slammed on Weibo, China’s version of Twitter.</p><p>“If you suspect that I’ve done something wrong, shouldn’t you show evidence that I’ve done so? Why do I need to prove my innocence? Report it to the police and let them figure it out,” said one Weibo user.</p><p>“The most hateful thing about this woman is that after she clearly reconciled the situation, she posted something on the internet to make others go viral,” wrote another.</p><p>On Monday, the local broadsheet Qilu Evening News published an interview with Deng’s son, who said his father was a migrant worker visiting the city on his off day when he was confronted by Zhang on the subway.</p><p>Deng’s son said his family went to the police over the weekend to mediate the dispute between Zhang and the migrant worker. He told Qilu Evening News that the family, at the time, was unaware of the video that was already circulating on Weibo.</p><p>After finding out about the Weibo post, Deng’s son told local reporters that his family intended to sue Zhang if she didn’t apologize.</p><p>Zhang has since issued a public apology on her Weibo account. “Sir, I’m sorry, I was really wrong. I shouldn’t have spread this video on the internet even after confirming your innocence,” she wrote on Sunday evening.</p><p>“I sincerely acknowledge that this incident has caused serious harm to you and your family, and I solemnly express my deep apologies to you and your family,” she added.</p><p>Zhang did not immediately respond to Insider’s request for comment.</p><p>The backlash has intensified to the point that its top state media outlets are getting involved in the fracas</p><p>The university student’s accusations have gone viral on Weibo, with hashtags related to her post being viewed nearly 1 billion times, per data seen by Insider.</p><p>Even the Ministry of Public Security jumped in, posting on Monday that people should seek help from police first when facing potential criminal issues that are “difficult to judge and deal with.”</p><p>Meanwhile, people have called for Zhang to be charged in court for false accusations, and expelled from her school, Sichuan University. Unverified details about her life and relationships with her college classmates also went viral.</p><p>Deng’s son told local media that his family has chosen to forgive Zhang. “We’ve already said that as long as she apologizes, we’ll forgive her and give her a chance,” he said.</p><p>The People’s Daily, a Chinese state media outlet, published a commentary on Wednesday calling for the public to calm down and stop doxxing Zhang.</p><p>“Many people continue to obsess over the consequences faced by this woman. But in the process, some have exposed her name, age, school, major, and other personal information, and others found her personal social account, and others insulted, abused her, and condemned her endlessly,” it wrote. “These are signs of cyberbullying.”</p><hr><h2 id="生词记录"><a href="#生词记录" class="headerlink" title="生词记录"></a>生词记录</h2><blockquote><p>eviscerate 切除···的内脏；重创（组织或体系的）元气</p><p>maelstorm 骚乱，极度混乱</p><p>upskirt 偷拍</p><p>squat 蹲，蹲坐</p><p>wretched 苦恼的，不幸的；讨厌的，该死的</p><p>tactic 策略，手法</p><p>caption 说明文字</p><p>viral 病毒式传播</p><p>debunk 驳斥，揭穿，揭露···的真相</p><p>blast 爆破，网爆；抨击，严厉批评</p><p>slam 砰地关上；严厉批评</p><p>reconcile 调和，调解，使一致</p><p>broadsheet 大幅报纸，大幅广告</p><p>mediate 调解</p><p>circulate 循环，流通，传递</p><p>solemnly 庄严地，严肃地</p><p>backlash 强烈抵制，集体反对</p><p>fracas 高声争吵，激烈打斗</p><p>hashtag 社交媒体上描述主题的#</p><p>expel 开除，驱逐，除名</p><p>doxx 人肉搜索</p><p>obsess 着迷，困扰，牵挂</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 每日阅读分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 英语提升 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阿里巴巴换帅</title>
      <link href="/2023/06/21/a-li-ba-ba-huan-shuai/"/>
      <url>/2023/06/21/a-li-ba-ba-huan-shuai/</url>
      
        <content type="html"><![CDATA[<h1 id="Alibaba-Is-Replacing-Chairman-and-CEO-Daniel-Zhang"><a href="#Alibaba-Is-Replacing-Chairman-and-CEO-Daniel-Zhang" class="headerlink" title="Alibaba Is Replacing Chairman and CEO Daniel Zhang"></a><strong>Alibaba Is Replacing Chairman and CEO Daniel Zhang</strong></h1><hr><p>Alibaba Group Holding is replacing top executive Daniel Zhang by naming company veteran and Brooklyn Nets owner Joe Tsai as the new chairman, as the Chinese e-commerce giant grapples with slow growth and poor stock performance.</p><p>The reshuffling at the top, effective on Sept. 10, also comes as Alibaba undergoes a major reorganization. Alibaba is in the process of splitting itself into six independently run companies that could seek separate initial public offerings, a move that would break up the business empire that co-founder Jack Ma had built over two decades.</p><p>Eddie Wu, who heads the Taobao and Tmall domestic e-commerce business, will succeed Zhang as chief executive and replace Zhang on the board, the company said in a statement Tuesday.</p><p>Tsai—born in Taiwan and a graduate of Yale University—and Wu are both company veterans who have been with Alibaba since 1999 and, together with Ma, helped develop the group’s business strategies and corporate culture. </p><p>A decade ago, Wu, who is a less-known co-founder led the company’s strategy to develop and give priority to its smartphone shopping sites as consumers shifted to using the mobile internet. </p><p>Zhang is currently heading Alibaba’s cloud-computing unit and will continue to do so, Alibaba said in its statement.</p><p>“It is the right time for me to dedicate my full attention and time to the [cloud] business,” Zhang said in a letter to employees that was seen by The Wall Street Journal. </p><p>In May, Alibaba said it planned to fully spin off its cloud business and complete its public listing in the next 12 months. It didn’t immediately respond to a request for comment on Zhang’s letter.</p><p>Ma, the billionaire co-founder, was recently in Hangzhou, where Alibaba is based. On Saturday, he attended an annual global mathematics competition that he started in 2018 and chatted with the finalists, according to a statement by Alibaba’s research unit. </p><p>Ma remains the biggest shareholder of Alibaba and still cares very much about the company, Michael Evans, Alibaba’s president, said at a technology event in Paris last week.</p><p>Alibaba has been grappling with sluggish growth, facing a cooling economy and rising competition from homegrown upstarts such as PDD Holding’s Pinduoduo e-commerce platform and ByteDance’s Douyin short-video platform.</p><p>In the January-to-March quarter, Alibaba posted the slowest revenue growth for the second straight quarter since it went public in 2014.</p><p>Alibaba listed in New York following a blockbuster IPO that remains one of the world’s largest-ever stock sales. Zhang was promoted from chief operating officer to CEO the following year and became the company’s executive chairman in 2019 when Ma stepped down. </p><p>Under Zhang, Alibaba was for a time China’s most valuable publicly listed company, with a market capitalization that topped $850 billion at its peak in October 2020. Alibaba was subsequently hit with a record $2.8 billion antitrust fine.</p><p>Its shares have lost close to $600 billion in market value from their record high and briefly fell below their New York IPO price last year. Longtime shareholder SoftBank Group of Japan recently unwound its stake in Alibaba. </p><p>Alibaba’s Hong Kong-listed shares were 1.6% lower in Tuesday afternoon trading after the company mapped out its leadership succession plan.</p><p>Alibaba’s restructuring culminates a yearslong shift inside the company to make it more nimble. Alibaba’s various businesses will be split up into six major areas: cloud computing, Chinese e-commerce, global e-commerce, digital mapping and food delivery, logistics, and media and entertainment.</p><hr><h2 id="生词记录"><a href="#生词记录" class="headerlink" title="生词记录"></a>生词记录</h2><blockquote><p>veteran 老手，经验丰富的人；老兵，退伍军人</p><p>giant 巨头，大公司</p><p>grapple with 扭打，搏斗；努力设法解决，设法对付，尽量克服</p><p>stock 库存，存货；股份，股票</p><p>reshuffle 改组</p><p>undergo 经历，经受</p><p>succeed 继任，接替</p><p>board 董事会；上船，上飞机</p><p>spin sth off 派生出，衍生出；将···分离出来</p><p>list 上市</p><p>finalist 决赛选手</p><p>sluggish 萧条的，迟钝的，行动缓慢的，迟缓的，缺乏活力的，性能欠佳的</p><p>upstart 新出现的竞争者；暴发户</p><p>post 职位，职务；帖子；公布公司财务结果</p><p>go public 公开，公之于众；公开发售股票，上市</p><p>blockbuster 轰动，巨型炸弹，轰动一时的书籍&#x2F;电影</p><p>step down 退位</p><p>antitrust 反垄断的</p><p>unwind 解开，打开，松开；放松，轻松</p><p>map sth out 详细安排，筹划</p><p>culminate 以···告终，达到···的顶点</p><p>nimble 灵活的，敏捷的，机敏的</p><p>logistics 后勤，物流工作</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 每日阅读分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 英语提升 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>618狂欢</title>
      <link href="/2023/06/20/618-kuang-huan/"/>
      <url>/2023/06/20/618-kuang-huan/</url>
      
        <content type="html"><![CDATA[<h1 id="Consumption-Soft-Even-Amid-Deep-Discounts-During-Major-China-Shopping-Festival-Analysts-Say"><a href="#Consumption-Soft-Even-Amid-Deep-Discounts-During-Major-China-Shopping-Festival-Analysts-Say" class="headerlink" title="Consumption Soft Even Amid Deep Discounts During Major China Shopping Festival, Analysts Say"></a><strong>Consumption Soft Even Amid Deep Discounts During Major China Shopping Festival, Analysts Say</strong></h1><hr><p>Chinese consumers snapped up billions of dollars’ worth of items in China’s first major online shopping festival after emerging from the pandemic as merchants slashed prices, but analysts say that consumer confidence still remains weak.</p><p>Chinese merchants offered customers steep discounts during the 618 shopping festival, which ran on China’s major shopping platforms from the end of May until June 18, in the hopes of shoring up sales amid a weaker-than-expected recovery in consumption.</p><p>Major shopping festivals, like e-commerce retailer JD.com’s 618 and Alibaba’s Singles’ Day, are typically barometers of consumption in China, and Chinese e-commerce platforms often participate by offering discounts and incentives to consumers.</p><p>Analysts say that consumption remains soft this year, even as platforms including JD.com, Tmall, Taobao and Pinduoduo offered billions in subsidies.</p><p>Shaun Rein, founder and managing director of the China Market Research Group in Shanghai, said that consumers were less likely to spend more during 618 as merchants had already been discounting heavily for years because of the pandemic, and deals were not that much better compared to previous months.</p><p>In March, JD.com launched a “10-billion-yuan subsidies” program to compete with rival Pinduoduo, which is known for its low-priced goods. The CEO of Alibaba’s e-commerce business unit, Trudy Dai, also previously pledged to make “huge, historic” investments to attract users to its platforms.</p><p>“For months, Chinese consumers have been price-conscious, looking for deals and trading down across most product categories,” Rein said.</p><p>This year, for the first time, JD.com did not reveal its total sales numbers for the 618 event, despite saying in a blog post that the 2023 shopping extravaganza had “exceeded expectations, setting a new record.”</p><p>JD.com said in a blog post that during the 618 shopping festival, consumers snapped up 10 times the number of products that were eligible under its “10-billion-yuan subsidies” program, compared to March.</p><p>Despite overall soft consumption, categories like cosmetics and luxury goods saw a bigger uptick in sales compared to the previous quarter, according to Jacob Cooke, CEO of e-commerce consultancy WPIC.</p><p>For this year’s 618 event, more luxury brands took part as they sought to boost sales in China after the sector in 2022 declined for the first time in five years.</p><p>Brands like Moncler and Lemaire took part in 618 on Tmall for the first time.</p><p>Many luxury brands also took the opportunity to launch new products online, with some offering rare discounts and other incentives such as interest-free payment in instalments over 12 months.</p><p>Brands like Burberry, Chloe and Miu Miu’s sales in the first 30 minutes of the 618 festival at the end of May had exceeded its total sales during the shopping festival a year ago, according to Tmall data.</p><p>“Luxury coming back online is a big trend,” said Cooke. “Some brands may see up to a 10-fold increase in sales over last year.”</p><p><strong>JD.com sales during China shopping festival better than expected -analysts</strong></p><p><strong>From: Reuters</strong></p><p>Sales on JD.com e-commerce site during China’s mid-year shopping festival grew more than expected, brokerages said.</p><p>JD.com saw sales rise 6-8% over the 618 festival period that ran from late May through to Sunday evening, according to a client note from Citi analysts. That beat Citi’s expectations of 2-5% growth.</p><p>That estimate was, however, still less than 10.3% growth for JD.com’s gross merchandising value (GMV) logged last year and 27.7% growth in 2021.</p><p>The festival, named after the founding date of JD.com but embraced by all e-commerce platforms, is a key barometer of Chinese consumer spending.</p><p>JD.com has said it will not release its GMV figures for the festival period this year, only noting that sales hit a record - a milestone which was expected. Alibaba has also stopped releasing GMV figures for the so-called Singles Day shopping festival period in November in the face of slowing sales.</p><p>The festival period this year was marked by fierce competition, with platforms offering billions of yuan in coupons and subsidies to entice Chinese consumers to spend.</p><p>Retail sales climbed 12.7% in May, missing a consensus estimate of 13.6% growth and slowing from 18.4% growth in April.</p><p>Goldman Sachs analysts said in a client note said JD.com sales during 618 “slightly” exceeded expectations, while Jefferies analysts said the event “surpassed expectations and set new records.” Neither provided numerical estimates.</p><hr><h2 id="生词记录"><a href="#生词记录" class="headerlink" title="生词记录"></a>生词记录</h2><blockquote><p>snap sth up 抢购一空</p><p>merchant 商人，批发商</p><p>slash 大幅削减，大幅减少</p><p>steep 大起大落的；陡峭的</p><p>shore sth up 支撑，改善，提高</p><p>retailer 零售商</p><p>barometer 晴雨表，标志，指标</p><p>incentive 刺激，激励</p><p>subsidies 补贴，津贴</p><p>rival 竞争对手；比得上</p><p>pledge 承诺，保证；保证给予；抵押；誓言，诺言</p><p>price-conscious 价格敏感的</p><p>trade down 买更便宜东东西</p><p>extravaganza 盛大表演</p><p>exceed 超过，超出</p><p>eligible 合格的，有资格的；合适的</p><p>cosmetics 化妆品，美容品；装饰门面的，表面的</p><p>uptick 增长，发展，上升</p><p>consultancy 咨询公司，咨询服务</p><p>interest-free 无息</p><p>instalment 分期付款</p><p>brokerage 经纪商</p><p>gross 令人不快的，令人恶心的；严重的，极端的；毛的，总的，总共，全部</p><p>milestone 里程碑，转折点，重大事件</p><p>coupon 优惠券</p><p>entice 诱惑，诱使</p><p>consensus  一致的意见，共识</p><p>surpass 优于，超过</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 每日阅读分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 英语提升 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于idea使用git更新项目失败问题解决</title>
      <link href="/2023/06/20/idea-li-yong-git-geng-xin-xiang-mu-shi-bai-wen-ti-jie-jue/"/>
      <url>/2023/06/20/idea-li-yong-git-geng-xin-xiang-mu-shi-bai-wen-ti-jie-jue/</url>
      
        <content type="html"><![CDATA[<p>最近在idea写LeetCode题解，利用git上传到github时出现错误<code>Failed to connect to github.com port 443 after ***** ms: Couldn‘t connect to server</code>，经查找后发现原来是代理端口号与git设置的代理端口号不一致所致，特此记录一下解决方法。</p><ol><li>查找本地代理端口号，如下图本机代理端口号为7890</li></ol><img src="https://s3.bmp.ovh/imgs/2023/06/20/4ce341f1015e87ec.png" alt="代理编辑" style="zoom:50%;" /><ol start="2"><li>修改git的代理端口号</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config <span class="token parameter variable">--global</span> http.proxy http://127.0.0.1:7890<span class="token function">git</span> config <span class="token parameter variable">--global</span> https.proxy http://127.0.0.1:7890<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="3"><li>重新push项目即可成功</li></ol>]]></content>
      
      
      <categories>
          
          <category> 关于学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 问题解决 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>听说考完专四了？</title>
      <link href="/2023/06/19/ting-shuo-kao-wan-zhuan-si-liao/"/>
      <url>/2023/06/19/ting-shuo-kao-wan-zhuan-si-liao/</url>
      
        <content type="html"><![CDATA[<h1 id="Babies’-sleep-patterns-can-be-challenging-–-here’s-why-you-shouldn’t-despair"><a href="#Babies’-sleep-patterns-can-be-challenging-–-here’s-why-you-shouldn’t-despair" class="headerlink" title="Babies’ sleep patterns can be challenging – here’s why you shouldn’t despair"></a><strong>Babies’ sleep patterns can be challenging – here’s why you shouldn’t despair</strong></h1><hr><p>Pairing the words “baby” and “sleep” can evoke strong emotions. Those who have had limited contact with little ones might interpret this word-combination as implying deep and prolonged slumber. For others, this union of words may elicit memories of prolonged periods of chaotic sleep (or what can feel like no sleep at all).</p><p>Coping with the way babies sleep can be difficult. It’s not that babies don’t sleep. In fact, they sleep more than at any other stage of life. It’s more an issue of when they sleep. Newborns start by sleeping and waking around the clock. This is not always easy for parents. There is even research suggesting that in adults waking repeatedly at night can feel as bad as getting hardly any sleep in terms of attentional skills, fatigue levels and symptoms of depression.</p><p>As to why infants wake at night, this is best explained by thinking about the two things that govern our sleep: the homeostatic and circadian processes. The crux of the homeostatic process is the straightforward idea that the longer we have been awake the greater our sleep drive (and the more sleepy we feel). It may take an adult an entire day to build up enough sleep drive to fall asleep at bedtime, but an infant may only need an hour or two of wakefulness before being able to drift off to sleep.</p><p>The second process is circadian, which works like a clock. Adults typically feel more awake during the morning hours and sleepy at night, regardless of when we last slept. In very young babies this process is not yet developed. This means that sleep is more likely to occur at different points across the 24-hour day.</p><p>Practically speaking, the immaturity of these two processes mean that that newborn babies are actually expected to wake at night: they are doing exactly what they are supposed to do! They start life with small stomachs which need to be filled regularly so you child can gain strength and stay hydrated, so it’s a good thing that they are waking regularly to feed. As hard as disturbed sleep can be for caregivers, a waking baby is a good thing.</p><p>But how long might this continue? The parenting mantra “this too shall pass” is true when it comes to dealing with certain aspects of a baby’s sleep. Night wakings typically become less frequent as an infant ages, and sleep changes in other ways throughout a person’s life. For example, sleep length reduces and there are changes in sleep architecture (or composition of Rapid Eye Movement, REM, and Non-Rapid Eye Movement, NREM, sleep). A premature baby’s sleep cycle might take just 45 minutes, whereas an adult’s can be double that at 90 minutes. Other changes also occur; for example, whereas babies’ sleep cycles start with REM-like sleep, adults start with NREM sleep.</p><p>For some parents, knowing that sleep changes throughout life is enough to help them cope with an infant’s night awakenings. In fact, sleep education alone can help some parents to deal with infant sleep. Other parents want more detailed information, such as about babies’ sleep schedules, bedtime routines, sleep problems, sleep safety, sleep environment, naps, sleep training, and special circumstances. We provide all this information, and more, on our website, where physicians, psychologists, and researchers from the Pediatric Sleep Council have also answered hundreds of questions about sleep via video and text. In addition, on Baby Sleep Day, we will be available to answer your individual questions via our Facebook page.</p><p>Remember: sleep matters. Experts agree that sleep is essential for health, growth and general development. It is important not just for babies, but for parents too. If we can improve sleep within a family, and create a happy association between the words “baby” and “sleep”, then the Pediatric Sleep Council and Baby Sleep Day have achieved their goal.</p><hr><h2 id="生词记录"><a href="#生词记录" class="headerlink" title="生词记录"></a>生词记录</h2><blockquote><p>evoke 唤起，引起</p><p>interpret 诠释，说明；把···理解为，领会；演绎；翻译，口译</p><p>prolonged 长期的</p><p>slumber 睡觉，睡眠</p><p>elicit 引出，探出，诱出</p><p>chaotic 混乱的，毫无秩序的</p><p>around the clock 全天候的</p><p>fatigue 疲劳，劳累</p><p>homeostatic 体内动态平衡</p><p>circadian 昼夜的，约一日的</p><p>crux 关键，核心，症结</p><p>drift off 渐渐入睡</p><p>immaturity 不成熟，幼稚；发育未全，未成熟</p><p>hydrated 摄入足够水分的；脱水的，极度干渴的</p><p>mantra 准则；老话，口头禅，口号</p><p>composition 成分，构成，结构</p><p>premature 过早的，不成熟的，仓促的</p><p>pediatric 小儿科的</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 每日阅读分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 英语提升 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>鼠身去哪了？</title>
      <link href="/2023/06/18/shu-shen-qu-na-liao/"/>
      <url>/2023/06/18/shu-shen-qu-na-liao/</url>
      
        <content type="html"><![CDATA[<h1 id="In-a-Reckoning-with-Culinary-Deception-Jiangxi-Province-Unravels-Egregious-Food-Scandal"><a href="#In-a-Reckoning-with-Culinary-Deception-Jiangxi-Province-Unravels-Egregious-Food-Scandal" class="headerlink" title="In a Reckoning with Culinary Deception: Jiangxi Province Unravels Egregious Food Scandal"></a><strong>In a Reckoning with Culinary Deception: Jiangxi Province Unravels Egregious Food Scandal</strong></h1><hr><p>In an unexpected turn of events, a provincial investigation team in Jiangxi Province, Eastern China, unveiled a revolting discovery that has sent shockwaves through the community and prompted an extensive, province-wide food safety campaign. The team, assembled posthaste after public outcry, has now confirmed that an aberrant item found in a college canteen dish was, in fact, the severed head of a rat, and not a duck neck as was initially asserted by local authorities.</p><p>Comprising representatives from an assortment of government bodies – including education, public security, and market supervision and regulation authorities – the ad hoc team embarked upon their quest for truth when the local market watchdog’s conclusions were besieged by a torrent of skepticism and vitriol online.</p><p>In a meticulous, almost forensic examination of the canteen’s surveillance footage, the investigation team unearthed damning evidence: the contentious object was discarded by canteen staff on the day of the discovery. An assiduous round of interviews ensued, encompassing not only canteen and kitchen overseers but also the unsuspecting student who stumbled upon the ghastly find and the cohort of witnesses to the incident.</p><p>A coterie of zoology savants, enlisted to analyze photographs and video footage furnished by the student, delivered the conclusion: the object was unequivocally identified as the decapitated head of a rodent, likely a rat.</p><p>The college and the market oversight authority of Gaoxin district, Nanchang, are implicated in a dereliction of duty. Their reckless dismissal of empirical evidence and subsequent dissemination of an erroneous narrative was unequivocally condemned by the task force. In a veritable hammer blow, the canteen’s operating certificate has been suspended, and the parent company, along with its legal custodian, has been saddled with the apogee of punitive measures.</p><p>In tandem, the college and the district market watchdog have been served with statutory penalties. Furthermore, a sweeping campaign to bolster food safety standards is set to cascade through Jiangxi Province.</p><p>In the aftermath, the college expediently purged from its website an earlier communique that mendaciously identified the object as a duck neck.</p><p>Observers laud the indefatigable diligence and integrity displayed by the task force in unearthing the truth. Concurrently, they implore a solemn introspection into the murky motivations that possibly underpinned the perfunctory and misleading narrative initially advanced by the college and the local market watchdog. It is imperative, they argue, to meticulously ascertain and address the root causes behind such ignoble deeds.</p><hr><h2 id="生词记录"><a href="#生词记录" class="headerlink" title="生词记录"></a>生词记录</h2><blockquote><p>unveil 为···揭幕，揭开面纱；首次展示，介绍，推出，将···公之于众</p><p>prompt 促使，导致；提词，提白；提示符</p><p>revolting 令人讨厌的</p><p>assemble 聚集，聚合；组装，装配</p><p>posthaste 尽快地，急忙地</p><p>outcry 呐喊，大声疾呼</p><p>aberrant 反常的，异常的</p><p>sever 中断，分开</p><p>assert 断言，主张；维护自己的权力</p><p>comprise 包含，由···组成</p><p>assortment 各种各样</p><p>ad hoc 特别的，临时的</p><p>embark upon 开始，着手做</p><p>quest 追求，寻求，探索</p><p>watchdog 监督人，监察委员会</p><p>besiege 围攻，围困，烦扰，使应接不暇</p><p>torrent 激流，迸发，狂潮</p><p>meticulous 严谨的，一丝不苟的</p><p>forensic 法医的</p><p>unearth 挖掘，发掘；（经努力）发现</p><p>damning 毫不留情的，谴责的，证据确凿的</p><p>contentious 引起争议的</p><p>assiduous 专心致志的，兢兢业业的，勤勉的</p><p>ensue 接着发生</p><p>encompass 包含，包括</p><p>stumble 犯错，失足；踉跄，绊脚</p><p>ghastly 可怕的，令人震惊的</p><p>cohort 有共同特点的一群人</p><p>coterie 小圈子，小团体</p><p>savant 专家，学者</p><p>enlist 谋求（某人的帮助）</p><p>unequivocally 明确地，肯定地</p><p>decapitate 把···斩首</p><p>rodent 啮齿动物</p><p>implicate 牵涉，涉及</p><p>dereliction 玩忽职守</p><p>reckless 鲁莽的，轻率的</p><p>empirical 经验主义的</p><p>dissemination 传播，散布</p><p>veritable 十足的，不折不扣的</p><p>suspend 暂停；暂令停职，暂令停学</p><p>custodian 监护人，监管人，看护人，保管人</p><p>saddle sb with sth 使某人负担，使某人承担</p><p>apogee 顶峰，顶点，最高点</p><p>in tandem 协同地，联合地，同时</p><p>statutory 法定的</p><p>sweeping  影响广泛的，大范围的，根本性的，意义深远的；泛泛之谈</p><p>cascade 大量倾泄；逐层传递，传播，传达</p><p>expediently 方便地，权宜地</p><p>purge 清除，清洗，肃清</p><p>communique 公报</p><p>mendaciously 撒谎地</p><p>laud 称赞，赞美</p><p>implore 哀求某人，恳求得到某物</p><p>introspection 反省</p><p>murky 黑暗的，不清楚的，肮脏的；复杂难懂的</p><p>underpin 加强，加固</p><p>perfunctory 草率的，马虎的，敷衍的</p><p>imperative 迫切的，紧急的，至关重要的</p><p>ascertain 弄清，查明</p><p>ignoble 卑鄙的，可耻的</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 每日阅读分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 英语提升 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>球迷冲进球场拥抱梅西</title>
      <link href="/2023/06/17/qiu-mi-chong-jin-qiu-chang-yong-bao-mei-xi/"/>
      <url>/2023/06/17/qiu-mi-chong-jin-qiu-chang-yong-bao-mei-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="Chinese-fan-runs-onto-the-field-to-hug-Messi-during-controversial-Beijing-match"><a href="#Chinese-fan-runs-onto-the-field-to-hug-Messi-during-controversial-Beijing-match" class="headerlink" title="Chinese fan runs onto the field to hug Messi during controversial Beijing match"></a><strong>Chinese fan runs onto the field to hug Messi during controversial Beijing match</strong></h1><hr><p>During the highly-anticipated Australia v. Argentina friendly match in Beijing on Thursday, an enthusiastic Chinese fan stormed the field in an attempt to hug soccer legend Lionel Messi.</p><p>Video from the game shows the unidentified fan rush up and embrace Messi, while being chased all over the field by security. The crowd in the stadium can be heard shouting Chinese phrases that sort of translate to “Awesome!” and “Badass!”</p><p>The invader managed to high-five one of the goalies before finally being apprehended by security, but did not lose his gleeful smile even as he was being carried out.</p><p>In an interview with Messi’s fan club, he apologized for his behavior, while criticizing the security measures.</p><p>“Of course, I also hope to use my negative case to tell the security personnel that your security work is not competent and gave me such an opportunity,” he said. “There will be many international competitions in Beijing in the future. I hope you will improve your security capabilities.”</p><p>Chinese state media widely covered “Messi mania,” with the Global Times tabloid reporting that fans from across the country had flocked to Beijing just to get a glimpse of the soccer star.</p><p>The tabloid also reported that hotel prices near the stadium have soared to over $1,000 USD per night, and scams claiming to give fans an opportunity to meet Messi have proliferated in recent days.</p><p>In Argentina, many see the match as an economic incentive to boost business ties with China. Combined with another upcoming friendly match against Indonesia’s national team in Jakarta, the Argentina Football Association will ultimately pocket $6 million USD for the matches, La Nacion newspaper reports.</p><p>But the association is also hoping to finalize a deal to open two Football Technological Institutes in China’s Guangxi and Jiangsu provinces, the paper reports, which will employ the same coaching methods used in Buenos Aires.</p><p><strong>Moment a pitch invader breaks through guards and rushes onto the pitch to hug Lionel Messi during Socceroos’ Beijing game - before slamming security for being useless</strong></p><p><strong>From: Daily Mail</strong></p><p>A football fan managed to meet his idol Lionel Messi in the flesh in China - but how he went about it has raised security concerns.</p><p>The supporter burst onto the pitch at the Workers’ Stadium in Beijing and hugged his hero while wearing the iconic Argentina number 10 jersey.</p><p>In comical scenes, he went onto high-five goalkeeper Emi Martinez before eventually being nabbed by security during the friendly against the Socceroos.</p><p>Footage shows the man being carried away from the venue.</p><p>The pitch invader later apologised for his conduct - but not before criticising security for being slow to act.</p><p>‘I hope to use my negative case to tell the security personnel that your security work is not competent and gave me such an opportunity,’ he said.</p><p>‘There will be many international competitions in Beijing in the future. I hope you will improve your security capabilities.’</p><hr><h2 id="生词记录"><a href="#生词记录" class="headerlink" title="生词记录"></a>生词记录</h2><blockquote><p>highly-anticipated 备受期待的</p><p>enthusiastic 热心的，热情的，热衷的</p><p>storm 突袭，攻占；闯，冲</p><p>legend 传说，传奇故事，传奇人物；说明，图例</p><p>unidentified 未知的，不明的，保密的</p><p>phrase 短语，说法，用语，警句</p><p>badass 能人，狠角色；坏人，坏蛋；厉害的，很好的；粗野的，蛮横的</p><p>invader 入侵者</p><p>high-five 举手击掌</p><p>goalie 守门员</p><p>apprehend 逮捕；领会，理解</p><p>gleeful 高兴的，兴奋的</p><p>competent  有能力的，能干的，称职的</p><p>cover 承保；足够支付；报道</p><p>mania 狂热，热衷；痴迷；狂躁症</p><p>tabloid 通俗小报</p><p>flock to 蜂拥而至，成群结队地去</p><p>glimpse 一瞥；短暂的感受</p><p>soar 急剧增加；高飞，翱翔；升空，升腾</p><p>scam 骗局，欺诈，诈骗</p><p>proliferate 激增，扩散</p><p>incentive 激励，刺激，鼓励</p><p>boost 改善，提高，增强，推动</p><p>pocket 口袋；保留（钱）作为收益；窃取，侵吞，把···据为己有</p><p>finalize 把（计划，日期等）最后定下</p><p>employ 使用，利用</p><p>pitch 足球场，运动场地；竭力劝说；投球</p><p>slam 重重撞上；严厉批评，猛烈抨击</p><p>in the flesh 当面，活生生地</p><p>iconic 偶像的，受欢迎的</p><p>comical 滑稽的，古怪可笑的</p><p>nab 抢夺，猛然抓住，抓获，逮捕</p><p>socceroos 澳大利亚国家足球队简称</p><p>footage 片段镜头</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 每日阅读分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 英语提升 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>巴黎治鼠患失败</title>
      <link href="/2023/06/16/ba-li-zhi-shu-huan-shi-bai/"/>
      <url>/2023/06/16/ba-li-zhi-shu-huan-shi-bai/</url>
      
        <content type="html"><![CDATA[<h1 id="Can-humans-and-rats-live-together-Paris-is-trying-to-find-out"><a href="#Can-humans-and-rats-live-together-Paris-is-trying-to-find-out" class="headerlink" title="Can humans and rats live together? Paris is trying to find out"></a><strong>Can humans and rats live together? Paris is trying to find out</strong></h1><hr><p>Can humans and rats live together?</p><p>That’s what city leaders in Paris are trying to find out. The French capital, like many metropolises, has a notorious rodent problem.</p><p>Paris Mayor Anne Hidalgo is forming a committee to study “cohabitation” – to what extent humans and rodents can live together – one of her deputies said Thursday during a city council meeting.</p><p>Anne Souyris, Paris’ deputy mayor in charge of public health, announced the move in response to questions from Geoffroy Boulard, the head of Paris’ 17th arrondissement and a member of the center-right Republican party.</p><p>Boulard had called upon the city government to outline a more ambitious plan against the proliferation of rats in public spaces.</p><p>He has previously criticized Hidalgo, a member of the center-left socialist party, for not doing enough to eliminate rats from Paris, including during strikes earlier this year which saw garbage pile up across the city.</p><p>“The presence of rats on the surface is harmful to the quality of life of Parisians,” Boulard said.</p><p>Boulard said he was raising his question after coming across an ongoing study, Project Armageddon. The project’s mission is aiding the city in managing its rat population and among its objectives is fighting prejudices against rats to help Parisians better live with them.</p><p>The study is being financed by the French government, though the city of Paris is a partner in the project.</p><p>Souyris explained that what was being studied was to what extent humans and rats can live together in a way that is “the most efficient and at the same time ensures that it’s not unbearable for Parisians.”</p><p>While rats can spread disease, the deputy mayor said that the rats being discussed were not the same black rats that can carry plague, but other types of rats that carry diseases like leptospirosis, a bacterial disease. Souyris also highlighted some of the actions taken by the city as part of its 2017 anti-rat plan, including investing in thousands of new garbage cans to “make the rats go back underground.”</p><p>Souyris later said on Twitter that Paris’ rats do not pose a “significant” public health risk. She added that she was asking the French High Council on Public Health to weigh in on the debate.</p><p>“We need scientific advice, not political press releases,” she said.</p><p>Animal rights group Paris Animaux Zoopolis welcomed the city’s move.</p><p>“Rats are present in Paris, as in all major French cities, so the question of cohabitation necessarily arises,” a statement from the group said.</p><p>“At PAZ, when we talk about “peaceful cohabitation” with rats, we don’t mean living with them in our houses and apartments, but making sure that these animals don’t suffer AND that we’re not disturbed. Again, a very reasonable objective!”</p><p>CNN has asked the Paris authorities for more detail on the plans.</p><hr><h2 id="生词记录"><a href="#生词记录" class="headerlink" title="生词记录"></a>生词记录</h2><blockquote><p>rat 老鼠</p><p>metropolis 大城市，首都</p><p>notorious 声名狼藉的，臭名昭著的</p><p>rodent 啮齿动物</p><p>cohabitation 同居</p><p>deputy 代理人，副职，副手；议员</p><p>arrocdissement 区</p><p>outline 概括，略述</p><p>proliferation 扩散，激增，涌现，大量的事物</p><p>pile up 成为一堆，把···堆积起来</p><p>Armageddon 大规模战争，大决战</p><p>aid 帮助，援助</p><p>objective 目标，目的；客观的，就事论事的，不带个人感情的</p><p>prejudice 偏见</p><p>plague 鼠疫，瘟疫</p><p>bacterial 细菌的</p><p>can 金属罐</p><p>pose 姿势；造成，引起；提出，质询</p><p>weigh in 在讨论中发表有分量的意见，发挥作用</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 每日阅读分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 英语提升 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题学习-栈与队列篇</title>
      <link href="/2023/06/15/leetcode-shua-ti-xue-xi-zhan-yu-dui-lie-pian/"/>
      <url>/2023/06/15/leetcode-shua-ti-xue-xi-zhan-yu-dui-lie-pian/</url>
      
        <content type="html"><![CDATA[<h2 id="用栈实现队列"><a href="#用栈实现队列" class="headerlink" title="用栈实现队列"></a><a href="https://leetcode.cn/problems/implement-queue-using-stacks/">用栈实现队列</a></h2><p>栈的特性：先进后出</p><p>队列特性：先进先出</p><p>因此利用两个栈实现一个队列，一个为输入栈，另一个为输出栈</p><ul><li><p>push的时候就直接进入输入栈</p></li><li><p>pop的时候若输出栈为空则需先把进栈数据全部输入来，然后再出栈；若输出栈非空，则直接出栈；</p></li><li><p>当两个栈均为空时证明队列已空</p></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Stack</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyQueue</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 输入栈</span>    <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> stackIn<span class="token punctuation">;</span>    <span class="token comment">// 输出栈</span>    <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> stackOut<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">MyQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        stackIn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stackOut <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 输入栈直接push</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        stackIn<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 队列头元素出列并移除</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 输出栈为空</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>stackOut<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 把输入栈中的全部数据导入输出栈中</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>stackIn<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                stackOut<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>stackIn<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 返回输出栈中的顶部元素即队头元素</span>        <span class="token keyword">return</span> stackOut<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 只获取队列头元素值，并不移除</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>stackOut<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>stackIn<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                stackOut<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>stackIn<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> stackOut<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> stackIn<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> stackOut<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="用队列实现栈"><a href="#用队列实现栈" class="headerlink" title="用队列实现栈"></a><a href="https://leetcode.cn/problems/implement-stack-using-queues/">用队列实现栈</a></h2><ol><li>双队列实现栈</li></ol><p><img src="https://s3.bmp.ovh/imgs/2023/06/16/07567eeec67f087f.png" alt="示例"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">LinkedList</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Queue</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyStack</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// queue1模仿栈</span>    <span class="token class-name">Queue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> queue1<span class="token punctuation">;</span>    <span class="token comment">// queue2 做辅助队列</span>    <span class="token class-name">Queue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> queue2<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">MyStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        queue1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        queue2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 新元素先放入辅助队列中</span>        queue2<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 当queue1中存在元素时，全部出队加入queue2中</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>queue1<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            queue2<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>queue1<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 交换两队列，确保queue2每次开始都是空队列，而queue1的队头刚好就是栈顶元素</span>        <span class="token class-name">Queue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> temp <span class="token operator">=</span> queue1<span class="token punctuation">;</span>        queue1 <span class="token operator">=</span> queue2<span class="token punctuation">;</span>        queue2 <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 此后每次出栈，获取栈顶元素或判空都只需要操作queue1即可</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> queue1<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> queue1<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> queue1<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * Your MyStack object will be instantiated and called as such: * MyStack obj = new MyStack(); * obj.push(x); * int param_2 = obj.pop(); * int param_3 = obj.top(); * boolean param_4 = obj.empty(); */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>单队列实现栈</li></ol><p><img src="https://s3.bmp.ovh/imgs/2023/06/16/cd73bc1c028235e7.png" alt="示例"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">LinkedList</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Queue</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyStack</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Queue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> queue<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">MyStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//  每次都获取当前队列的长度</span>        <span class="token keyword">int</span> size <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 新元素入队</span>        queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 然后除队尾的新元素外，所有元素出队再入队，重新排列，这样队头就是栈顶元素</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>size <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            size<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> queue<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="有效的括号"><a href="#有效的括号" class="headerlink" title="有效的括号"></a><a href="https://leetcode.cn/problems/valid-parentheses/">有效的括号</a></h2><p>三种可能不匹配的情况：</p><ol><li>左方向有多余括号</li><li>右方向有多余括号</li><li>括号类型不匹配</li></ol><p><img src="https://s3.bmp.ovh/imgs/2023/06/19/60658fe59d1e316f.png" alt="示例"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isValid</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Character</span><span class="token punctuation">></span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> eachChar <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 遍历到左括号，把相应右括号入栈</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>eachChar<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'('</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token char">')'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>eachChar<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'&#123;'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token char">'&#125;'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>eachChar<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'['</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token char">']'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 当字符串尚未被遍历完而栈为空时，说明右方向有多余括号</span>        <span class="token comment">// 当栈顶元素与当前遍历字符不等时，说明有括号类型不匹配</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> eachChar<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 匹配到相应的左括号，相应的右括号出栈</span>            stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 遍历完毕后，栈也应该为空</span>    <span class="token keyword">return</span> stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="删除字符串中的所有相邻重复项"><a href="#删除字符串中的所有相邻重复项" class="headerlink" title="删除字符串中的所有相邻重复项"></a><a href="https://leetcode.cn/problems/remove-all-adjacent-duplicates-in-string/">删除字符串中的所有相邻重复项</a></h2><p>解题思想：利用栈先入后出的特性</p><p>当栈为空或栈顶元素和当前遍历的字符不相等时，则入栈</p><p>当栈顶元素和当前遍历的字符相等时，则出栈</p><p>最后栈中所剩元素即删除相邻重复项后所剩下的字符串</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">removeDuplicates</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Character</span><span class="token punctuation">></span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 栈空或不等，入栈</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">!=</span> stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 相邻元素相同，出栈，往后走</span>            stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 栈中所剩则所求</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> sb<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="逆波兰表达式求值"><a href="#逆波兰表达式求值" class="headerlink" title="逆波兰表达式求值"></a><a href="https://leetcode.cn/problems/evaluate-reverse-polish-notation/">逆波兰表达式求值</a></h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">evalRPN</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> tokens<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 利用栈的特性</span>        <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 循环遍历数组内容</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> token <span class="token operator">:</span> tokens<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 当栈为空或数组元素是数字时，入栈</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token string">"+-*/"</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">// 数组元素是运算符时，栈中数字出栈，结合运算符进行运算，结果入栈</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"+-*/"</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">int</span> first <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> second <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">;</span>                <span class="token keyword">switch</span> <span class="token punctuation">(</span>token<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">case</span> <span class="token string">"+"</span><span class="token operator">:</span>                        result <span class="token operator">=</span> second <span class="token operator">+</span> first<span class="token punctuation">;</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token keyword">case</span> <span class="token string">"-"</span><span class="token operator">:</span>                        result <span class="token operator">=</span> second <span class="token operator">-</span> first<span class="token punctuation">;</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token keyword">case</span> <span class="token string">"*"</span><span class="token operator">:</span>                        result <span class="token operator">=</span> second <span class="token operator">*</span> first<span class="token punctuation">;</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token keyword">case</span> <span class="token string">"/"</span><span class="token operator">:</span>                        result <span class="token operator">=</span> second <span class="token operator">/</span> first<span class="token punctuation">;</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 最后栈中所剩即结果</span>        <span class="token keyword">return</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="滑动窗口最大值"><a href="#滑动窗口最大值" class="headerlink" title="滑动窗口最大值"></a><a href="https://leetcode.cn/problems/sliding-window-maximum/">滑动窗口最大值</a></h2><h2 id="前-K-个高频元素"><a href="#前-K-个高频元素" class="headerlink" title="前 K 个高频元素"></a><a href="https://leetcode.cn/problems/top-k-frequent-elements/">前 K 个高频元素</a></h2>]]></content>
      
      
      <categories>
          
          <category> 关于学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我怕再不跳她就没机会上来了</title>
      <link href="/2023/06/15/wo-pa-zai-bu-tiao-ta-jiu-mei-ji-hui-shang-lai-liao/"/>
      <url>/2023/06/15/wo-pa-zai-bu-tiao-ta-jiu-mei-ji-hui-shang-lai-liao/</url>
      
        <content type="html"><![CDATA[<blockquote><p>6月13日，浙江杭州西兴大桥，一名年轻女子跳桥轻生，正在配送路上的外卖小哥彭清林紧跟着从10余米高的桥上一跃而下，把女子从死亡边缘拉了回来。</p></blockquote><h1 id="Physicists-calculate-highest-dives-most-humans-can-safely-withstand"><a href="#Physicists-calculate-highest-dives-most-humans-can-safely-withstand" class="headerlink" title="Physicists calculate highest dives most humans can safely withstand"></a><strong>Physicists calculate highest dives most humans can safely withstand</strong></h1><hr><p>By using 3D-printed models and dropping them into a tank, researchers have found the maximum heights people can dive from before they will encounter forces that can cause injury</p><p>How high would you dare to dive from? An experiment with 3D-printed models has discovered how high people can leap from into water without serious risk of injury.</p><p>Sunghwan Jung at Cornell University in New York and his colleagues studied the forces experienced when slamming into water by dropping 3D-printed models representing different human postures into a tank. One represented a person diving head first with their hands by their sides, one a person with their hands above their head and their palms touching, and another was just a leg with a foot representing jumping in feet first. Each model was equipped with a force sensor and was filmed with a high-speed camera when dropped.</p><p>To determine unsafe heights for diving, the researchers compared the forces they recorded to those known to cause physical damage to people. They found that those force levels were met for head-first divers above 8 metres, hands-first divers above 12 metres and foot-first divers above 15 metres.</p><p>Jung says that most of the force affecting the body while diving is due to the displacement of water. It is like pushing your fingers very quickly into a jar of honey – the liquid forcefully resists, he says.</p><p>People have successfully dived from much higher heights than the limits found in the study. For example, Laso Schaller broke the record for the highest feet-first dive in 2015 when he jumped from 58.8 metres above water. Jung says that to execute such extreme jumps without injury, divers must flex the right muscles to make their bodies stiffer and tighter.</p><p>Head and neck injuries often happen when dives go wrong, and shoulder and lower back injuries are common in divers more generally, says Nathaniel Jones at the Loyola University Medical Center in Illinois. “Springboard divers average 100 to 150 dives per day and platform divers 50 to 100 dives per day. Doing so many dives puts them at risk through multiple injury opportunities,” he says.</p><p>Jung says that his team wants to experiment with differently shaped models for dives into snow rather than water, such as those that some foxes perform.</p><hr><h2 id="生词记录"><a href="#生词记录" class="headerlink" title="生词记录"></a>生词记录</h2><blockquote><p>physicist 物理学家</p><p>tank 坦克；表现糟糕，快速减少，衰落，下降；水箱，水槽</p><p>dive 跳水，下潜</p><p>dive in&#x2F;into sth 贸然投入到···之中；介入，一心投入，钻研</p><p>encounter 遭遇；偶然相遇；邂逅，不期而遇</p><p>force 力量，暴力，武力；强迫，迫使</p><p>leap 跳，跳跃；激增，提高，猛涨</p><p>slam 严厉批评，猛烈抨击；重重撞上，砰地关上</p><p>sensor 传感器</p><p>diver 跳水运动员，潜水员</p><p>displacement 排水量；被迫移居他乡</p><p>jar 罐子，坛子</p><p>resist 抵挡，抵制；按捺，忍住</p><p>flex 活动（手臂、腿等）；使（肌肉）绷紧</p><p>stiff 不易弯曲的，硬的，挺的；僵硬的，强直的</p><p>springboard 跳板</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 每日阅读分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 英语提升 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最痛苦的其实是周二</title>
      <link href="/2023/06/14/zui-tong-ku-de-qi-shi-shi-zhou-er/"/>
      <url>/2023/06/14/zui-tong-ku-de-qi-shi-shi-zhou-er/</url>
      
        <content type="html"><![CDATA[<h1 id="Mondays-less-miserable-than-Tuesdays-research-finds"><a href="#Mondays-less-miserable-than-Tuesdays-research-finds" class="headerlink" title="Mondays less miserable than Tuesdays, research finds"></a><strong>Mondays less miserable than Tuesdays, research finds</strong></h1><hr><p>Conventional wisdom has been turned on its head by researchers at the London School of Economics, who have been monitoring the moodswings of 22,000 people.</p><p>Over a two-month period volunteers have been registering their state of mind with the help of an iPhone application called Mappiness,</p><p>The results have shown that Tuesday is when most people are at their lowest ebb.</p><p>“It seems plausible that on Monday the weekend has not quite worn off,” said George MacKerron, of LSE’s Department of Geography and Environment, who is running the project.</p><p>“By Tuesday they are well into the working week and the following weekend is not yet in sight.”</p><p>The information has been gathered by sending an alert to volunteers’ iPhones twice a day.</p><p>They are asked how they feel, who they are with, whether they are at home and what they are doing.</p><p>Their exact position is logged at the same time by satellite – using the same technology as employed in car navigation systems.</p><p>This also enabled researchers to discover the happiest – and indeed unhappiest – places in the country.</p><p>Thus far Bournemouth is the happiest place in the country, with 82 per cent of respondents seeming pretty content.</p><p>Life is rather less cheerful in the City of London, Eastbourne and Slough, where the Office comedy series was set.</p><p>Much could be learned from the research, Mr MacKerron added.</p><p>“By tracking across space as well as time, and by making novel use of a technology that millions of people already carry with them, we hope to find better answers to questions about the impacts of natural beauty, environmental problems – maybe even aspects of climate – on individual and national wellbeing.”</p><p><strong>Forget manic Monday, terrible Tuesday is really the most depressing day of the week</strong></p><p><strong>From: Daily Mail</strong></p><p><strong>12 October 2010</strong></p><p>If you woke up this morning thinking the toughest day of the week had been and gone, you were wrong.</p><p>Mondays may have long been thought of as miserable, but we’re more likely to feel down in the dumps on a Tuesday.</p><p>According to researchers from the London School of Economics, our moods are at their brightest on Saturday, with the weekend feelgood factor continuing into Sunday. </p><p>But while levels of contentment drop when the working week begins on Monday, it is on Tuesday that we reach our lowest ebb.</p><p>Academics used an iPhone application called Mappiness to log the moods of 22,000 participants over two months.</p><p>‘It seems plausible that on Monday the weekend has not quite worn off,’ said George MacKerron, from LSE’s Department of Geography and Environment.</p><p>The data was collated by sending alerts to volunteers’ mobile phones twice a day.</p><p>The messages asked how they felt, who they were with, where they were and what they were doing.</p><p>Using satellite navigation systems, their exact locations were also logged – allowing the scientists to pinpoint the happiest parts of the country.</p><p>Perhaps unsurprisingly, the highest levels of contentment were found in seaside towns, with Bournemouth and Dorset coming top.</p><p>But things were less cheerful for those in the City of London, Eastbourne and Slough – the setting for Ricky Gervais’s comedy series The Office.</p><hr><h2 id="生词记录"><a href="#生词记录" class="headerlink" title="生词记录"></a>生词记录</h2><blockquote><p>conventional 传统的，常规的，普通的</p><p>monitor 监视，检查</p><p>moodswing 情绪波动</p><p>ebb 衰退，衰竭；落潮</p><p>plausible 貌似真实可信的；花言巧语的，巧舌如簧的</p><p>wear off 逐渐消失，消逝</p><p>satellite 卫星</p><p>respondent 回答者，答复者</p><p>content 满意的</p><p>manic 十分兴奋的；躁狂的，焦躁不安的</p><p>down in the dumps 情绪低落，不高兴</p><p>collate 校对，对照；检点，整理</p><p>pinpoint 查明，准确地说出，描述（事实真相）</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 每日阅读分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 英语提升 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>研究建议失眠者睡前不要看时间</title>
      <link href="/2023/06/13/yan-jiu-jian-yi-shi-mian-zhe-shui-qian-bu-yao-kan-shi-jian/"/>
      <url>/2023/06/13/yan-jiu-jian-yi-shi-mian-zhe-shui-qian-bu-yao-kan-shi-jian/</url>
      
        <content type="html"><![CDATA[<h1 id="Losing-sleep-over-losing-sleep-how-watching-the-clock-impacts-insomnia-use-of-sleep-aids"><a href="#Losing-sleep-over-losing-sleep-how-watching-the-clock-impacts-insomnia-use-of-sleep-aids" class="headerlink" title="Losing sleep over losing sleep: how watching the clock impacts insomnia, use of sleep aids"></a><strong>Losing sleep over losing sleep: how watching the clock impacts insomnia, use of sleep aids</strong></h1><hr><p>Watching the clock while trying to fall asleep exacerbates insomnia and the use of sleep aids, according to research from an Indiana University professor – and a small change could help people sleep better.</p><p>The research, led by Spencer Dawson, clinical assistant professor and associate director of clinical training in the College of Arts and Sciences’ Department of Psychological and Brain Sciences, focuses on a sample of nearly 5,000 patients presenting for care at a sleep clinic.</p><p>Insomnia affects between 4 and 22% of adults and is associated with <em>long-term health problems including cardiovascular disease, diabetes and depression</em>.</p><p>Participants completed questionnaires about the severity of their insomnia, their use of sleep medication and the time they spent monitoring their own behavior while trying to fall asleep. They were also asked to report any psychiatric diagnoses. Researchers conducted mediation analyses to determine how the factors influenced each other.</p><p>“We found time monitoring behavior mainly has an effect on sleep medication use because it exacerbates insomnia symptoms,” Dawson said. “People are concerned that they’re not getting enough sleep, then they start estimating how long it will take them to fall back asleep and when they have to be up. That is not the sort of activity that’s helpful in facilitating the ability to fall asleep – the more stressed out you are, the harder time you’re going to have falling asleep.”</p><p>As the frustration over sleeplessness grows, people are more likely to use sleep aids in an attempt to gain control over their sleep.</p><p>The results are published in The Primary Care Companion for CNS Disorders.</p><p>Dawson said the research indicates a simple behavioral intervention could provide help for those struggling with insomnia. He gives the same advice to every new patient the first time they meet.</p><p>“One thing that people could do would be to turn around or cover up their clock, <em>ditch the smart watch, get the phone away</em> so they’re simply not checking the time,” Dawson said. “There’s not any place where watching the clock is particularly helpful.”</p><p>With 15 years of of research and clinical experience in the sleep field, Dawson is interested in comparing individuals’ sleeping experiences with what is concurrently happening in their brains. He trains and supervises doctoral students in the Department of Psychological and Brain Science’s Clinical Science Program.</p><hr><h2 id="生词记录"><a href="#生词记录" class="headerlink" title="生词记录"></a>生词记录</h2><blockquote><p>exacerbate 使恶化，使加剧</p><p>insomnia 失眠</p><p>clinical 门诊的，临床的</p><p>psychological 心灵的，心理的，精神上的</p><p>cardiovascular 心血管的</p><p>severity 严重</p><p>medication 药物 </p><p>monitor 监视，检查</p><p>psychiatric 精神病学的</p><p>mediation analyse 中介效应分析</p><p>mediation 调停，调解</p><p>facilitate 促进，促使</p><p>disorder 混乱，凌乱；失调</p><p>ditch 沟渠；抛弃</p><p>concurrently 并发地，同时发生地，并存地</p><p>supervise 监督</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 每日阅读分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 英语提升 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>被听写支配的恐惧来袭：巴黎街头听写大赛</title>
      <link href="/2023/06/12/bei-ting-xie-zhi-pei-de-kong-ju-lai-xi-ba-li-jie-tou-ting-xie-da-sai/"/>
      <url>/2023/06/12/bei-ting-xie-zhi-pei-de-kong-ju-lai-xi-ba-li-jie-tou-ting-xie-da-sai/</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文地址：<a href="https://mp.weixin.qq.com/s/VE10Dz0kViUqIttQTqUdDg">https://mp.weixin.qq.com/s/VE10Dz0kViUqIttQTqUdDg</a></p></blockquote><h1 id="A-massive-dictation-event-takes-over-the-iconic-Champs-Elysees-in-Paris"><a href="#A-massive-dictation-event-takes-over-the-iconic-Champs-Elysees-in-Paris" class="headerlink" title="A massive dictation event takes over the iconic Champs-Élysées in Paris"></a><strong>A massive dictation event takes over the iconic Champs-Élysées in Paris</strong></h1><hr><p>The iconic Champs-Élysées in Paris was taken over by writers on Sunday in perhaps the world’s largest-ever dictation event.</p><p>Instead of car traffic, the famed boulevard was covered by some 1,779 desks organized into rows for the more than 5,000 applicants chosen to participate in the exercise, the AFP reported.</p><p>The dictation was run by novelist Rachid Santaki, who began an initiative in 2013 called La Dictée Geante — or the Giant Dictation — to improve literacy across France.</p><p>“It’s about bringing people together, having fun around spelling and the French language,” Santaki told RFI in 2018. “I often talk about the pleasure of reading, of writing, and that means having fun, we take the drama out of it, turn the experience upside down.”</p><p>On Sunday, applicants ranging in age from 10 to 90 and equipped with a pen and paper attempted over three rounds to transcribe excerpts of text read aloud by three different people: Libraries Without Borders journalist Augustin Trapenard, writer Katherine Pancol and rugby player Pierre Rabadan.</p><p>“It was impossible! The dictation was for adults,” said primary school student Antoine, according to AFP. “I only made two mistakes!” retiree Touria Zerhouni, 65, told the outlet. “I expected it to be much harder.”</p><p>Guinness World Records, which sent a representative to the event, confirmed that it set the record for the most people taking dictation simultaneously.</p><p><strong>Spell it out: Paris’ Champs-Elysees hosts mass ‘dictation’</strong></p><p><strong>From: AFP</strong></p><p>Not to be outdone by US-style spelling bee extravaganzas, Paris’s most famous street the Champs-Elysees was transformed into an open-air mass “dictation” spellathon Sunday, pitting thousands of France’s brainiest bookworms against one another.</p><p>Revealing a very French love affair with words, over 50,000 applied to participate in the event, a world first, in which hopefuls attempt to faithfully and without error transcribe a text read to them.</p><p>Over 5,000 applicants aged 10-90 were chosen to participate in three sessions led by novelist Rachid Santaki.</p><p>With 1,779 desks laid out on Paris’ most famous boulevard in each session, organisers had sought to break the world record for a dictation spelling competition.</p><p>In the first round, an excerpt of La Mule du Pape by renowned French writer Alphonse Daudet was read by journalist Augustin Trapenard, of Libraries Without Borders.</p><p>Silence fell when the first session started, but for 10-year-old Samson, the dictation was “too fast”. He gave up.</p><p>In his final year of primary school, top student Antoine attended with his father and, despite being a star pupil, he had struggled to fill his page.</p><p>“It was impossible! The dictation was for adults,” he said.</p><p>His father Adrien Blind, 42, was equally relieved when the session wrapped, saying he “was in a state of stress and worry”.</p><p>But 65-year-old retiree Touria Zerhouni was more upbeat.</p><p>“I only made two mistakes! I expected it to be much harder,” she said.</p><p>The competition went beyond the French classics, with a sport themed round read by rugby player Pierre Rabadan, and another with a contemporary flavour read by writer and journalist Katherine Pancol.</p><p>Marc-Antoine Jamet, president of the Champs-Elysees Committee which hosted the dictation, said the event went beyond spelling.</p><p>“Dictation helps us to live together. It’s unifying,” he said.</p><hr><h2 id="生词记录"><a href="#生词记录" class="headerlink" title="生词记录"></a>生词记录</h2><blockquote><p>iconic 受欢迎的，偶像的，非常出名的</p><p>dictation 听写</p><p>famed 出名的</p><p>boulevard 大道，大街</p><p>literacy 识字，读写能力</p><p>equipped 有能力的，受过训练的；装备齐全的</p><p>transcribe 转录</p><p>rugby 橄榄球</p><p>simultaneously 同时地</p><p>not to be outdone 不服输，不甘示弱</p><p>spelling bee 拼字比赛</p><p>extravaganza 盛大展示，盛大表演</p><p>spellathon 描述长时间的拼写比赛</p><p>pit sb against sb 使竞争</p><p>bookworm 书迷</p><p>love affair 挚爱，热爱</p><p>renowned 闻名的，受尊敬的</p><p>wrap 用···包裹</p><p>upbeat 乐观的，快乐的</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 每日阅读分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 英语提升 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>今年没参加高考的，请进！</title>
      <link href="/2023/06/10/jin-nian-mei-can-jia-gao-kao-de-qing-jin/"/>
      <url>/2023/06/10/jin-nian-mei-can-jia-gao-kao-de-qing-jin/</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文地址：<a href="https://mp.weixin.qq.com/s/G89wiksfWITQDrOpROvtKw">https://mp.weixin.qq.com/s/G89wiksfWITQDrOpROvtKw</a></p></blockquote><h1 id="No-Man-Is-An-Island-The-Wisdom-Of-Deliberating-Crowds"><a href="#No-Man-Is-An-Island-The-Wisdom-Of-Deliberating-Crowds" class="headerlink" title="No Man Is An Island: The Wisdom Of Deliberating Crowds"></a><strong>No Man Is An Island: The Wisdom Of Deliberating Crowds</strong></h1><hr><p>On March 7, 1907 , the English statistician Francis Galton published a peculiar observation.</p><p>At a county fair held in Plymouth, 800 visitors had participated in a competition to guess the weight of an ox. While most people’s estimates were too high or too low — falling an average of 37 lbs. away from the true weight of 1,198 lbs. — the median of everyone’s guess was off by only 9 lbs., or less than 1 percent of the true weight of the ox.</p><p>This example illustrates what has come to be known as the “wisdom of crowds” effect. In some cases, the average of a large number of independent estimates can be quite accurate, even when the estimators have no special expertise.</p><p>“The average competitor,” Galton wrote of the ox competition, “was probably as well fitted for making a just estimate of the dressed weight of the ox, as an average voter is of judging the merits of most political issues on which he votes.”</p><p>The wisdom of crowds capitalizes on the fact that when people make errors, those errors aren’t always the same. Some people will tend to overestimate, and some to underestimate. When enough of these errors are averaged together, they cancel each other out, resulting in a more accurate estimate. That’s why the effect benefits from a large and diverse “crowd.” If people are similar in the sense that they tend to make the same errors, then their errors won’t cancel each other out. A crowd with many overestimators will yield a global average that still falls too high; a crowd with many underestimators will yield a global average that still falls too low.</p><p>In more technical terms, the wisdom of crowds requires that people’s estimates be independent. Studies have found that when people can observe the estimates of others, the accuracy of the crowd typically goes down. People’s errors become correlated or dependent, and are less likely to cancel each other out. We follow our peers, to the detriment of the performance of the group.</p><p>But a new paper offers an interesting twist on this classic phenomenon. When crowds are further subdivided into smaller “crowds” that are allowed to deliberate about the right answer, they not only succeed in overcoming the costs of introducing dependence, but even outperform the group as a whole.</p><p>The new paper, published last month in Nature Human Behavior and authored by Joaquin Navajas and colleagues, reports the results of a large-scale study of estimation. More than 4,000 people attending an event were asked to provide estimates for eight values, such as the height of the Eiffel Tower. They were then subdivided into groups of five estimators and encouraged to discuss half of the eight values to arrive at a consensus estimate for the group.</p><p>The key finding was that the averages from these “deliberating crowds” of five were more accurate than those from an equal number of independent individuals. For instance, the average obtained from the estimates of four deliberating groups of five was significantly more accurate than the average obtained from 20 independent individuals. In fact, averaging four deliberating groups resulted in a more accurate estimate than averaging 1,400 individual estimates.</p><p>These benefits were not observed for the estimated values that were not discussed by the group, so they somehow derived from the group-level process itself. But what, exactly, were the groups doing to achieve this impressive effect?</p><p>In a follow-up study with 100 university students, the researchers tried to get a better sense of what the deliberating crowds actually did. Did they tend to go with the answers of those who were most confident about their estimates? Did they gravitate towards the answers of those least willing to change their minds? This happened some of the time, but it wasn’t the dominant response. Most frequently, the groups reported that they “shared arguments and reasoned together.” Somehow, these arguments and reasoning resulted in a global reduction in error, rather than introducing correlated errors that undermined the wisdom of crowds.</p><p>The new paper by Navajas and colleagues reports only two studies, one large and one small, and it focuses exclusively on estimates concerning trivia or general knowledge. As a result, many questions remain. But the potential implications for group decision-making and deliberation are enormous. If a small number of deliberating groups can outperform a much larger number of individuals, this suggests that procedures like “deliberative polling” could be a promising strategy for public and private communities to pursue.</p><p>Galton introduced his 1907 paper by noting that “[i]n these democratic days, any investigation into the trustworthiness and peculiarities of popular judgments is of interest.”</p><hr><h2 id="生词记录"><a href="#生词记录" class="headerlink" title="生词记录"></a>生词记录</h2><blockquote><p>statistician 统计学家</p><p>peculiar 奇怪的，独特的</p><p>country fair 美国每年夏季的县集市</p><p>estimate 估计，估算，估价</p><p>median 中位数</p><p>expertise 专长，专门技能</p><p>dressed weight 可用于食用的肉的量</p><p>merit 优点，价值，功绩</p><p>capitalize on sth 利用···获益；从···中获利；充分利用；借助于</p><p>cancel sth out 抵消</p><p>diverse 多种多样的</p><p>yield 产生；放弃，让出（常指被迫）</p><p>detriment 危害</p><p>twist 转变，转折</p><p>subdivide 细分</p><p>deliberate 深思熟虑；有意的，故意的</p><p>consensus 一致的意见，共识</p><p>derive 从···中得到</p><p>follow-up 后续行动，后续事物；后续的，进一步的</p><p>gravitate 吸引到；受吸引而转到</p><p>dominant 首要的，占支配地位的，显著的；显性的；优势的</p><p>reason 推理，判断（作动词）</p><p>trivia 琐事</p><p>implication 暗示，含意；可能的影响</p><p>outperform 超过，胜过；比···做的好</p><p>peculiarity 古怪，奇异，怪癖；特点</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 每日阅读分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 英语提升 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>国企高管‘牵手门’持续发酵</title>
      <link href="/2023/06/09/guo-qi-gao-guan-qian-shou-men-chi-xu-fa-xiao/"/>
      <url>/2023/06/09/guo-qi-gao-guan-qian-shou-men-chi-xu-fa-xiao/</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文地址：<a href="https://mp.weixin.qq.com/s/DUDG07hfwFShhViw_1O-og">https://mp.weixin.qq.com/s/DUDG07hfwFShhViw_1O-og</a></p></blockquote><h1 id="Official-from-state-owned-company-dismissed-over-controversial-extramarital-relationship-with-colleague"><a href="#Official-from-state-owned-company-dismissed-over-controversial-extramarital-relationship-with-colleague" class="headerlink" title="Official from state-owned company dismissed over controversial extramarital relationship with colleague"></a><strong>Official from state-owned company dismissed over controversial extramarital relationship with colleague</strong></h1><hr><p>A subsidiary company under the state-owned giant China National Petroleum Corporation (CNPC) said they had dismissed executive director, manager and Party secretary of one of its subsidiary companies after viral pictures show the official was having an extramarital relationship with a female subordinate. </p><p>The company, named CNPC (Beijing) project management company, said they’re paying close attention to the issue and will continue to deal with the issue according to further investigation, the company announced on its WeChat account.  </p><p>The move came shortly after street photos and videos went viral on Wednesday on Chinese social media platforms showing the official, named Hu Jiyong from the Huanqiu project management company according to the announcement, walking hand in hand with a woman on the Chunxi road in Chengdu, Southwest China’s Sichuan Province. Both of them seemed to be well dressed up and wearing pink clothes. </p><p>The original video had been removed from social media platforms, the photographer told media on Wednesday on condition of anonymity, saying that Hu and the woman contacted him or her after the issue went viral. The photographer had also closed his or her social media account to the public, according to media reports. </p><p>According to media reports, the woman is also an employee of the Huanqiu company, but she is not Hu’s wife nor his daughter. </p><p>Hashtags related to the issue have been viewed more than 200 million times on China’s Twitter-like Sina Weibo platform with heated discussions. </p><p>Amid the controversy, the tenth central inspection team stationed at the CNPC on Wednesday had vowed to urge and supervise investigation into the issue when media required them to respond to the issue. </p><p>Party discipline authority of the Huaqniu company also told media amid heated discussion that they are investigating the issue.</p><p>“Good! Street snap now has a new function to help crack down on corruption,” a Weibo user said.  </p><p>“Hope related authorities can conduct thorough and transparent investigation into the issue,” said another. </p><p>According to open materials, the Huanqiu project management company was a wholly-owned subsidiary of the CNPC established in 1995. Amid the controversy, the company reportedly had canceled its WeChat account. </p><p>Located in the center of Chengdu, the Chunxi road is a famous commercial street known for its bustling shopping and entertainment scene, as well as its modern architecture and lively atmosphere. It became a hub of street snap for Chinese influencers, youngsters and trendsetters.</p><hr><h2 id="生词记录"><a href="#生词记录" class="headerlink" title="生词记录"></a>生词记录</h2><blockquote><p>subsidiary 子公司，附属公司</p><p>petroleum 石油</p><p>dismiss 对···不予理会，摒弃；解雇，免职，开除</p><p>viral 病毒式传播</p><p>extramarital 婚外情的</p><p>subordinate 下属</p><p>anonymity 匿名</p><p>hashtag 标签（社交媒体发文时用来描述主题的#）</p><p>station 安置，驻扎</p><p>vow 发誓</p><p>supervise 监督，指导，管理</p><p>discipline 纪律，训练；知识领域，学科，科目，专业；惩罚；自我控制</p><p>snap 折断；拍照，摄影；（尤指抢拍的）照片</p><p>crack down 制裁，处罚，打击</p><p>bustling 热闹的；忙忙碌碌，匆忙做</p><p>hub 中心，枢纽，核心</p><p>influencer 有影响力的人</p><p>youngster 年轻人，少年</p><p>trendsetter 开创新潮流者，引领时尚者</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 每日阅读分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 英语提升 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高考作文：我们是时间的主人还是仆人</title>
      <link href="/2023/06/08/gao-kao-zuo-wen-wo-men-shi-shi-jian-de-zhu-ren-huan-shi-pu-ren/"/>
      <url>/2023/06/08/gao-kao-zuo-wen-wo-men-shi-shi-jian-de-zhu-ren-huan-shi-pu-ren/</url>
      
        <content type="html"><![CDATA[<h1 id="How-Technology-Speeds-Up-Time-And-How-To-Slow-It-Down-Again"><a href="#How-Technology-Speeds-Up-Time-And-How-To-Slow-It-Down-Again" class="headerlink" title="How Technology Speeds Up Time (And How To Slow It Down Again)"></a><strong>How Technology Speeds Up Time (And How To Slow It Down Again)</strong></h1><hr><p>It often feels as though time speeds up as we age, with each season and year seemingly passing by more quickly than the last. And according to some psychologists, in addition to aging, the way we interact with technology could also have a profound effect on the way we experience time.</p><p>Sitting in front of computers all day, we’re constantly confronted by a clock telling us what time it is, and it’s no different whether we’re at home or on the go: 60 percent of Gen Years (ages 18-30) find themselves compulsively or subconsciously checking their smart phones for emails, texts, or social media updates, according to a 2012 Cisco report.</p><p>This ever-present technology is changing not only the way we perceive time, but also the way we think, according to Dr. Philip Zimbardo, professor emeritus of psychology at Stanford and author of The Time Paradox: The New Psychology Of Time That Will Change Your Life.</p><p>The way we perceive and experience time can have a profound psychological effect. Far from being objective, time is, in fact, a highly subjective experience, one that’s subject to technological and cultural influences. From an early age, our highly malleable time perceptions become biased. In The Time Paradox, Zimbardo argues that we all operate from one of three primary time biases. Those who tend to think of their current experiences in terms of what they’ve already experienced are past-oriented, those who focus on the immediate are present-oriented, and those who think in long-term projections are more future-oriented.</p><p>“Time has a powerful effect on our lives that we’re unaware of,” says Zimbardo. “I argue that it’s the most powerful influence on everything we do. It’s so powerful because we get programmed very early in life to be in one of these ‘time zones.’”</p><p>The ideal balance, Zimbardo explains, is to be moderately future-oriented (enough to be motivated to work towards our goals but not so much as to breed workaholism), moderately past-positive (when we look back on our lives, we have a generally positive outlook), and moderately “present hedonistic,” meaning that we take time out for friends, family and fun, but are not so pleasure-oriented as to have addictive tendencies.</p><p>But over-reliance on technology – constantly checking email and social networks, and being distracted by alerts on our mobile devices – can take us out of both the past and the future, and into a state of heightened “present hedonism” in which we’re constantly focused (in a sometimes compulsive way) on what’s either right in front of us or coming immediately afterwards.</p><p>“We’re simply being in that moment to take the next action,” says Zimbardo. “It’s really minimizing the quality of life. It’s minimizing the joy that we ought to be getting from everyday life.”</p><p>Here are things you should know about how technology affects your perception of time.</p><p>Being connected can speed up your sense of time.</p><p>Our constant access to virtually unlimited amounts of news and updates can create a need for immediacy that speeds up both our information intake and our perception of time.</p><p>“Our personal ‘time zone’ can be modified by technology, because it speeds up our internal clock,” says Zimbardo. “Technology makes us impatient for anything that takes more than seconds to achieve. You press a button and you expect instant access … so technology is pushing more and more of us into a very immediately-focused time zone. That means that we tend to ignore the future consequences of our behavior.”</p><p>Because we’re used to being constantly occupied, many of us have a hard time slowing down or waiting. A 2012 Pew survey found that among Millennials, hyper-connectivity can contribute to a need for instant gratification and a lack of patience.</p><p>It can trap us in the ‘next’ moment.</p><p>Technology can trap us in a cycle of instant gratification – we’re stuck in a present moment in which we are not fully present because we’re also anticipating the next moment, Zimbardo explains.</p><p>According to a 2011 Ipsos poll, 27 percent of teens use Facebook continuously throughout the day.</p><p>“They’re constantly checking, hoping that something will be there,” says Zimbardo. “Hope is a very future-oriented thing, but it’s a very short term thing. ‘I hope somebody will see the picture I posted, I hope somebody will respond.’”</p><hr><h2 id="生词记录"><a href="#生词记录" class="headerlink" title="生词记录"></a>生词记录</h2><blockquote><p>compulsively 强迫性地</p><p>subconsciously 下意识地</p><p>ever-present 始终存在的，永远在场的</p><p>preceive 感知，察觉，注意到，意识到；认为，看待，视为</p><p>emeritus 荣誉退休的</p><p>paradox 悖论</p><p>malleable 可塑的，易受外界影响的</p><p>biased 偏见的，片面的</p><p>-oriented 以···为导向的，以···为目标的</p><p>moderately 适度，适量，适中</p><p>breed 饲养；（动物）交配繁殖；导致</p><p>workahollism 工作狂</p><p>hedonistic 享乐主义的</p><p>minimize 使减到最少，使降到最低限度</p><p>immediacy 即时性</p><p>millennial 千禧年的</p><p>hyper- 超出，过度</p><p>gratification 满足，满意，快感</p><p>trap 被困住，陷入困境</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 每日阅读分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 英语提升 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>苹果公司发布10年来首款重磅新品</title>
      <link href="/2023/06/07/ping-guo-gong-si-fa-bu-10-nian-lai-shou-kuan-chong-bang-xin-pin/"/>
      <url>/2023/06/07/ping-guo-gong-si-fa-bu-10-nian-lai-shou-kuan-chong-bang-xin-pin/</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文地址：<a href="https://mp.weixin.qq.com/s/sEXX90OIso38aMD4NYffMg">https://mp.weixin.qq.com/s/sEXX90OIso38aMD4NYffMg</a></p></blockquote><h1 id="Apple-Releases-Vision-Pro-Headset-First-Major-New-Product-in-a-Decade"><a href="#Apple-Releases-Vision-Pro-Headset-First-Major-New-Product-in-a-Decade" class="headerlink" title="Apple Releases Vision Pro Headset, First Major New Product in a Decade"></a><strong>Apple Releases Vision Pro Headset, First Major New Product in a Decade</strong></h1><hr><p>Apple unveiled the Vision Pro headset, the company’s first major new product in a decade, a device capable of allowing users to experience virtual reality and digital apps, movies, personal photos or any content available on a computer monitor overlaid on the real world.</p><p>Chief Executive Tim Cook said in a video at the company’s Worldwide Developers Conference that the Vision Pro is “a revolutionary new product” capable of shifting “the way we look at technology and the role it plays in our lives.”</p><p>“This is a day that’s been years in the making,” he said. “Blending digital content with the real world can unlock experiences like nothing we’ve ever seen.”</p><p>Apple said the device, which will sell for $3,499 and won’t be available until early next year, would be a new way to interact with digital content in the physical space using the user’s hands, eyes and voice to interact with apps. Users can control the device with their hands and experience movies, TV shows and games in a more immersive way. Cook called it a new “spatial computing” platform.</p><p>Apple shares fell less than 1% after having surged earlier in the day.</p><p>The Vision Pro can project a massive movie screen into any environment for a user, as well as capture or play three-dimensional video, making it possible for a user to watch a movie on a giant screen or interact with life-size personal photos or videos projected into their living environment.</p><p>Apple’s headset launches into an uncertain market for virtual and augmented reality devices. Headset sales grew at a fast clip during the pandemic, doubling to nearly 11 million units shipped in 2021. But they dropped 21% to 8.6 million units in 2022, according to researcher International Data Corp.</p><p>Meta Platforms, which has mostly dominated the market to date with its Quest virtual-reality headsets, has struggled to keep existing users engaged, with more than half of the $400 entry-level Quest headsets not in use six months after they were purchased, The Wall Street Journal reported previously. Last week, Meta said the Meta Quest 3 headset, which the company is promoting as similar to Apple’s Vision Pro, will be available in the fall of this year for $499.</p><p>Apple announced a partnership with Walt Disney, which showed in a pretaped video what viewing experiences could potentially look like, including an immersive Star Wars TV show and a function allowing users to watch multiple sporting events simultaneously. A digital version of the Disneyland theme park could project into the user’s physical world.</p><p>“We’re constantly in search of new ways to entertain, inform and inspire our fans,” Disney Chief Executive Robert Iger said in a pretaped video. “We believe Apple Vision Pro is a revolutionary platform.” He said Disney’s streaming service would be available on the device as soon as it reaches users, which Apple said initially would only be in the U.S.</p><p>Apple showed the headset being used in work environments, including an ability to project a screen akin to a modern desktop in a way that could replace a computer monitor. Users can also use Bluetooth devices such as keyboards to type.</p><p>Some features on the device are meant to avoid isolating a user, Apple executives said. Vision Pro displays the user’s eyes on the outside of the device with a screen sitting on the front of the device. And if somebody comes nearby to someone with the headset on, it will show the person.</p><p>The headset will have the M2 chip found in the company’s Macs and will also have a new chip called “R1” for processing data from the many cameras, sensors and microphones in the device. This enables the Vision Pro to limit latency, a common issue in virtual-reality headsets that causes motion sickness. Apple said it would have a high-resolution display system so video would render in 4K and text would look sharp.</p><p>Apple has been working on the headset for seven years and has delayed the launch several times, the Journal previously reported. The headset is far more expensive than headsets sold by rivals, such as Meta Platforms’ most expensive Quest Pro headset at $1,000.</p><p>Although Apple showcased many potential features and uses of the Vision Pro headset, the company’s announcement at its software conference points to its interest in how third-party software makers can add new functions.</p><p>Hundreds of thousands of apps that already exist on iPad and iPhone operating systems will also be available through Vision OS, the Vision Pro’s operating system. Apple told developers that it is introducing tools to let them redesign existing apps on other Apple platforms for the Vision Pro, or create new types of three-dimensional apps.</p><hr><h2 id="生词记录"><a href="#生词记录" class="headerlink" title="生词记录"></a>生词记录</h2><blockquote><p>unveil 为···揭幕，拉开···的帷幔；首次展示，介绍，推出</p><p>headset 头戴式耳机</p><p>overlay 在··上铺；覆盖，包，铺</p><p>blend 混合，混杂，交融</p><p>immersive 沉浸式的，身临其境的，沉浸感的</p><p>spatial 空间的</p><p>augment 提高，增强</p><p>ship 运输，运送；上市，把···推向市场</p><p>dominate 占支配地位的，拥有优势，最明显的</p><p>pretape 预录，提前录好</p><p>simultaneously 同时地</p><p>akin to sth 与某物相似的</p><p>latency 延迟；潜伏</p><p>resolution 决议，决心，决定；清晰度，分辨率</p><p>render 使成为，使变得；给予，提供；粉刷</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 每日阅读分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 英语提升 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题学习-字符串篇</title>
      <link href="/2023/06/07/leetcode-shua-ti-xue-xi-zi-fu-chuan-pian/"/>
      <url>/2023/06/07/leetcode-shua-ti-xue-xi-zi-fu-chuan-pian/</url>
      
        <content type="html"><![CDATA[<h2 id="反转字符串"><a href="#反转字符串" class="headerlink" title="反转字符串"></a><a href="https://leetcode.cn/problems/reverse-string/">反转字符串</a></h2><p>常规的双指针方法即可解决，比较简单</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">reverseString</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> front <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> behind <span class="token operator">=</span> s<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>front <span class="token operator">&lt;</span> behind<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">char</span> temp <span class="token operator">=</span> s<span class="token punctuation">[</span>front<span class="token punctuation">]</span><span class="token punctuation">;</span>            s<span class="token punctuation">[</span>front<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>behind<span class="token punctuation">]</span><span class="token punctuation">;</span>            s<span class="token punctuation">[</span>behind<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>            front<span class="token operator">++</span><span class="token punctuation">;</span>            behind<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="反转字符串-II"><a href="#反转字符串-II" class="headerlink" title="反转字符串 II"></a><a href="https://leetcode.cn/problems/reverse-string-ii/">反转字符串 II</a></h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">reverseStr</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> c <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> sLen <span class="token operator">=</span> c<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token comment">// 关键在于每次以2k为区间进行递进</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> sLen<span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">2</span> <span class="token operator">*</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> left <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token comment">// 确定2k区间内的右边界，与数组长度比较取最小值即可（即判断尾数够不够k个来取决right指针的位置）</span>            <span class="token keyword">int</span> right <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>sLen <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> i <span class="token operator">+</span> k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">char</span> temp <span class="token operator">=</span> c<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>                c<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>                c<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>                left<span class="token operator">++</span><span class="token punctuation">;</span>                right<span class="token operator">--</span><span class="token punctuation">;</span>                                <span class="token comment">// 方法二：利用异或实现反转(异或运算：一个数异或另一个数两次得到的是其原来的值)</span>                c<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">^=</span> c<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>                c<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">^=</span> c<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// c[right] = c[left] ^ c[right] ^ c[right] = c[left]</span>                c<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">^=</span> c<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// c[left] = c[left] ^ c[left] ^ c[]</span>                left<span class="token operator">++</span><span class="token punctuation">;</span>                right<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="替换空格"><a href="#替换空格" class="headerlink" title="替换空格"></a><a href="https://leetcode.cn/problems/ti-huan-kong-ge-lcof/">替换空格</a></h2><p>Java可以利用StringBuilder：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">replaceSpace</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token char">' '</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"%20"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span><span class="token punctuation">&#123;</span>                sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>C语言可以利用双指针方法：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">replaceSpace</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 计算空格的数量</span>    <span class="token keyword">int</span> trimCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">' '</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            trimCount<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 新数组长度</span>    <span class="token keyword">int</span> newLen <span class="token operator">=</span> len <span class="token operator">+</span> trimCount <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token comment">// 数组扩容，+1的原因是在C语言中，把一个字符串存入一个数组时，也把结束符 '\0'存入数组，并以此作为该字符串是否结束的标志。</span>    <span class="token keyword">char</span> <span class="token operator">*</span>newStr <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token operator">*</span> newLen <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 双指针。指针i指向原长度最后一个位置，指针j指向扩容后数组的最后一个位置</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> j <span class="token operator">=</span> newLen <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">,</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 不是空格直接将原数组元素移动</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token char">' '</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            newStr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 空格即将内容替换（因为是从后往前，故替换内容逆着来）</span>            newStr<span class="token punctuation">[</span>j<span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'0'</span><span class="token punctuation">;</span>            newStr<span class="token punctuation">[</span>j<span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'2'</span><span class="token punctuation">;</span>            newStr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'%'</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 最后一个位置放置结束符</span>    newStr<span class="token punctuation">[</span>newLen<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'\0'</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> newStr<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="反转字符串中的单词"><a href="#反转字符串中的单词" class="headerlink" title="反转字符串中的单词"></a><a href="https://leetcode.cn/problems/reverse-words-in-a-string/">反转字符串中的单词</a></h2><p>Java版本：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReverseWordsInStr</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token string">"a good   example"</span><span class="token punctuation">;</span>        <span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token function">removeSpace</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">reverseString</span><span class="token punctuation">(</span>sb<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> sb<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">reverseEachWords</span><span class="token punctuation">(</span>sb<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">StringBuilder</span> <span class="token function">removeSpace</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> start <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> end <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment">// 去除头尾的空格</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token char">' '</span><span class="token punctuation">)</span> start<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>end<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token char">' '</span><span class="token punctuation">)</span> end<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token comment">// 去除中间多余的空格</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>start <span class="token operator">&lt;=</span> end<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">char</span> c <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">!=</span> <span class="token char">' '</span> <span class="token operator">||</span> sb<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>sb<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token char">' '</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            start<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> sb<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">reverseString</span><span class="token punctuation">(</span><span class="token class-name">StringBuilder</span> sb<span class="token punctuation">,</span> <span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>start <span class="token operator">&lt;</span> end<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">char</span> temp <span class="token operator">=</span> sb<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token punctuation">;</span>            sb<span class="token punctuation">.</span><span class="token function">setCharAt</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> sb<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>end<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            sb<span class="token punctuation">.</span><span class="token function">setCharAt</span><span class="token punctuation">(</span>end<span class="token punctuation">,</span> temp<span class="token punctuation">)</span><span class="token punctuation">;</span>            start<span class="token operator">++</span><span class="token punctuation">;</span>            end<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">reverseEachWords</span><span class="token punctuation">(</span><span class="token class-name">StringBuilder</span> sb<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> start <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> end <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> sbLen <span class="token operator">=</span> sb<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>start <span class="token operator">&lt;</span> sbLen<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 不为空格表明还不是一个完整的单词</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>end <span class="token operator">&lt;</span> sbLen <span class="token operator">&amp;&amp;</span> sb<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>end<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token char">' '</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                end<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">// 完整的单词，开始单词反转</span>            <span class="token function">reverseString</span><span class="token punctuation">(</span>sb<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 寻找下一个单词</span>            start <span class="token operator">=</span> end <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            end <span class="token operator">=</span> start <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>C版本：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// 待写</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="左旋转字符串"><a href="#左旋转字符串" class="headerlink" title="左旋转字符串"></a><a href="https://leetcode.cn/problems/zuo-xuan-zhuan-zi-fu-chuan-lcof/">左旋转字符串</a></h2><p>Java版本（利用了额外的空间）：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">reverseLeftWords</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> sChar <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> temp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> sChar<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> j<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> n<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            sChar<span class="token punctuation">[</span>j <span class="token operator">-</span> n<span class="token punctuation">]</span> <span class="token operator">=</span> sChar<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> temp<span class="token punctuation">.</span>length<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            sChar<span class="token punctuation">[</span>j <span class="token operator">-</span> n<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>            j<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>sChar<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>不利用额外空间，原地操作，具体操作步骤：</p><ul><li>反转区间为前n的子串</li><li>反转区间为n到末尾的子串</li><li>反转整个字符串</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">reverseLeftWords</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>chars<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 反转前n位子串</span>    <span class="token function">reverseString</span><span class="token punctuation">(</span>sb<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 反转从n到末尾的子串</span>    <span class="token function">reverseString</span><span class="token punctuation">(</span>sb<span class="token punctuation">,</span> n<span class="token punctuation">,</span> chars<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 整个字符串反转</span>    <span class="token function">reverseString</span><span class="token punctuation">(</span>sb<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> chars<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">reverseString</span><span class="token punctuation">(</span><span class="token class-name">StringBuilder</span> sb<span class="token punctuation">,</span> <span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>start <span class="token operator">&lt;</span> end<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">char</span> temp <span class="token operator">=</span> sb<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token punctuation">;</span>        sb<span class="token punctuation">.</span><span class="token function">setCharAt</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> sb<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>end<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sb<span class="token punctuation">.</span><span class="token function">setCharAt</span><span class="token punctuation">(</span>end<span class="token punctuation">,</span> temp<span class="token punctuation">)</span><span class="token punctuation">;</span>        start<span class="token operator">++</span><span class="token punctuation">;</span>        end<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="找出字符串中第一个匹配项的下标"><a href="#找出字符串中第一个匹配项的下标" class="headerlink" title="找出字符串中第一个匹配项的下标"></a><a href="https://leetcode.cn/problems/find-the-index-of-the-first-occurrence-in-a-string/">找出字符串中第一个匹配项的下标</a></h2><p>典型的KMP算法</p><p>KMP算法学习与回顾：</p><blockquote><p><a href="https://blog.csdn.net/v_july_v/article/details/7041827">https://blog.csdn.net/v_july_v/article/details/7041827</a></p></blockquote><p>几个概念：</p><ul><li><p>前缀：包含首位字符但不包含末位字符的子串</p></li><li><p>后缀：包含末位字符但不包含首位字符的子串</p></li><li><p>next数组定义：当主串与模式串的某一位字符不匹配时，模式串要回退的位置</p></li><li><p><strong>next 数组存放的是当前长度下的 最长相同前后缀 的长度</strong>（不同的定义代码实现方法略有不同的，但基本原理是一致的）</p></li></ul><p>kmp求next数组代码：</p><p><img src="https://s3.bmp.ovh/imgs/2023/06/14/b8f4d94aca9751ee.png" alt="示例"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">getNext</span><span class="token punctuation">(</span><span class="token class-name">String</span> needle<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> next<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 上图的j</span>    <span class="token keyword">int</span> right <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// 上图的i</span>    <span class="token comment">// 只与模式串有关</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>right <span class="token operator">&lt;</span> needle<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 模式串前后字符对比</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> needle<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span> <span class="token operator">!=</span> needle<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            left <span class="token operator">=</span> next<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 有相同的前后缀，更新</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>needle<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span> <span class="token operator">==</span> needle<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            left<span class="token operator">++</span><span class="token punctuation">;</span>            next<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">=</span> left<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        right<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最终完整代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">strStr</span><span class="token punctuation">(</span><span class="token class-name">String</span> haystack<span class="token punctuation">,</span> <span class="token class-name">String</span> needle<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token class-name">String</span> newHaystack <span class="token operator">=</span> <span class="token string">" "</span> <span class="token operator">+</span> haystack<span class="token punctuation">;</span>        <span class="token class-name">String</span> newNeedle <span class="token operator">=</span> <span class="token string">" "</span> <span class="token operator">+</span> needle<span class="token punctuation">;</span>        <span class="token keyword">int</span> len1 <span class="token operator">=</span> newHaystack<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len2 <span class="token operator">=</span> newNeedle<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 分配next数组空间(给多一个空间，令下标从1开始)</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>len2<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">// 更新next数组内容</span>        <span class="token function">getNext</span><span class="token punctuation">(</span>newNeedle<span class="token punctuation">,</span> next<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 遍历模式串指针</span>        <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment">// 遍历主串指针</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> len1<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 主串与模式串比较，不匹配的模式串指针回退</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> newHaystack<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">!=</span> newNeedle<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                j <span class="token operator">=</span> next<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">// 匹配就往后移</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>newHaystack<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> newNeedle<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                j<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">// 若模式串遍历完毕，则证明寻找结束</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>j <span class="token operator">==</span> len2 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 最终返回第一个匹配的字符下标</span>                <span class="token keyword">return</span> i <span class="token operator">-</span> len2 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 没有符合的返回-1</span>        <span class="token keyword">return</span>  <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">getNext</span><span class="token punctuation">(</span><span class="token class-name">String</span> needle<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> next<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> right <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>right <span class="token operator">&lt;</span> needle<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> needle<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span> <span class="token operator">!=</span> needle<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                left <span class="token operator">=</span> next<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>needle<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span> <span class="token operator">==</span> needle<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                left<span class="token operator">++</span><span class="token punctuation">;</span>                next<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">=</span> left<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            right<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="重复的子字符串"><a href="#重复的子字符串" class="headerlink" title="重复的子字符串"></a><a href="https://leetcode.cn/problems/repeated-substring-pattern/">重复的子字符串</a></h2><ol><li><p>移动匹配法</p><p>原字符串S，两个S拼接在一起组成SS，去掉首尾字符后仍包含原S，则表明是由重复的字符串组成的</p></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">repeatedSubstringPattern</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> ss <span class="token operator">=</span> s <span class="token operator">+</span> s<span class="token punctuation">;</span>    <span class="token comment">// substring(beginIndex, endIndex)是左闭右开的</span>    <span class="token class-name">String</span> subString <span class="token operator">=</span> ss<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> ss<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>subString<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>KMP法(难以理解…)</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">repeatedSubstringPattern</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 添加多一个空格(哨兵)，令下标从1开始</span>        <span class="token class-name">String</span> ss <span class="token operator">=</span> <span class="token string">" "</span> <span class="token operator">+</span> s<span class="token punctuation">;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> ss<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>len<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">getNext</span><span class="token punctuation">(</span>ss<span class="token punctuation">,</span> next<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// next[len - 1] 代表next数组中最后的值，判断是否是重复的字符串 ？？？</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>next<span class="token punctuation">[</span>len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> next<span class="token punctuation">[</span>len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">getNext</span><span class="token punctuation">(</span><span class="token class-name">String</span> neddle<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> next<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> right <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>right <span class="token operator">&lt;</span> neddle<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> neddle<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">!=</span> neddle<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                left <span class="token operator">=</span> next<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>neddle<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> neddle<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                left<span class="token operator">++</span><span class="token punctuation">;</span>                next<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token operator">=</span> left<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            right<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 关于学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>男子连吃百天麦当劳减重53斤</title>
      <link href="/2023/06/06/nan-zi-lian-chi-bai-tian-mai-dang-lao-jian-chong-53-jin/"/>
      <url>/2023/06/06/nan-zi-lian-chi-bai-tian-mai-dang-lao-jian-chong-53-jin/</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文地址：<a href="https://mp.weixin.qq.com/s/F_9OKCB8SAoEAPvL_foVww">https://mp.weixin.qq.com/s/F_9OKCB8SAoEAPvL_foVww</a></p></blockquote><h1 id="Man-Who-Ate-Only-McDonald’s-for-100-Days-Completes-Challenge-—-and-Drops-58½-Lbs-‘I-Feel-Amazing’"><a href="#Man-Who-Ate-Only-McDonald’s-for-100-Days-Completes-Challenge-—-and-Drops-58½-Lbs-‘I-Feel-Amazing’" class="headerlink" title="Man Who Ate Only McDonald’s for 100 Days Completes Challenge — and Drops 58½ Lbs.: ‘I Feel Amazing’"></a><strong>Man Who Ate Only McDonald’s for 100 Days Completes Challenge — and Drops 58½ Lbs.: ‘I Feel Amazing’</strong></h1><hr><p>Kevin Maginnis has finished his unique weight loss challenge — and he’s lovin’ the results!</p><p>The 56-year-old Nashville native, known as @bigmaccoaching on TikTok, made headlines back in February when he announced that he’d being going on an all-McDonald’s diet for 100 days, eating nothing but half portions of the fast food chain menu items for every meal.</p><p>Change came fast, with Kevin — who started at 238 lbs. — dropping nearly 30 lbs. in a little over 30 days. His wife of 32 years, Melody Maginnis, even decided to join him for the last 60 days of the challenge.</p><p>Those 100 days came to a close on Thursday. And the final tally? 58½ lbs. total loss — down to 179½.</p><p>“I feel amazing,” Kevin said, while appearing on the Today show to discuss his journey. “</p><p>Today anchors Savannah Guthrie, Hoda Kotb, Craig Melvin, and Carson Daly were wowed by the results, asking him everything from “what did you eat?” to “is this sustainable?”</p><p>The entire McDonald’s menu was on the table for Kevin. “Pick a number, I’ve eaten everything from Big Macs to quarter pounders — with fries,” he said on Today, joking, “Don’t get bitter while I’m eating my apple fritter and losing weight!”</p><p>He did replace the soda on the menu with water, didn’t drink any alcohol and didn’t eat any fruit and vegetables aside from the lettuce and tomato on burgers, the apples in the apple fritter and the blueberries in the blueberry muffin.</p><p>Snacking between meals was also prohibited, Kevin — living by the saying “seek the heat before you eat, meaning don’t eat any snacks between, so you can actually feel when your body’s actually hungry” — detailed.</p><p>Though he didn’t exercise at all and never counted calories, Kevin saw significant changes to his health. After doing bloodwork, Kevin said his triglycerides were down 205 points and his cholesterol 65 points. His A1C levels also dropped. “Can eating a quarter pounder with cheese improve my A1C? Looks like it can because I was pre-diabetic before, down to healthy ranges now.”</p><p>Kevin will eat his final McDonald’s meal of the challenge this evening. Tomorrow, he said, he’s going to have filet mignon.</p><p>But he isn’t done eating McDonald’s, telling Today that food wasn’t the problem. “You could do this with any food. Stop vilifying the food,” Kevin said. “It’s not that ‘good food, bad food’ for weight loss. Are there better macronutrients and micronutrients for brain health or whatever? Absolutely. But when it comes to getting rid of obesity, reduce the size of the meals. Three meals, cut in half — it’s not the only way, it’s a way. Portion control, have a plan, and have some accountability.”</p><p>He’s confident he’ll be able to sustain his diet, noting he’s going to do “half a plate to lose the weight, three-quarters of a plate to maintain the weight.” He won’t be snacking between meals, either. “Because you seek the heat before you eat, your body’s actually pulling from the fat reserves in between, so you’re not eating, snacking, so you have this energy from burning actual food on your body.”</p><p>As for Kevin’s wife, Melody is down 17 lbs. herself, he said.</p><p>The two were not affiliated with McDonald’s at all, Kevin stressed on Today. He only picked McDonald’s because ‘I was a big guy, my last name’s Maginnis, so ‘Big Mac’ has been a nickname. I thought, ‘If a fat man can embrace fats, I can embrace Big Mac.’ “</p><p>Kevin isn’t done challenging himself. “Round 1 was to eliminate the obesity. Round 2 is increase the beast in me,” he shared. “I’m going to be doing an ice plunge, I’m going to do a 100 ft. rope climb in 100 days. I never made it 10 ft. in gym class, so it’s my personal Everest. I’m going to climb a 100 ft. rope in 100 days.”</p><hr><h2 id="生词记录"><a href="#生词记录" class="headerlink" title="生词记录"></a>生词记录</h2><blockquote><p>lbs 磅（重量单位）</p><p>tally 记录，积分表，帐</p><p>anchor 把···系住（或扎牢），使稳固；使扎根，使基于；主持人</p><p>wow 使印象深刻，使叫绝</p><p>quater pounder 足三两</p><p>bitter 充满仇恨的，愤怒的，激烈的；苦的；严寒的，刺骨的</p><p>fritter 油炸馅饼</p><p>lettuce 生菜，莴苣</p><p>muffin 小松饼</p><p>diabetic 糖尿病患者</p><p>filet mignon 菲力牛排</p><p>vilify 诋毁，污蔑，丑化，贬低</p><p>macronutrient 大量营养素</p><p>accountability 责任感，有责任，有义务</p><p>plate 盘子，碟子，镀上</p><p>affiliate 隶属的，附属的</p><p>eliminate 消除，根除；淘汰</p><p>beast 野兽，动物</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 每日阅读分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 英语提升 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>黄牛该好好管管了</title>
      <link href="/2023/06/05/huang-niu-gai-hao-hao-guan-guan-liao/"/>
      <url>/2023/06/05/huang-niu-gai-hao-hao-guan-guan-liao/</url>
      
        <content type="html"><![CDATA[<h1 id="A-brief-history-of-scalping-concert-tickets"><a href="#A-brief-history-of-scalping-concert-tickets" class="headerlink" title="A brief history of scalping concert tickets"></a><strong>A brief history of scalping concert tickets</strong></h1><hr><p>There are few things more frustrating to a music fan than being shut out of a sold-out concert only to see tickets for sale at inflated prices on the secondary market. And how do those guys selling tickets on the street outside the venue get their inventory?</p><p>Scalpers (“ticket touters” to the British and “leveraged arbitragers” to ardent capitalists) are as old as live events themselves. When the Greeks opened the first-ever outdoor amphitheatre in 325 BCE — it was built into the hillside of the Acropolis and sat up to 17,000 people in its 55 semi-circular rows — there was no doubt some dude in a robe outside the gates yelling “Who’s got seats?” The same would have happened at the first Roman theatre in Pompeii in 80 BCE. And I’d lay money on the same thing happening outside of Shakespeare’s Globe Theatre for the premiere of A Midsummer Night’s Dream in 1604.</p><p>Scalping (a term that first appeared in the 19th century referring to brokers of railway tickets) has always been a problem. How could a regular person get into shows when there were crowds of “ticket speculators” and “sidewalk men” who employed people to stand in line for them and had secret access to insiders at the box office who gladly handed over tickets for a cut of the proceeds?</p><p>When Jenny Lind, a singer known as “The Swedish Nightingale,” toured the United States in 1851, the very best seats in the house mysteriously disappeared immediately only to reappear in the hands of speculators who sold them with significant markups. A ticket with a face value of $3 might go for $6. There was a rumour that Lind’s agents were in on the scam, something that damaged her in the eyes of the public.</p><p>When Charles Dickens went on a book tour of America in 1867, his public readings sold out in minutes. George Dolby, Dickens’ manager, lamented about a show in Boston. “[B]y eight o’clock in the morning, the queue [outside the box office] was nearly half a mile long and about the time that the employers of the persons who had been standing in the streets all night began to arrive to take their places. … The horrid speculators who buy all the good tickets and sell them again at exorbitant prices.” In New York, fans waiting in line were offered as much as twenty dollars for their place in line by scalpers looking to acquire tickets.</p><p>Time and time again, theatres, performers, managers, agents, promoters, and governments have tried to clamp down on scalping. In 1927, New York City looked into the situation with Broadway theatres and local music halls. Nothing happened. The same with an investigation in 1949. And again in 1963. Nothing, it seemed, could be done about a black market in theatre tickets that totalled millions of dollars each year. It wasn’t uncommon for a box office manager to earn beyond $25,000 a year and buy a new Cadillac every year. Guess where that supplementary income came from?</p><p>The problem only became bigger when rock concerts became big business. In the days before computers, box offices had racks of printed tickets, the best of which vanished before sales even began.</p><p>Maintaining an accurate ticket count (and thus a proper accounting of revenue) was impossible using the system of hard tickets sold through a box office. Surely there had to be a solution. This is where the first computerized ticket-selling programs came into existence. The first, Computicket and TRS (Ticket Reservation Services), arrived in the middle 1960s, prompting their systems as a way to cut down on scalping by keeping track of every single ticket sold.</p><p>Great in theory, but despite decades of advancements with computerized ticket selling, paperless tickets, and fan-driven ticket exchanges, scalpers and secondary-market companies still manage to get their hands on tickets.</p><p>The problem is not going away. In fact, things are just getting weirder and more contentious. “Diggers” and “ice” also still exist in the digital realm. Instead of bribing box office managers and hiring people to stand in line, they use bots, fake identities, access comp tickets, and infiltrate sales meant for fan clubs. They’re pretty resourceful and tech-savvy people.</p><p>This past Friday, Jan. 20, Madonna started selling tickets for her worldwide 40th-anniversary Celebration Tour, Ticketmaster’s first major on-sale challenge since the Taylor Swift fiasco late last year. Although tickets were advertised for as little as $40, you have to wonder how many of those made it into the hands of fans at that price and how many are now controlled by the secondary market (StubHub, SeatGeek, Vivid Tickets, etc.) as well as individual scalpers.</p><p>Also this week, a new campaign called Make Tickets Fair launched in the U.K. and EU. The goal is to educate the public about the perils and protocols of ticket reselling. It may help a little bit, but I can’t help feeling that organizers are wasting their breath.</p><p>It all comes down to this: When you have a perishable high-demand commodity like a concert ticket, someone is always going to find a way to make money from someone else’s desires. It’s a game of Whack-A-Mole as old as live entertainment itself.</p><hr><h2 id="生词记录"><a href="#生词记录" class="headerlink" title="生词记录"></a>生词记录</h2><blockquote><p>scalp 头皮；手下败将，击败的人；倒卖</p><p>inflated 过高的，过多的</p><p>inventory 存货；物品清单；盘点，清点存货</p><p>scalper 倒卖的人</p><p>tout 标榜，吹嘘，吹捧；，高价出售，（以高价格）倒卖</p><p>leveraged 举债经营的；依赖借款的，举债的，高杠杆的</p><p>arbitrageur 套购商，证券套利者</p><p>ardent 热烈的，热情的，强烈的</p><p><em>amphitheatre</em> 圆形剧场</p><p>robe 长袍</p><p>lay 打赌，下注</p><p>premiere 首映，首演；首相，总理</p><p>broker 经纪人</p><p>speculator 投机者，投机商</p><p>sidewalk men 票贩子</p><p>cut 伤口，切口；份额</p><p>proceeds 收入，收益</p><p>nightingale 夜莺</p><p>markup 加价幅度</p><p>lament 对···感到悲痛</p><p>horrid 不友好的，令人不愉快的</p><p>exorbitant 费用过高的</p><p>clamp down on 取缔，严厉打击</p><p>supplementary 额外</p><p>big business 利润高的行业</p><p>accounting 会计，会计学，核算</p><p>contentious 有争议的</p><p>ice 回扣，分成</p><p>realm 领域，场所；王国</p><p>comp 馈赠，赠送</p><p>infiltrate 潜入，渗透</p><p>resourceful 足智多谋的</p><p>savvy 常识，实际能力；有见识的</p><p>fiasco 惨败，可耻的失败，尴尬的结局</p><p>peril 巨大的危险，险情</p><p>waste your breath 白费唇舌</p><p>perishable 易腐烂的，易变质的</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 每日阅读分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 英语提升 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>拜登又摔了</title>
      <link href="/2023/06/03/bai-deng-you-shuai-liao/"/>
      <url>/2023/06/03/bai-deng-you-shuai-liao/</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文地址：<a href="https://mp.weixin.qq.com/s/9UzP02EjdBi70xyLTiEhAg">https://mp.weixin.qq.com/s/9UzP02EjdBi70xyLTiEhAg</a></p></blockquote><h1 id="US-President-Joe-Biden-trips-and-falls-at-Colorado-event"><a href="#US-President-Joe-Biden-trips-and-falls-at-Colorado-event" class="headerlink" title="US President Joe Biden trips and falls at Colorado event"></a><strong>US President Joe Biden trips and falls at Colorado event</strong></h1><hr><p>US President Joe Biden has tripped and fallen while handing out diplomas at a graduation ceremony for the US Air Force Academy in Colorado.</p><p>Mr Biden, who is the nation’s oldest serving president at 80, was helped back up to his feet and appeared to be unhurt.</p><p>The president had been standing for about an hour and a half to shake hands with each of the 921 graduating cadets.</p><p>The White House communications director said earlier “he’s fine”.</p><p>“There was a sandbag on stage while he was shaking hands,” Ben LaBolt wrote on Twitter after Thursday’s fall.</p><p>“I got sandbagged,” the smiling president joked to reporters as he arrived back at the White House that evening.</p><p>A White House press pool report earlier said Mr Biden had tripped on a black sandbag while moving on stage.</p><p>Footage of the incident shows Mr Biden appearing to point at one of two sandbags used to prop up his teleprompter as he was helped up by an Air Force official and two members of his Secret Service detail.</p><p>He was seen walking back to his seat unassisted and later jogging back to his motorcade when the ceremony ended shortly after the accident.</p><p>The pool reporter added that the president did not take questions when he returned to his plane.</p><p>White House press secretary Karine Jean-Pierre said Mr Biden was feeling “totally fine” and had boarded the plane flashing “a big smile”.</p><p>Critics have said Mr Biden is too old to run for a second term as president.</p><p>Recent polls suggest a majority of US voters are concerned about his advanced age. He would be 82 at the start of a second term if he wins.</p><p>This fall, in addition to previous stumbles from his bicycle and on the way up the Air Force One stairs, could add to those concerns.</p><p>Former President Donald Trump, the Republican frontrunner to face Mr Biden in the 2024 White House election, reacted to the incident from a campaign event in Iowa, saying “the whole thing is crazy”.</p><p>“I hope he wasn’t hurt,” said Mr Trump, 76, who has often poked fun at Mr Biden’s age. “That’s not inspiring.”</p><p>“You got to be careful about that because you don’t - you don’t want that. Even if you have to tiptoe down the ramp,” added Mr Trump, apparently referring to his own careful walk off a stage that made headlines in 2020.</p><p>He said at the time that the ramp at the US Military Academy in West Point, New York, was slippery, and brushed aside the ensuing media questions about his own health as fake news.</p><p>Florida Governor Ron DeSantis, another 2024 contender for the Republican nomination, also reacted to the fall during a campaign event in New Hampshire: “We hope and wish Joe Biden a swift recovery from any injuries he may have sustained.</p><p>“But we also wish the United States of America a swift recovery from the injuries it has sustained because of Joe Biden and his policies.”</p><p>Mr Biden’s last physical examination took place in February.</p><p>White House physician Dr Kevin O’Connor wrote at the time: “The President remains fit for duty, and fully executes all of his responsibilities without any exemptions or accommodations.”</p><p>Dr O’Connor added that Mr Biden walks with a “stiffened gait”, largely caused by wear and tear on his spine and nerve damage in his feet, but that his condition was unchanged from a previous physical in November 2021.</p><p>Mr Biden is hardly the first commander-in-chief to lose his footing in front of the cameras.</p><p>President Barack Obama tripped walking up stairs at a 2012 event, while President Gerald Ford fell down the stairs of Air Force One in 1975.</p><hr><h2 id="生词记录"><a href="#生词记录" class="headerlink" title="生词记录"></a>生词记录</h2><blockquote><p><em>trip</em> 绊倒</p><p><em>diploma</em> 学位证书，大学文凭</p><p><em>serving</em> 一份；现任的，现役的</p><p><em>cadet</em> 军校学员，警校学员</p><p><em>sandbag</em> 沙袋</p><p><em>press pool</em> 记者团</p><p><em>footage</em> 镜头片段</p><p><em>prop sth up</em> 支撑，撑住</p><p><em>teleprompter</em> 提词器</p><p><em>detail</em> 熟词僻义，此处为特遣队的意思</p><p><em>jog</em> 慢跑；蹒跚前行</p><p><em>motorcade</em> 车队</p><p><em>board</em> 董事会，委员会；上船&#x2F;飞机&#x2F;火车</p><p><em>flash</em> 使闪耀，使闪光；出示，显示</p><p><em>stumble</em> 犯错，失足；踉跄，绊脚</p><p><em>frontrunner</em> 领先者</p><p><em>poke fun at sb</em> 取笑某人，打趣，奚落某人</p><p><em>tiptoe</em> 踮着脚走</p><p><em>ramp</em> 斜坡，坡道</p><p><em>brush sb&#x2F;sth aside</em> 对···置之不理，漠视</p><p><em>ensuing</em> 随后发生的</p><p><em>contender</em> 竞争者，争夺者</p><p><em>swift</em> 迅速的，敏捷的，快的</p><p><em>sustain</em> 保持，维持；经历，遭受</p><p><em>exemption</em> 豁免</p><p>accommodation 住处，工作场所，停留处</p><p><em>stiffen</em> 变僵硬，变得不易弯曲</p><p><em>gait</em> 步态，步履</p><p><em>wear and tear</em> 磨损，损耗</p><p><em>spine</em> 脊柱，脊椎</p><p><em>commander-in-chief</em> 总司令，总指挥</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 每日阅读分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 英语提升 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>英伟达CEO在台湾大学毕业典礼发表演讲</title>
      <link href="/2023/06/02/ying-wei-da-ceo-zai-tai-wan-da-xue-bi-ye-dian-li-fa-biao-yan-jiang/"/>
      <url>/2023/06/02/ying-wei-da-ceo-zai-tai-wan-da-xue-bi-ye-dian-li-fa-biao-yan-jiang/</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文地址：<a href="https://mp.weixin.qq.com/s/aAYUrMpeRKYwOtZp8GWn7w">https://mp.weixin.qq.com/s/aAYUrMpeRKYwOtZp8GWn7w</a></p></blockquote><h1 id="NVIDIA-CEO-Tells-NTU-Grads-to-Run-Not-Walk-—-But-Be-Prepared-to-Stumble"><a href="#NVIDIA-CEO-Tells-NTU-Grads-to-Run-Not-Walk-—-But-Be-Prepared-to-Stumble" class="headerlink" title="NVIDIA CEO Tells NTU Grads to Run, Not Walk — But Be Prepared to Stumble"></a><strong>NVIDIA CEO Tells NTU Grads to Run, Not Walk — But Be Prepared to Stumble</strong></h1><hr><p>“You are running for food, or you are running from becoming food. And often times, you can’t tell which. Either way, run.”</p><p>NVIDIA founder and CEO Jensen Huang today urged graduates of National Taiwan University to run hard to seize the unprecedented opportunities that AI will present, but embrace the inevitable failures along the way.</p><p>Whatever you pursue, he told the 10,000 graduates of the premier university, do it with passion and conviction — and stay humble enough to learn the hard lessons that await.</p><p>“Whatever it is, run after it like we did. Run. Don’t walk,” Huang said, having swapped his signature black leather jacket for a black graduation robe, with the school’s plum-blossom emblem highlighting a royal blue, white and aqua collar.</p><p>“Remember, either you are running for food; or you are running from becoming food. And often times, you can’t tell which. Either way, run.”</p><p>Huang, who moved from Taiwan when he was young, recognized his parents in the audience, and shared three stories of initial failures and retreat. He called them instrumental in helping forge NVIDIA’s character during its three-decade journey from a three-person gaming-graphics startup to a global AI leader worth nearly a trillion dollars.</p><p>“I was … successful — until I started NVIDIA,” he said. “At NVIDIA, I experienced failures — great big ones. All humiliating and embarrassing. Many nearly doomed us.”</p><p>The first involved a key early contract the company won to help Sega build a gaming console. Rapid changes in the industry forced NVIDIA to give up the contract in a near-death brush with bankruptcy, which Sega’s leadership helped avert.</p><p>“Confronting our mistake and, with humility, asking for help saved NVIDIA,” he said.</p><p>The second was the decision in 2007 to put CUDA into all the company’s GPUs, enabling them to crunch data in addition to handling 3D graphics. It was an expensive, long-term investment that drew much criticism didn’t pay off for years until the chips started being used for machine learning.</p><p>“Our market cap hovered just above a billion dollars,” he recalled. “We suffered many years of poor performance. Our shareholders were skeptical of CUDA and preferred we improve profitability.”</p><p>The third was the decision in 2010 to charge into the promising mobile-phone market as graphics-rich capabilities were coming into reach. The market quickly commoditized, though, and NVIDIA retreated just as quickly, taking initial heat but opening the door to investing in promising new markets — robotics and self-driving cars.</p><p>“Our strategic retreat paid off,” he said. “By leaving the phone market, we opened our minds to invent a new one.”</p><p>Huang told grads that of the parallels in terms of boundless promise between the world he entered upon graduating four decades ago, on the cusp of the PC revolution, and the brave new age of AI they are entering today.</p><p>“For your journey, take along some of my learnings,” he said. Admit mistakes and ask for help; endure pain and suffering to realize your dreams; and make sacrifices to dedicate yourself to a life of purpose.</p><hr><h2 id="生词记录"><a href="#生词记录" class="headerlink" title="生词记录"></a>生词记录</h2><blockquote><p><em>unprecedented</em> 史无前例的，空前的，绝无仅有的</p><p><em>inevitable</em> 不可避免的，必然发生的</p><p><em>premier</em> 首相，总理</p><p><em>conviction</em> 信念；判罪，定罪</p><p><em>signature</em> 签名，署名；明显特征，鲜明特色，识别标志</p><p><em>robe</em> 长袍，罩袍</p><p><em>plum-blossom</em> 梅花</p><p><em>emblem</em> 象征，标志，符号，徽章</p><p><em>aqua</em> 浅绿色的</p><p><em>collar</em> 衣领</p><p><em>retreat</em> 改变，退缩，放弃；撤退，退却，后退</p><p><em>instrumental</em> 起作用的，有帮助的</p><p><em>forge</em> 创造，缔造，艰苦干成，努力加强；伪造；制造，生产</p><p><em>startup</em> 刚起步的小企业，新兴小型企业</p><p><em>humiliating</em> 令人感到耻辱的，丢脸的</p><p><em>doom</em> 死亡，厄运，毁灭，劫数；使注定，使必然发生</p><p><em>a brush with sth</em> 和…的小冲突，与…的摩擦</p><p><em>avert</em> 防止，避免；转移，把···转向某处</p><p><em>humility</em> 谦逊，谦恭</p><p><em>crunch</em> 不足，短缺，缺钱；严峻的形势，紧要关头；嘎吱作响；处理信息</p><p><em>market cap</em> 市值</p><p><em>hover</em> 徘徊，盘旋</p><p><em>commoditize</em> 商业化</p><p><em>boundless</em> 无限的</p><p><em>on the cusp</em> 介于两个状态之间</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 每日阅读分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 英语提升 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>黄色笑话是一种服从性测试</title>
      <link href="/2023/06/01/huang-se-xiao-hua-shi-yi-chong-fu-cong-xing-ce-shi/"/>
      <url>/2023/06/01/huang-se-xiao-hua-shi-yi-chong-fu-cong-xing-ce-shi/</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文地址：<a href="https://mp.weixin.qq.com/s/g6gci792SzXc0jLpYqpDdQ">https://mp.weixin.qq.com/s/g6gci792SzXc0jLpYqpDdQ</a></p></blockquote><h1 id="Is-it-okay-to-tell-a-dirty-joke-at-work"><a href="#Is-it-okay-to-tell-a-dirty-joke-at-work" class="headerlink" title="Is it okay to tell a dirty joke at work?"></a><strong>Is it okay to tell a dirty joke at work?</strong></h1><hr><p>On her first day in a new job in the City, Kate (not her real name) didn’t know what to expect. Now a successful executive, she remembers being ready to roll with the punches, anything in order to get ahead.</p><p>What she didn’t expect was unrelenting sexual innuendo.</p><p>Whenever she wore red heels, one of her bosses joked about how she wasn’t “wearing knickers”.</p><p>In other meetings, senior male colleagues would say “while you’re down there”, when she was plugging in a computer.</p><p>By the time she quit, she says, she knew the reference to red shoes was a joke that was often made.</p><p>While Kate doesn’t mind a bit of “banter”, she says it was just too easy for lines to be blurred, especially within the tough culture of the City. What was meant as joking around with the boys, when you are the subject of the comments amount to sexual harassment.</p><p>She told the human resources team who handled her exit interview that this kind of office “humour” had driven her to attempt suicide.</p><p>‘Disparaging’</p><p>While Kate’s experience was extreme, others agree with her, that “jokes” at work often get out of hand. In one survey, out of 20,000 people questioned, only 16% of British women were comfortable with sexual workplace humour.</p><p>On the other hand, 28% of men in the UK think it is okay to tell a dirty joke at work. And British men are happier to have a laugh over a crude joke, than men from many other parts of the world including Turkey, Mexico, Australia, Canada and the United States.</p><p>The difference between having a joke in the workplace or delaying it until “you are with your mates at the pub” can mean a lot to female co-workers, says Hillary Margolis a senior researcher at Human Rights Watch.</p><p>“A lot of women feel they have to brush or laugh off a joke or they will be seen as too serious. But it can make women and those who identify as non-binary - and also people who are LGTBQ - feel disparaged,” she says.</p><p>Sexist jokes can also make men feel uncomfortable, especially if they are in a female dominated work environment.</p><p>‘Impact understated’</p><p>More often than not, a joke is really meant to be a joke, Ms Margolis says, but sometimes people think sexual humour at work is a form of sexism, which makes women feel excluded.</p><p>“Sometimes these things can shut people down and make women feel like they have to hide who they truly are.</p><p>“Women will often laugh at these kind of jokes in the workplace because they don’t want to be perceived as being too emotional, sensitive or like they just can’t hack it,” says Ms Margolis.</p><p>Having to feel like they not free to be themselves, can put people on the back foot.</p><p>She adds: “Sometimes the impact is really underestimated”.</p><p>Not tolerated</p><p>Kate’s upsetting experience was some years ago now. Bev Shah, who founded City Hive, a social network for workers in finance, says she does not know of anyone these days who would joke openly this way.</p><p>“These types of jokes are no longer acceptable in any public forum in the same way racial jokes no longer are,” said Ms Shah.</p><p>She says any comments of that sort should ring immediate alarm bells for employers, especially in the post #metoo era, and shouldn’t be tolerated.</p><p>Speaking up</p><p>The survey, by Ipsos MORI and the Global Institute for Women’s Leadership at King’s College London asked people across the world in 27 countries.</p><p>The countries where workplace humour of a sexual nature was most acceptable were Belgium and China where 47% of men would joke or tell stories about sex.</p><p>Where as under 13% of men in Mexico, America and Canada agreed.</p><p>When it comes to speaking up, just like Kate will today, British women do not fear pushing back against inappropriate jokes. Over 80% of UK women surveyed said they would “tell off family or friends who make a sexist comment”.</p><p>And, British men also said they would stick up for women as well with 73% willing to take a stand against sexism.</p><hr><h2 id="生词记录"><a href="#生词记录" class="headerlink" title="生词记录"></a>生词记录</h2><blockquote><p><em>roll with the punches</em> 逆来顺受</p><p><em>unrelenting</em> 坚定不移的，不松懈的；无休止的，不缓和的</p><p><em>innuendo</em> 影射的话，暗讽的话</p><p><em>knickers</em> 女用内裤</p><p><em>plug in</em> 给···接通电源，把某一电器与另一电器接通</p><p><em>banter</em> 无恶意的玩笑</p><p><em>blurred</em> 模糊的；分不清的</p><p><em>amount to sth</em> 等于，意味着，达到，总计</p><p><em>sexual harassment</em> 性骚扰</p><p><em>disparaging</em> 贬低的，贬斥的</p><p><em>pub</em> 酒吧</p><p><em>brush sth off</em> 漠视，不理睬</p><p><em>laugh sth off</em> 对···一笑置之</p><p><em>non-binary</em> 非二元性别的</p><p><em>more often than not</em> 往往，多半；通常，常常，一般</p><p><em>exclude</em> 排除···，不考虑···，认为··不可能；阻止，排斥</p><p><em>perceive</em> 意识到，察觉，感知，注意到；认为，看待，视为</p><p><em>can’t hack it</em> 不能应付（某情形）</p><p><em>put sb on the back foot</em> 使人处于劣势或被动的位置</p><p><em>ring alarm bells</em> 敲警钟，发出危险信号，引起警觉</p><p><em>tell off</em> 斥责，责备</p><p><em>stick up for sth&#x2F;sb</em> 支持，维护（想法，遭受指责或攻击的人）</p><p><em>sexism</em> 性别歧视</p></blockquote><h2 id="个人感悟"><a href="#个人感悟" class="headerlink" title="个人感悟"></a>个人感悟</h2><p>玩笑归玩笑，但不应把低俗和恶趣味等东西也当成玩笑然后试图来蒙混过关。</p><p>向性骚扰大胆say no，绝对支持！</p>]]></content>
      
      
      <categories>
          
          <category> 每日阅读分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 英语提升 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>马斯克访华</title>
      <link href="/2023/06/01/ma-si-ke-fang-hua/"/>
      <url>/2023/06/01/ma-si-ke-fang-hua/</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文地址：<a href="http://985.so/mz1gm">http://985.so/mz1gm</a></p></blockquote><h1 id="Beijing-Says-Musk-Opposes-Decoupling-of-U-S-China"><a href="#Beijing-Says-Musk-Opposes-Decoupling-of-U-S-China" class="headerlink" title="Beijing Says Musk Opposes Decoupling of U.S., China"></a><strong>Beijing Says Musk Opposes Decoupling of U.S., China</strong></h1><hr><p>China’s foreign ministry said Elon Musk told officials in Beijing that he opposes decoupling the world’s two biggest economies, in a meeting held shortly after the Tesla chief executive arrived in the country.</p><p>In a statement released Tuesday evening, Musk was quoted by Chinese officials as having told Foreign Minister Qin Gang that the interests of the two countries were intertwined and inseparable, like “conjoined twins.” The ministry published a photo of Qin and Musk shaking hands.</p><p>Musk’s trip to China — one of Tesla’s most important retail markets and home to its biggest manufacturing plant — is his first in over three years, following the onset of the pandemic.</p><p>At Tuesday’s meeting, Qin likened China-U. S. relations to driving a Tesla vehicle, which requires holding the steering wheel correctly, stepping on the brakes at the right time, avoiding dangerous driving and using the gas pedal appropriately, according to a readout from the ministry. Tesla didn’t respond to a request for comment. Grace Tao, a Tesla executive who heads up external affairs for its China operations, reposted the foreign ministry’s statement on her social-media account on China’s Weibo platform.</p><p>Musk joins a list of foreign CEOs, including Apple’s Tim Cook and Pfizer’s Albert Bourla, who in recent months have paid visits to China to meet senior officials and visit local facilities. </p><p>Last year, Musk hosted Qin at Tesla’s factory in Fremont, Calif., while Qin was the Chinese ambassador to the U.S.</p><p>Decoupling has become a buzzword among foreign executives and policy experts, used to refer to the unwinding of deep economic and commercial ties between the U.S. and China that have been built up over the years. U.S. officials have said the U.S. isn’t seeking to decouple from China, but safeguard its technological interests. </p><p>Tesla has doubled down on China, announcing in April that it plans to build a second factory in Shanghai to produce its Megapack energy storage product. </p><p>In the past, Musk has lavished praise on China, calling its economic prosperity truly amazing and hailing its data laws. Some of Musk’s ties to China have prompted unease in Washington.</p><p>Musk is expected to visit Tesla’s Shanghai factory later this week, people familiar with the matter said.</p><p>Tesla enjoyed a period of booming car sales in the world’s biggest automobile market after setting up its gigafactory in Shanghai in 2019 as the first wholly owned foreign carmaker in China. The company now faces intense competition from local rivals, who can offer a range of comparable electric vehicles at lower prices as the Chinese car industry market grows more mature.</p><p>Tesla’s market share in China has fallen by almost a third, to 10% last year from around 15% in 2020, according to data from China Passenger Car Association. </p><p>More than half of the car maker’s electric cars delivered globally last year were made in China and the Chinese market contributed to about 22% of its revenue, with almost 440,000 EVs sold in the country, according to Chinese industry data and company filings. </p><p>Tesla’s presence in China also helped fuel China’s EV industry, with eight in 10 cars sold in the country made by homegrown brands last year. Chinese EV maker BYD has surpassed Tesla in sales both in China and globally.</p><hr><h2 id="生词记录"><a href="#生词记录" class="headerlink" title="生词记录"></a>生词记录</h2><blockquote><p><em>decouple</em> 使分开，使脱离</p><p><em>quote</em> 引用，引述，援引</p><p><em>intertwine</em> 缠结，缠绕在一起，紧密关联</p><p><em>inseparable</em> （事物）分不开的，不可分的</p><p><em>conjoined</em> 结合的，联合的，连接在一起的</p><p><em>plant</em> 植物；工厂</p><p><em>onset</em> 开端，发生</p><p><em>linken sb&#x2F;sth to sb&#x2F;sth</em> 认为…与…相像</p><p><em>steering wheel</em> 方向盘</p><p><em>brake</em> 刹车，制动器，车闸</p><p><em>gas pedal</em> 油门踏板</p><p><em>readout</em> 输出，读出，显示，打印</p><p><em>repost</em> 转发</p><p><em>ambassador</em> 大使</p><p><em>buzzword</em> 流行语，热词，流行术语</p><p><em>unwind</em> 解开，打开，松开；放松，轻松</p><p><em>lavish sth on sb&#x2F;sth</em> 为…倾注，为…挥霍</p><p><em>prosperity</em> 成功，繁荣，昌盛</p><p><em>hail</em> 把···称赞为，把···誉为</p><p><em>prompt</em> 提词，提白；促使，导致，激起</p><p><em>booming</em> 繁荣的，迅速发展的</p><p><em>comparable</em> 类似的，相当的，可比的</p><p><em>EV</em> Electric Vehicle 简写，电动汽车</p><p><em>fuel</em> 燃料；加剧，增加，刺激</p><p><em>surpass</em> 优于，超过</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 每日阅读分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 英语提升 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>韩国大学生吃掉价值12万美金的香蕉展品</title>
      <link href="/2023/06/01/han-guo-da-xue-sheng-chi-diao-jie-zhi-12-wan-mei-jin-de-xiang-jiao-zhan-pin/"/>
      <url>/2023/06/01/han-guo-da-xue-sheng-chi-diao-jie-zhi-12-wan-mei-jin-de-xiang-jiao-zhan-pin/</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文地址：<a href="https://mp.weixin.qq.com/s/VE0T1jjWIQJeReJ3XzCCHg">https://mp.weixin.qq.com/s/VE0T1jjWIQJeReJ3XzCCHg</a></p></blockquote><h1 id="Banana-drama-‘hungry’-South-Korean-student-eats-120-000-artwork"><a href="#Banana-drama-‘hungry’-South-Korean-student-eats-120-000-artwork" class="headerlink" title="Banana drama: ‘hungry’ South Korean student eats $120,000 artwork"></a><strong>Banana drama: ‘hungry’ South Korean student eats $120,000 artwork</strong></h1><hr><p>A South Korean art student who ate a banana that formed part of a renowned installation by the Italian artist Maurizio Cattelan said he did so because he was “hungry”.</p><p>Noh Huyn-soo was filmed brazenly removing the banana, which was duct-taped on to a wall at the Leeum Museum of Art in Seoul, unpeeling it and eating it in front of stunned onlookers before reattaching the banana skin to the wall using the same tape and walking off with a satisfied grin.</p><p>The incident was recorded by a friend of Noh, a student at Seoul National University, and lasted for over a minute.</p><p>When the museum asked Noh why he ate the banana, he replied that he was hungry after skipping breakfast, according to the Korea Herald. He later told the broadcaster KBS that he thought “damaging a work of modern art could also be [interpreted as] artwork” and that he came up with the idea to reattach the peel as “a joke”.</p><p>He added: “I thought it would be interesting … isn’t it taped there to be eaten?”</p><p>The banana, part of Cattelan’s Comedian installation, gets replaced every two or three days.</p><p>Cattelan, a sculptor and performance artist based in New York, was reportedly informed about the incident and simply replied: “No problem.”</p><p>It is not the first time a banana from the work has been scoffed. During the work’s debut exhibit at Miami Art Basel in 2019 a banana was removed and eaten by the performance artist David Datuna.</p><p>Datuna later told the Guardian that while he considered Cattelan to be “a genius”, he took issue with the huge amount of money made from a banana that cost 20 cents.</p><p>The first and second editions on display at Miami Art Basel both sold for $120,000 (£95,640), and another was put up for sale for $150,000 before Datuna showed up to eat the fruit. “I have travelled in 67 countries around the world in the last three years, and I see how people live,” Datuna said. “Millions are dying without food. Then he puts three bananas on the wall for half a million dollars?”</p><p>Cattelan, who was born in Padua, is also known for provocative artworks that challenge popular culture. One – an 18-carat gold toilet called America and valued at £1m – made headlines in September 2019 after it was ripped from its display wall during an overnight robbery at Blenheim Palace in Oxfordshire.</p><p>A middle-finger sculpture by Cattelan – known as Il Dito (the finger) but officially called L.O.V.E – opposite the stock exchange in Milan was vandalised by environmental activists in January.</p><hr><h2 id="生词记录"><a href="#生词记录" class="headerlink" title="生词记录"></a>生词记录</h2><blockquote><p><em>renowned</em> 有名的，闻名的，受尊敬的</p><p><em>installation</em> 装置艺术</p><p><em>brazenly</em> 毫不隐瞒地，明目张胆地</p><p><em>duck tape</em> 强力胶带</p><p><em>peel</em> 剥去；（水果或蔬菜的）外皮</p><p><em>stunned</em> 目瞪口呆</p><p><em>attach</em> 附上，固定，连接</p><p><em>grin</em> 咧嘴笑</p><p><em>herald</em> 预告，宣传；预示…来临；预兆</p><p><em>broadcaster</em> 广播员，节目主持人；电视台，广播公司</p><p><em>interpret</em> 诠释，说明；理解为，领会；演绎；翻译，口译</p><p><em>sculptor</em> 雕塑家</p><p><em>scoff</em> 嘲笑，讥笑；狼吞虎咽地吃</p><p><em>debut</em> 首次登台，首次亮相</p><p><em>take issue with sth</em> 对···持强烈不满，很不赞同</p><p><em>provocative</em> 挑衅的，使人生气的，煽动的；引发思考的，启发性的</p><p><em>carat</em> 克拉（钻石的重量单位），开（黄金的纯度单位）</p><p><em>rip</em> 撕裂，撕破，划破；迅速扯开，猛力去除</p><p><em>robbery</em> 抢劫，抢劫罪</p><p><em>sculpture</em> 雕塑，雕像</p><p><em>vandalise</em> 故意破坏，肆意破坏（尤指公共财物）</p></blockquote><h2 id="个人感悟"><a href="#个人感悟" class="headerlink" title="个人感悟"></a>个人感悟</h2><p>我不懂艺术，不过我觉得很多所谓的艺术价值其实都是人为炒作出来的，至于它是否有无价值，价值多少，完全取决于人的看法。</p><p>例如，当某件艺术品附上某些专家或名人的名气时，它很有可能就被视作价值连城的一件珍品了。</p>]]></content>
      
      
      <categories>
          
          <category> 每日阅读分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 英语提升 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>霉霉演唱会上的安保大姐火了</title>
      <link href="/2023/06/01/mei-mei-yan-chang-hui-shang-de-an-bao-da-jie-huo-liao/"/>
      <url>/2023/06/01/mei-mei-yan-chang-hui-shang-de-an-bao-da-jie-huo-liao/</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文地址：</p><p><a href="https://mp.weixin.qq.com/s/DVl1ysXESqbV40zY-vZQbQ">https://mp.weixin.qq.com/s/DVl1ysXESqbV40zY-vZQbQ</a></p></blockquote><h1 id="Security-Guard-Dancing-at-Taylor-Swift-Gig-Delights-Internet-‘Iconic’"><a href="#Security-Guard-Dancing-at-Taylor-Swift-Gig-Delights-Internet-‘Iconic’" class="headerlink" title="Security Guard Dancing at Taylor Swift Gig Delights Internet: ‘Iconic’"></a>Security Guard Dancing at Taylor Swift Gig Delights Internet: ‘Iconic’</h1><hr><p>A video of a security guard dancing while working at the concert venue of a Taylor Swift gig on her Eras tour has gone viral on TikTok, where it received 2.2 million views.</p><p>A message overlaid on the clip shared by TikToker Jeff Skibiski (@skibiscuit) read: “No one worked harder this weekend than this iconic security guard, Pocket.”</p><p>The video showed Pocket moving her hips, with hands in the air, while mouthing the words to a Taylor Swift song. The footage was from the State Farm Stadium in Glendale, Arizona. A caption read: “Petition for Taylor to invite Pocket to the rest of #theerastour.”</p><p>Dancing the night away, like the security guard in the latest video, is one way to get you through your work shift. Studies have shown that dancing can do more than just put you in a good mood.</p><p>An April 2018 study published in the Sports Medicine journal stated: “Dancing is a form of physical activity associated with health benefits across the lifespan, even at amateur levels of participation.”</p><p>The study found that “dance interventions significantly improved body composition, blood biomarkers, and musculoskeletal function.”</p><p>A November 2012 study published in The Arts in Psychotherapy found that dance (movement) therapy and ballroom dances “seem beneficial for patients with breast cancer, depression, Parkinson’s disease, diabetes and heart failure.”</p><p>A study back in June 2003 published in The New England Journal of Medicine found that dancing and other leisure activities, including reading, playing board games and playing musical instruments, were associated with a reduced risk of dementia.</p><p>The latest video has delighted users on TikTok, with several writing that Pocket needs to join Taylor Swift’s tour on stage.</p><p>Victoria posted: “Pocket needs a secured spot on the tour,” to which the original poster replied: “She’s the opener for all tour stops from here on out.”</p><p>User p1nkflam1ng000 wrote: “Dream retirement job - right here. Jamming to music aaaall the time! Go Pocket, Go Pocket! Get it, girl!”</p><p>User @itsme….hi commented: “@taylorswift please hire Pocket to do the rest of the tour! And where do I apply for this kind of dream job?”</p><p>Aliza Mooney wrote: “She needs to be in a Taylor Swift video. Or be the one who announces Taylor’s next award win.”</p><p>Santana posted: “Pocket is out there killing it,” while Sarah Bispy wrote: “This is HER moment. Pop off queen.”</p><p>Newsweek has contacted the original poster for comment via TikTok. This video has not been independently verified.</p><hr><h2 id="生词记录"><a href="#生词记录" class="headerlink" title="生词记录"></a>生词记录</h2><blockquote><p><em>security guard</em> 警卫，保安人员</p><p><em>venue</em> 场地，举行地点，会场</p><p><em>gig</em> 尤指临时的工作；现场演出，现场演奏会</p><p><em>viral</em> （通过网络在个体之间）病毒式的传播</p><p><em>overlay</em> 在…上铺，覆盖；掺杂着，交织着，洒满，遮掩</p><p><em>clip</em> 剪辑，片段</p><p><em>iconic</em> 非常出名的，受欢迎的</p><p><em>hip</em> 臀部；时髦的</p><p><em>mouth</em> 对口型假唱；胡说，不真诚地说</p><p><em>footage</em> 片段镜头</p><p><em>caption</em> 说明文字</p><p><em>petition</em> 请愿书；上诉状，诉状，申请书</p><p><em>lifespan</em> 寿命，生命周期</p><p><em>amateur</em> 业余的</p><p><em>intervention</em> 干预，干涉，介入</p><p><em>composition</em> 成分，构成，组成</p><p><em>biomarker</em> 生物标记</p><p><em>musculoskeletal</em> 肌肉骨骼的</p><p><em>psychotherapy</em> 心理治疗</p><p><em>board game</em> 棋类游戏</p><p><em>dementia</em> 痴呆</p><p><em>spot</em> 地点，场所；排名位置；某演员的固定节目</p><p><em>pop off queen</em> 一种称赞的方式，说明做得太棒了</p></blockquote><h2 id="文章概述"><a href="#文章概述" class="headerlink" title="文章概述"></a>文章概述</h2><blockquote><p>一位安保大姐Pocket因在霉霉演唱会上跟随音乐跳舞而在titok上走红，文章借此阐述了跳舞的好处以及展示了网友们的热评</p></blockquote><h2 id="个人感悟"><a href="#个人感悟" class="headerlink" title="个人感悟"></a>个人感悟</h2><blockquote><p>带薪听演唱会哪个不羡慕？ </p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 每日阅读分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 英语提升 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阳后感</title>
      <link href="/2023/06/01/yang-hou-gan/"/>
      <url>/2023/06/01/yang-hou-gan/</url>
      
        <content type="html"><![CDATA[<p>​2022年末宣布放开的时候，我侥幸逃过一劫，进入决赛圈，并未感染新冠。</p><p>​是福不是祸，是祸躲不过。没想到5月13日这天，睡醒午觉后，突然觉得喉咙不舒服，于是赶紧喝了点感冒灵冲剂，可惜没什么作用，到凌晨2点开始发烧，又吃了粒布洛芬，温度开始逐渐下降，直到6点完全退烧。直到中午又开始发低烧，直到晚上7点吃完药后开始睡觉，那一晚上真的是痛苦，翻来覆去，似梦似醒，时而感觉走在平滑的路上，时而感觉走在满是碎石的路上，反正就是睡不安稳…</p><p>​第三天。烧了一天一夜后，终于退烧了，头痛紧随其后，头重脚轻，又睡了一天…</p><p>​第四天。头不痛了，开始流鼻涕以及鼻塞，不过感觉好多了。</p><p>​第五天。鼻塞消失了，开始刀片嗓。喝水痛，吃饭更痛。😣</p><p>​第六天，第七天。刀片嗓逐渐好转，只剩下咳嗽了。</p><p>​第八天直到今天6月1号，咳嗽基本消失，持续半个月才基本恢复，这新冠可真是可怕😰</p><p>​简单记录一下，祝大家身体健康吧，只有身体好才能做自己想做的事。</p><p>​</p>]]></content>
      
      
      <categories>
          
          <category> 关于生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活随谈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>迟来的2022年总结</title>
      <link href="/2023/06/01/chi-lai-de-2022-nian-zong-jie/"/>
      <url>/2023/06/01/chi-lai-de-2022-nian-zong-jie/</url>
      
        <content type="html"><![CDATA[<p>2023年都过去了一个季度了，现在才开始想着回顾一下2022年的生活，不过好饭不怕晚，借此记录一下，哈哈😬。 </p><h2 id="回顾过去"><a href="#回顾过去" class="headerlink" title="回顾过去"></a>回顾过去</h2><p>2022年应该算得上是我最“颠簸流离”的一年了。</p><h3 id="当老师"><a href="#当老师" class="headerlink" title="当老师"></a>当老师</h3><p>四月份选择从公司离职，本想回来休养生息一下后继续搬砖的，但经朋友介绍进入了某间私立学校当老师。不过由于我专业不对口，也没有教师资格证，因此提出的条件是给实习机会然后让我跟岗学习，同时给予时间考取教资，我没考虑太多也就答应了，由此又踏入了另一个坑 😣。毕竟一切都是从零开始，两个月的时间，我自问算得上勤勤恳恳，认真跟随那些老教师听课学习，学着如何把某个知识通俗易懂地教会学生，学着如何成为一个好老师，积极完成每一项工作…无奈这里面水深的很，一帮老顽固当领导，官僚主义严重，整天只会说理论，假大空，毫无实际。但最令我感到恶心的是最后考核阶段，我完成试讲后，那些领导开始绕圈子，不说可以转正的事，去找他就说在讨论，有消息通知我，明摆着就是拖，到最后让我干完活后就说不合适，让我走就可以了。（此处省略脏话无数，不适合就早点说啊，问来问去就是拖，真的是恶心操作）后来我知道了，原来他们找到了一个师范应届生，可以更好的压榨。不过，我静下心来问了问我自己：这两个月你做的开心吗？答案是否的，我甚至觉得这两个月真是过的煎熬，每天度日如年，又无人可以倾诉，因此离开后我反而释然了，不用再陪着笑脸面对这一帮老顽固了。（不过那些退休老教师虽然看起来有点高傲，但还是很好相处的，跟他们也学到了不少东西，而且因为经常在讲台上面对几十个学生讲课，自己的胆量也有所提高，也没那么社恐了，哈哈，所以这也不失为一种意外收获吧）<br><img src="https://s3.bmp.ovh/imgs/2023/04/15/2737162e2b6040f0.jpeg" alt="学校篮球场" style="zoom: 25%;" /></p><h3 id="去考研"><a href="#去考研" class="headerlink" title="去考研"></a>去考研</h3><p>被“炒鱿鱼”后，想着继续投简历回归老本行，没想到疫情肆虐，传染性加强，工作难找，真是屋漏偏逢连夜雨。此时一个从未有过的念头在脑海中浮现——考研，和父母交谈了一番后，他们让我自己做选择，说干就干。此时6月已经接近尾声，我抓住这最后的机会查阅了相关的信息，结合自己的实力以及喜欢的专业，快速地选择了报考院校和专业，然后在7月正式开始了我的考研备考之路。每一科的考试内容基本都是从零开始，尤其数学，算得上是我薄弱项，它从不会欺骗你，因为不会就是不会😂。6个月后，疫情放开恰遇上考研大军，一大波考生考前中招，霎时间人心惶惶，毕竟谁也不想辛苦一年的成果付之东流。幸运的是我没有感染(也可能是无症状)，顺利完成考试…直到2023年4月顺利完成复试，也顺利收到了拟录取通知。<del>一切就像梦一样，醒来很久还是很感动</del>。至此，我的2022低开高走，同时也以此作为一个比较完美的收场。🥳</p><img src="https://s3.bmp.ovh/imgs/2023/04/16/b60c299cf8dd58c6.jpg" alt="拟录取通知" style="zoom:50%;" /><h2 id="展望未来"><a href="#展望未来" class="headerlink" title="展望未来"></a>展望未来</h2><p>当然是努力学习，天天向上啦，哈哈。希望研究生生涯也完美点吧。</p>]]></content>
      
      
      <categories>
          
          <category> 关于生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 年度总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>谣言伤害力有多大</title>
      <link href="/2023/06/01/yao-yan-shang-hai-li-you-duo-da/"/>
      <url>/2023/06/01/yao-yan-shang-hai-li-you-duo-da/</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文地址：</p><p><a href="https://mp.weixin.qq.com/s/Qamk3J6AssxY0MSAj7-5Ew">https://mp.weixin.qq.com/s/Qamk3J6AssxY0MSAj7-5Ew</a></p></blockquote><h1 id="Rumors-Gossip-and-Your-Health"><a href="#Rumors-Gossip-and-Your-Health" class="headerlink" title="Rumors, Gossip, and Your Health"></a>Rumors, Gossip, and Your Health</h1><h1 id="From-WebMD"><a href="#From-WebMD" class="headerlink" title="From: WebMD"></a>From: WebMD</h1><hr><p>Rumors. Gossip. Fake news.</p><p>We’ve all heard these terms. While most consider them harmless, they can affect your health. Learning to tell the difference between fact and fiction can be a real boost – both mentally and physically.</p><p>What happens when rumors aren’t harmless? What if they damage someone’s reputation, livelihood, or personal life?</p><p>If you’re on the receiving end of untrue gossip, what do you do?</p><p>Rumors vs. Gossip vs. ‘Fake News’</p><p>Rumors are defined as widely spread talk with no reliable source to back it up. They aren’t always bad. Some rumors can even seem positive, like promotions, engagements, or awards.</p><p>But until proven otherwise, they are just that – rumors.</p><p>Gossip is when you take rumors – those unconfirmed pieces of information – and pass them along, spreading what may be “fake news.”</p><p>What may be surprising is how difficult it can be to tell rumor and gossip from truth. Even people who are Internet-savvy can have trouble telling what’s real and what’s not. It can also be tough to tell the difference between news and advertisement. As a result, people sometimes give more weight to what they see in their social media feed than what they get from more credible news sources.</p><p>What’s the Harm?</p><p>When it comes to “fake news,” the effects can be both immediate and long-lasting. In most cases, a “fake news” story can rile up your emotions and change your mood. Depending on the strength of your feelings, the story, and the reaction it gave you, can stick in your head, even after you find out it’s false. You may even remember those feelings if you see another story about the same subject.</p><p>On their own, rumors and gossip seem harmless; almost a fun pastime. But there’s a point where they can become harmful to your health.</p><p>There’s a great deal of information out there about bullying among teenagers and younger children. What’s sometimes overlooked is that adults can be bullied, too.</p><p>It can come in the form of untrue rumors or gossip about them or a loved one. It can also come through reactions to words or an image that’s been posted.</p><p>Physical appearance, politics, and financial issues can all become the subject of online bullying, too.</p><p>It’s far from something to brush off. It can bring things like:</p><p>· Exhaustion</p><p>· Anxiety</p><p>· Depression</p><p>What’s more, all this talk can escalate to physical violence. When it’s not addressed, it can also cause long-term physical and mental health issues, including:</p><p>· Clinical depression</p><p>· Posttraumatic stress disorder</p><p>· Panic attacks</p><p>· Guilt</p><p>· Suicide</p><p>What Can You Do?</p><p>Rumors, gossip, and fake news can make you feel helpless, angry, and very anxious. There are steps you can take to regain your power and your health.</p><p>To avoid fake news, you can:</p><p>· Watch out for sites that end in “.com.co.” Often, these are bootleg versions of traditional news services.</p><p>· Try to find other articles on the same topic from other sites, especially if the first article you read makes you upset. It’s possible that the anger-inducing story was created in a way to rile you up.</p><p>· Check another source if an article you read uses all caps, either in headlines or in the article itself.</p><p>· Click the “About Us” tab for more information about the source.</p><p>· Poke around a little to see if other, more-known sites are reporting the story. If it’s legitimate, at least one other site would cover it.</p><p>· Be careful about blogs, even if they’re tied to well-known sites. In many cases, blogs aren’t held to the same editorial standard as regular news pieces.</p><p>When you come across a piece of gossip, a juicy rumor, or an unflattering photo that clearly is aimed at hurting the subject, don’t share it, don’t comment, and don’t engage. You might be able to help someone who doesn’t know how to combat the problem by simply reporting it for them.</p><p>If you’re the subject of a rumor, gossip, or bullying, it’s important to remember that not every bit of teasing is bullying. But when it escalates to that point, don’t respond. Cut them off – block the calls and texts, and block them on social media.</p><p>Get in touch with your Internet service provider if the abuse is coming through a website or your smartphone. Chances are the bully is violating their terms of service. If so, the offensive posts will disappear. You can also contact the police. There are laws against harassment, stalking, and threatening behavior.</p><p>Don’t engage with them. Don’t forward the messages to friends. Most of all, don’t believe whatever is being said about you.</p><hr><h2 id="生词记录"><a href="#生词记录" class="headerlink" title="生词记录"></a>生词记录</h2><blockquote><p><em>rumor</em> 谣言，传闻</p><p><em>gossip</em> 流言蜚语</p><p><em>term</em> 术语，长期，期限，名词</p><p><em>boost</em> 提升，改善，提高</p><p><em>livelihood</em> 生计</p><p><em>promotion</em> 晋升</p><p><em>engagement</em> 订婚</p><p><em>award</em> 奖励，奖品，获奖</p><p><em>prove</em> 证实</p><p><em>otherwise</em> 否则</p><p><em>savvy</em> 有见识的，通情达理的</p><p><em>feed</em> 供给，喂养，信息流</p><p><em>rile</em> 激怒</p><p><em>a great deal of</em> 大量的</p><p><em>bully</em> 欺负，欺凌</p><p><em>subject</em> 科目，主体，对象</p><p><em>brush sth off</em> 漠视，不理睬</p><p><em>escalate</em> 加剧</p><p><em>address</em> 地址，解决</p><p><em>Clinical depression</em> 临床抑郁症</p><p><em>Posttraumatic stress disorder</em> 创伤后应激障碍</p><p><em>Panic attacks</em> 惊恐发作</p><p><em>bootleg</em> 盗版的</p><p><em>caps</em> 大写字母</p><p><em>poke</em> 搜索，翻找</p><p><em>legitimate</em> 合法的</p><p><em>juicy</em> 多汁的，信息生动有趣的，富于刺激性的，重要的，高质量的</p><p><em>unflattering</em> 不恭维的，有损形象的</p><p><em>harassment</em> 骚扰，侵扰</p><p><em>stalk</em> （非法）跟踪，盯梢</p></blockquote><h2 id="文章概述"><a href="#文章概述" class="headerlink" title="文章概述"></a>文章概述</h2><blockquote><p>针对日前苏州大学某大学生造黄谣问题，指出谣言的危害以及给出面对谣言时相对应的一些解决方法。</p></blockquote><h2 id="个人感悟"><a href="#个人感悟" class="headerlink" title="个人感悟"></a>个人感悟</h2><blockquote><p>不信谣不传谣，对网络上的各种传言保持清醒，不要丢失自己的判断能力，不要人云亦云，让子弹飞一会。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 每日阅读分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 英语提升 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>该不该冒着生命危险去救人</title>
      <link href="/2023/06/01/gai-bu-gai-mou-zhao-sheng-ming-wei-xian-qu-jiu-ren/"/>
      <url>/2023/06/01/gai-bu-gai-mou-zhao-sheng-ming-wei-xian-qu-jiu-ren/</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文地址：<a href="https://mp.weixin.qq.com/s/SVRcnqah9t7D6M68IoEbAg">https://mp.weixin.qq.com/s/SVRcnqah9t7D6M68IoEbAg</a></p></blockquote><h1 id="Do-you-have-to-rescue-someone-in-danger"><a href="#Do-you-have-to-rescue-someone-in-danger" class="headerlink" title="Do you have to rescue someone in danger?"></a><strong>Do you have to rescue someone in danger?</strong></h1><hr><p>It is a harrowing video to watch: a man, crying out for help as he struggles to swim in the middle of a Florida pond.</p><p>Off camera, the voices of five teens, mocking him.</p><p>“They drowning, what the heck,” one laughs.</p><p>“Ain’t nobody fixing to help you,” another is heard to say.</p><p>And, after his head disappeared under the water for the final time: “Oh, he just died.”</p><p>Crime?</p><p>The body of Jamel Dunn - a 32-year-old disabled father-of-two - was found in the water three days later, on 12 July.</p><p>Up until that point, no one knew where he had gone. No one had called 911 to report a man in trouble. No one even knew anyone had witnessed the drowning until the video emerged on social media, and Dunn’s family members saw it.</p><p>Its contents have shocked the community in the city of Cocoa, on Florida’s east coast. But the teens, aged between 14 and 16, will face no charges, prosecutors have said: there is nothing on the statute books which deal with an incident like this, they say.</p><p>The vast majority of states in America do not put a “duty to rescue” on their citizens, but 10 do.</p><p>But even these do not cover all instances. Florida is one of the few states to have such a law, but it only covers reporting a sexual battery if witnessed or suspected, according to The Volokh Conspiracy, a blog written mainly by law professors.</p><p>In fact, only a few countries in the world have a law which means people have to help or risk prison time, including Germany, where four people are currently being prosecuted for “unterlassene Hilfeleistung” (failure to provide assistance).</p><p>According to local reports in Germany, last October an 82-year-old man collapsed in a bank in Essen, but was then ignored by other customers, ranging in age from 39 to 62, for the next 20 minutes.</p><p>A fifth customer eventually called an ambulance, but it was too late, and the man died a few days later in hospital.</p><p>Paparazzi</p><p>Perhaps the most high-profile instance of a law like this involved the death of Princess Diana.</p><p>Seven photographers were accused of failing to render assistance by French investigators following the 1997 Paris crash which killed the princess, her boyfriend Dodi Al-Fayed and driver Henri Paul.</p><p>The men had taken photographs rather than helping the dying occupants of the car, it was alleged.</p><p>But after two years of investigation, all charges were dropped against them.</p><p>Fear</p><p>But why would you have such rules?</p><p>Sometimes, however, people are more worried about being landed with a bill - or getting into legal trouble.</p><p>~</p><p>But many social media users understood the decision, according to the New York Times.</p><p>“If I helped her to get up and sent her to the hospital, doctors would ask you to pay the medical bill,” one wrote. “Her relatives would come and beat you up indiscriminately.”</p><p>Protection</p><p>The teenagers in the Florida case, however, would not have ended up in trouble. Every state in the US has a “good Samaritan law”, which largely protects those who try to help in an emergency situation from being sued.</p><p>But whether or not this factored into their thinking is unknown. The teens were heard to mention alligators - but that would not have prevented them calling 911.</p><p>As for the moral argument, Yvonne Martinez, the Cocoa Police Department spokeswoman, told Florida Today at least one of the boys did not seem worried by the implications of what they had done.</p><p>“There was no remorse, only a smirk,” she said.</p><hr><h2 id="生词记录"><a href="#生词记录" class="headerlink" title="生词记录"></a>生词记录</h2><blockquote><p><em>harrowing</em> 折磨人的，令人肠断的，使人十分难过的，恐怖的</p><p><em>mock</em> 嘲笑；假的，假装的</p><p><em>drown</em> 淹死，溺死</p><p><em>prosecutor</em> 公诉人，检察官；原告律师，控方律师</p><p><em>statute book</em> 法典，法令全书</p><p><em>battery</em> 电池；殴打，暴力行为</p><p><em>conspiracy</em> 合谋，阴谋，密谋策划</p><p><em>collapse</em> 崩溃，垮掉，失败；倒下，昏倒</p><p><em>paparazzi</em> 狗仔队</p><p><em>profile</em> 简介；关注度</p><p><em>princess</em> 王妃，公主</p><p><em>render</em> 表达，表现；使成为；给予，提供</p><p><em>occupant</em> 占有人，占用者</p><p><em>land sb with sth</em> 给某人惹下麻烦，给某人出难题</p><p><em>indiscriminately</em> 不加选择地，不分青红皂白地</p><p><em>alligator</em> 短吻鳄</p><p><em>implication</em> 可能的影响（或作用、结果）；含义，暗示</p><p><em>remorse</em> 悔恨，自责</p><p><em>smirk</em> 傻笑，假笑，得意地笑</p></blockquote><h2 id="个人感悟"><a href="#个人感悟" class="headerlink" title="个人感悟"></a>个人感悟</h2><p>个人认为想要救人优先要想如何自保，只有保护好自己的前提下才有资本谈救人。</p><p>若单凭自己的能力无法帮助到他人的时候，也应当寻求合适的帮助。</p><p>PS：文中的那5个青少年见死不救的行为真是令人感到可怕，更令人感到悲伤的是只能从道德上谴责他们而无法从法律上惩罚他们…</p>]]></content>
      
      
      <categories>
          
          <category> 每日阅读分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 英语提升 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络基础系列（四）</title>
      <link href="/2023/06/01/ji-suan-ji-wang-luo-ji-chu-xi-lie-si/"/>
      <url>/2023/06/01/ji-suan-ji-wang-luo-ji-chu-xi-lie-si/</url>
      
        <content type="html"><![CDATA[<h1 id="第四章-网络层"><a href="#第四章-网络层" class="headerlink" title="第四章 网络层"></a>第四章 网络层</h1><h2 id="网络层概述"><a href="#网络层概述" class="headerlink" title="网络层概述"></a>网络层概述</h2><ol><li>网络层主要任务就是将分组从源主机经过多个网络和多段链路传输到目的主机，可以将该任务划分为<code>分组转发</code>和<code>路由选择</code>两种重要功能</li></ol><p><img src="https://s3.bmp.ovh/imgs/2023/05/06/ce87b5b05ba6f686.png"></p><ol start="2"><li>网络层向上层提供两种服务</li></ol><ul><li>面向连接的<code>虚电路</code>服务</li><li>无连接的<code>数据报</code>服务</li></ul><p><img src="https://s3.bmp.ovh/imgs/2023/05/06/452e7cf75f91e44b.png"></p><h2 id="网际协议IP"><a href="#网际协议IP" class="headerlink" title="网际协议IP"></a>网际协议IP</h2><ul><li>TCP&#x2F;IP体系结构中网际层中的核心协议</li></ul><h3 id="IPV4地址概述"><a href="#IPV4地址概述" class="headerlink" title="IPV4地址概述"></a>IPV4地址概述</h3><ul><li>IPv4地址就是给因特网上的每一台主机（或路由器）的，每一个接口分配一个在全世界范围内是唯一的32比特的标识符</li><li>由于32比特的IPv4地址不方便，故常采用<code>点分十进制</code>的表示方法</li></ul><p><img src="https://s3.bmp.ovh/imgs/2023/05/08/51adf17dcb26fe38.png" alt="示例"></p><ul><li>IPv4地址的编址方法经历了三个阶段：<ul><li>分类编址</li><li>划分子网</li><li>无分类编址</li></ul></li></ul><h3 id="IPv4地址编址方法"><a href="#IPv4地址编址方法" class="headerlink" title="IPv4地址编址方法"></a>IPv4地址编址方法</h3><h4 id="分类编址"><a href="#分类编址" class="headerlink" title="分类编址"></a>分类编址</h4><p>根据地址左起的第一个十进制数值，可判断出网络类别（小于127的为A类，128-191的为B类，192-223的为C类）</p><ul><li><p><strong>A类地址</strong></p><p><img src="https://s3.bmp.ovh/imgs/2023/05/08/5e7d8c593b031053.png"></p><ul><li>可指派的网络数量为2^(8-1)^ - 2 &#x3D; 126（8-1次方是因为最小网络号0需要保留，剩下7位可以分配；减2的原因是除去最小网络号0和最大网络号127）</li><li>可分配的IP地址数量为：2^24^ - 2 （减2的原因是除去全0（表示网络地址）和全1（表示广播地址））</li></ul></li><li><p><strong>B类地址</strong></p><p><img src="https://s3.bmp.ovh/imgs/2023/05/08/f849889160c83bee.png"></p><ul><li>因为前面两字节固定为10，故可指派网络数量为2^16-2^</li><li>可分配的IP地址数量为：2^16^ - 2</li></ul></li><li><p><strong>C类地址</strong></p><p><img src="https://s3.bmp.ovh/imgs/2023/05/08/5989fca80a7a1239.png"></p><ul><li>因为前面两字节固定为110，故可指派网络数量为2^24-3^</li><li>可分配的IP地址数量为：2^8^ - 2</li></ul></li><li><p>D类地址</p><p><img src="https://s3.bmp.ovh/imgs/2023/05/08/4797322b5bcee7bf.png"></p></li><li><p>E类地址</p><p><img src="https://s3.bmp.ovh/imgs/2023/05/08/5403222c4c9190bc.png"></p></li></ul><h4 id="划分子网"><a href="#划分子网" class="headerlink" title="划分子网"></a>划分子网</h4><ul><li>新增网络申请新的网络号需要等待更多的时间和花费更多的费用，会增加其他路由器中路由表记录的数量，会浪费原有网络号中剩余的大量IP地址</li><li>为了解决上述问题，考虑从主机号中借用一部分比特用作子网号</li><li>32比特的子网掩码可以表明分类IP地址的主机号部分被借用了几个比特作为子网号<ul><li>子网掩码使用<code>连续的比特1</code>来对应网络号和子网号</li><li>子网掩码使用<code>连续的比特0</code>来对应主机号</li><li>将划分子网的<code>IPv4地址</code>与其相应的<code>子网掩码</code>进行<code>逻辑与</code>运算就可以得到IPv4地址所在的子网的网络地址</li></ul></li></ul><p><img src="https://s3.bmp.ovh/imgs/2023/05/08/37b7f5a6056d01d2.png" alt="计算方法"></p><ul><li>给定一个分类的IP地址和其相应的子网掩码，就可知道子网的划分细节：<ul><li>划分出的子网数量</li><li>每个子网可分配的IP地址数量</li><li>每个子网的网络地址和广播地址</li><li>每个子网可分配的最小和最大地址</li></ul></li></ul><p>举例说明：</p><p><img src="https://s3.bmp.ovh/imgs/2023/05/08/22f79c6876b5a78a.png" alt="示例"></p><p><img src="https://s3.bmp.ovh/imgs/2023/05/08/f2e991a0ed603d29.png"></p><ul><li>默认子网掩码是指在未划分子网的情况下使用的子网掩码<ul><li>A类：255.0.0.0</li><li>B类：255.255.0.0</li><li>C类：255.255.255.0</li></ul></li></ul><h4 id="无分类编址"><a href="#无分类编址" class="headerlink" title="无分类编址"></a>无分类编址</h4><ul><li><p>为了解决IP地址紧缺的问题，提出了无分类编址的方法</p></li><li><p>无分类域间路由选择CIDR</p><ul><li>消除了传统A类、B类和C类地址，以及划分子网的概念</li><li>更加有效地分配IPv4地址空间</li><li>利用斜线记法，即在IPv4地址后加上“&#x2F;”，然后在斜线后写上网络前缀所占的比特数量，如<code>35.230.64.0/21（表示网络前缀占用21比特）</code></li><li>CIDR实际上是将网络前缀都相同的连续的IP地址组成一个“<code>CIDR地址块</code>”</li><li>只需要知道CIDR地址块中的任何一个地址，就可以知道该地址块的全部细节（如：地址块的最小&#x2F;大地址，地址块中的地址数量，地址块聚合某类网络（A、B、C类）的数量，地址掩码或称子网掩码）</li></ul><p><img src="https://s3.bmp.ovh/imgs/2023/05/08/b6a520ae343289d3.png" alt="CIDR示例"></p></li><li><p>路由聚合（构造超网）的方法就是找<code>共同前缀</code></p></li><li><p>网络前缀越长，地址块越小，路由越具体</p></li><li><p>若路由器查表转发分组时发现有多条路由可选，则选择网络前缀最长的那条，称为<code>最长前缀匹配</code></p></li></ul><p><img src="https://s3.bmp.ovh/imgs/2023/05/08/878f8987403a7be2.png" alt="共同前缀示例"></p><h3 id="IPv4地址应用规划"><a href="#IPv4地址应用规划" class="headerlink" title="IPv4地址应用规划"></a>IPv4地址应用规划</h3><ol><li>定长子网掩码FLSM（Fixed Length Subnet Mask）<ul><li>利用同一个子网掩码来划分子网</li><li>子网划分方式不灵活：只能划分出2^n^个子网（n从主机号部分借用的用来做子网号的比特数量）</li><li>每个子网分配的IP地址数量相同，容易浪费</li></ul></li><li>变长子网掩码VLSM（Variable Length Subnet Mask）<ul><li>使用不同的子网掩码来划分子网</li><li>划分灵活，可以按需分配</li><li>每个子网分配的IP地址数量可以不同，尽可能减少对IP地址的浪费</li></ul></li></ol><h3 id="IPv4地址与MAC地址"><a href="#IPv4地址与MAC地址" class="headerlink" title="IPv4地址与MAC地址"></a>IPv4地址与MAC地址</h3><ul><li><p>IP地址是因特网上的主机和路由器使用的地址，用于标识两部分信息：</p><ul><li>网络编号：标识因特网上数以百万计的网络</li><li>主机编号：标识同一网络上不同主机（或路由器各接口）</li></ul></li><li><p>从网络体系结构看</p><p><img src="https://s3.bmp.ovh/imgs/2023/05/13/2884622a3b8f9e44.png" alt="网络层首部需要添加IP源地址和目的地址，链路层首部需要添加MAC源地址和目的地址"></p></li><li><p>数据包转发过程中，IP源地址和目的地址始终保持不变，而MAC地址逐个链路（网络）改变</p><p><img src="https://s3.bmp.ovh/imgs/2023/05/13/9058ca6e77eb5f06.png" alt="IP地址与MAC地址的转变情况"></p></li></ul><h3 id="地址解析协议ARP"><a href="#地址解析协议ARP" class="headerlink" title="地址解析协议ARP"></a>地址解析协议ARP</h3><p>如何通过IP地址找到对应的MAC地址——<strong>ARP协议</strong></p><ul><li>源主机在自己的<code>ARP高速缓存表</code>中查找目的主机的IP地址所对应的MAC地址，若找到则封装MAC帧进行发送，否则发送<code>ARP请求（封装在MAC帧中）</code></li><li>目的主机若收到ARP请求，会将源主机的IP地址和MAC地址记录到自己的ARP高速缓存表中，然后给源主机发送ARP响应（封装在MAC帧中），ARP响应中包含目的主机的IP地址和MAC地址</li><li>源主机收到ARP响应后，同样将其记录到缓存表中，然后就可以根据表中内容进行MAC帧发送</li><li>ARP作用范围：逐段链路或逐个网络，不能跨网络</li><li>ARP无安全验证机制，故存在ARP欺骗问题</li></ul><h3 id="IP数据包发送和转发过程"><a href="#IP数据包发送和转发过程" class="headerlink" title="IP数据包发送和转发过程"></a>IP数据包发送和转发过程</h3><p>主机发送IP数据报：</p><ul><li>判断目的主机是否与自己同处一个网络<ul><li>若同在，则直接交付</li><li>否则，则间接交付，传输给主机所在网络的默认网关（路由器），再由默认网关帮忙转发</li></ul></li></ul><p>路由器转发IP数据报： </p><ul><li>检查IP数据报的首部是否出错<ul><li>若出错，则直接丢弃该IP数据报并通告源主机</li><li>否则进行转发</li></ul></li><li>根据IP数据报的目的地址在路由表中查找匹配的条目<ul><li>若找到匹配项，则根据要求转发</li><li>否则丢弃并通告源主机</li></ul></li></ul><h3 id="IPv4数据报的首部格式"><a href="#IPv4数据报的首部格式" class="headerlink" title="IPv4数据报的首部格式"></a>IPv4数据报的首部格式</h3><p><img src="https://s3.bmp.ovh/imgs/2023/05/13/e114e74eafd24dfd.png"></p><ul><li>版本：占4比特，表示IP协议版本。通信双方使用的IP协议版本需一致，目前广泛使用的是版本4（IPv4）</li><li><strong>首部长度</strong>：占4比特，表示IP数据报首部的长度。该字段取值以4字节为单位</li><li>可选字段：长度从1字节到40字节不等，很少被使用</li><li>填充：确保首部长度为4字节的整数倍，使用全零进行填充</li><li>区分服务：占8比特，很少用</li><li><strong>总长度</strong>：占16比特，表示IP数据报的总长度（首部+数据载荷）</li><li><strong>标识</strong>：占16比特，属于同一个数据报的各分片数据报应具有相同标识。IP软件维持一个计数器，每产生一个数据报，计数器值增加并将其赋给标识字段</li><li><strong>标志</strong>：占3比特。<ul><li>DF位：1表示不允许分片，0表示允许分片</li><li>MF位：1表示后面还有分片，0表示当前是最后一个分片</li><li>保留位必须为0</li></ul></li><li><strong>片偏移</strong>：占13比特，指出分片数据报的数据载荷部分偏移其在源数据报的位置有多少个单位，以8个字节为单位</li></ul><p><img src="https://s3.bmp.ovh/imgs/2023/05/13/bab9c2c3a8758aef.png" alt="分片示例"></p><ul><li>生存时间：占8比特，以跳数为单位，路由器转发IP数据报时，将IP数据报首部中的该字段值减1，若不为0则转发，否则丢弃。作用是防止IP数据报在网络中永久兜圈</li></ul><p><img src="https://s3.bmp.ovh/imgs/2023/05/13/1f2328e920c6da16.png" alt="路由环路示例"></p><ul><li>协议：占8比特，指明IPv4数据报的数据部分是何种协议数据单元</li><li>首部检验和：占16比特，用来检测首部在传输过程中是否出现差错</li><li>源IP地址和目的IP地址：各占32比特，用来填写发送该IP数据报的源主机的IP地址和接收该IP数据报的目的主机的IP地址</li></ul><h2 id="路由选择协议"><a href="#路由选择协议" class="headerlink" title="路由选择协议"></a>路由选择协议</h2>]]></content>
      
      
      <categories>
          
          <category> 关于学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络基础系列（二）</title>
      <link href="/2023/06/01/ji-suan-ji-wang-luo-ji-chu-xi-lie-er/"/>
      <url>/2023/06/01/ji-suan-ji-wang-luo-ji-chu-xi-lie-er/</url>
      
        <content type="html"><![CDATA[<h1 id="第二章-物理层"><a href="#第二章-物理层" class="headerlink" title="第二章 物理层"></a>第二章 物理层</h1><h2 id="物理层基本概念"><a href="#物理层基本概念" class="headerlink" title="物理层基本概念"></a>物理层基本概念</h2><ul><li>物理层考虑的是怎样才能在连接各种计算机的传输媒体上传输数据比特流</li><li>物理层为数据链路层屏蔽了各种传输媒体的差异，使数据链路层只需要考虑如何完成本层的协议和服务，不必考虑网络具体的传输媒体是什么</li></ul><h2 id="数据通信相关术语"><a href="#数据通信相关术语" class="headerlink" title="数据通信相关术语"></a>数据通信相关术语</h2><ul><li>数据 传送信息的实体</li><li>信号 数据的电气或电磁表现，数据在传输过程中的存在形式</li><li><strong>码元</strong> <ul><li>用一个固定时长的信号波形（数字脉冲）表示一位K进制数字，代表不同离散数值的基本波形，该时长内的信号叫k（即码元离散状态个数）进制码元，而该时长称为<strong>码元宽度</strong>；1码元可以携带若干比特的信息量<ul><li>例如：二进制码元，只有两种不同状态的码元，一种代表0，一种代表1；即1码元携带1比特信息</li><li>4进制码元，则有四种不同状态，1码元携带2比特信息</li><li>X进制码元，则有X种不同状态，1码元携带log<del>2</del>X比特信息</li></ul></li></ul></li><li>信源 产生和发送数据的源头</li><li>信道 信号的传输媒介</li><li>信宿 接收数据的终点</li><li>基带信号 对应数字信号</li><li>宽带信号 对应模拟信号</li><li>速率 数据传输速率，单位时间内传输的数据量<ul><li>码元传输速率（波特率）  <strong>即一秒传输多少码元</strong><ul><li>单位时间内数字通信系统传输的码元个数或脉冲个数或信号变化次数，单位为波特（Baud），码元速率与进制数无关</li></ul></li><li>信息传输速率（信息速率&#x2F;比特率） <strong>即一秒传输多少比特</strong><ul><li>单位时间内数字通信系统传输的二进制码元个数（即比特数），单位是比特每秒（b&#x2F;s）</li></ul></li><li>两者数量关系<ul><li>若一码元携带<code>n</code>比特的信息量，则<code>M</code>波特率的码元传输速率对应信息传输速率为<code>M*n b/s</code></li></ul></li></ul></li></ul><h2 id="传输介质"><a href="#传输介质" class="headerlink" title="传输介质"></a>传输介质</h2><ul><li>双绞线</li><li>同轴电缆</li><li>光纤</li><li>无线传输介质</li></ul><h2 id="传输方式"><a href="#传输方式" class="headerlink" title="传输方式"></a>传输方式</h2><ul><li>串行传输与并行传输</li><li><strong>同步传输与异步传输</strong><ul><li>同步：各字节间没有间隔</li><li>异步：字节间存在间隔（不固定），但字节中的比特持续时间仍相同</li></ul></li><li>单工、半双工和全双工</li></ul><h2 id="编码与调制"><a href="#编码与调制" class="headerlink" title="编码与调制"></a>编码与调制</h2><p>把数据变换为数字信号的过程叫<strong>编码</strong></p><p>把数据变换为模拟信号的过程叫<strong>调制</strong></p><ol><li><strong>数字数据编码为数字信号</strong></li></ol><p><img src="https://s3.bmp.ovh/imgs/2023/04/22/77ba492ece64f9ee.png"></p><ul><li>归零编码（RZ）<ul><li>高电平为1，低电平为0，每个时钟周期中间均需要归零</li></ul></li><li>非归零编码（NRZ）<ul><li>高电平为1，低电平为0，无需归零，一个周期可全部用于传输数据</li></ul></li><li><strong>曼彻斯特编码</strong><ul><li>将码元分成两个相等的间隙，前一个间隔为高电平而后一个间隔为低电平表示1，相反则表示0；也可以采用相反的规定</li><li>每个码元中间都会出现电平的跳变，此跳变既可以作为时钟同步，也可以作为数据信号</li><li>以太网使用的便是此编码</li></ul></li><li>差分曼彻斯特编码<ul><li>若码元为1，则前半个码元的电平与上一码元的后半个码元电平一致；若为0，则相反</li><li>每个码元中间都会出现跳变，可实现自同步，抗干扰性较好</li><li>常用于局域网传输</li></ul></li></ul><ol start="2"><li><strong>数字数据调制为模拟信号</strong></li></ol><p><img src="https://s3.bmp.ovh/imgs/2023/04/22/aa28fc2d14cb2493.png"></p><ul><li>幅移键控（ASK） 调幅（AM）</li><li>频移键控（FSK） 调频（FM）</li><li>相移键控（PSK） 调相（PM）</li><li>正交振幅调制（QAM） 将ASK与PSK结合</li></ul><ol start="3"><li><strong>模拟数据编码为数字信号</strong></li></ol><ul><li>采样<ul><li>对模拟信号进行周期性扫描，然后把时间上连续的信号变成时间上离散的信号</li></ul></li><li>量化<ul><li>将离散的信号根据一定标准转化成离散的数字</li></ul></li><li>编码<ul><li>把量化的结果转为与之对应的二进制编码</li></ul></li></ul><ol start="4"><li>模拟数据调制为模拟信号</li></ol><h2 id="信道极限容量"><a href="#信道极限容量" class="headerlink" title="信道极限容量"></a>信道极限容量</h2><ol><li><p><strong>奈氏准则</strong></p><p>$理想低通信道下的极限数据传输速率 &#x3D; 2Wlog<del>2</del>V$  (单位b&#x2F;s)​</p><ul><li>W为理想低通信道的带宽</li><li>V为每个码元离散电平的数目，即多少种不同的码元</li></ul><p><img src="https://s3.bmp.ovh/imgs/2023/04/22/ecd63acffe6f17cc.png"></p></li><li><p><strong>香农定理</strong></p><p>$信道极限数据传输速率 &#x3D; Wlog<del>2</del>(1+S&#x2F;N)$  (单位b&#x2F;s)​</p><p>$信噪比 &#x3D; 10log<del>10</del>(S&#x2F;N)dB$</p><ul><li>W为信道带宽</li><li>S为信道所传输信号的平均功率</li><li>N为信道内部的高斯噪声功率</li><li>S&#x2F;N为信噪比</li></ul><p><img src="https://s3.bmp.ovh/imgs/2023/04/22/7d8f0a563102e122.png"></p></li></ol><p><img src="https://s3.bmp.ovh/imgs/2023/04/22/51d03383a016998c.png"></p><h2 id="信道复用技术"><a href="#信道复用技术" class="headerlink" title="信道复用技术"></a>信道复用技术</h2><ol><li>频分复用(FDM)</li><li>时分复用(TDM)</li><li>波分复用(WDM)</li><li>码分复用(CDM)</li></ol>]]></content>
      
      
      <categories>
          
          <category> 关于学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络基础系列（三）</title>
      <link href="/2023/06/01/ji-suan-ji-wang-luo-ji-chu-xi-lie-san/"/>
      <url>/2023/06/01/ji-suan-ji-wang-luo-ji-chu-xi-lie-san/</url>
      
        <content type="html"><![CDATA[<h1 id="第三章-数据链路层"><a href="#第三章-数据链路层" class="headerlink" title="第三章 数据链路层"></a>第三章 数据链路层</h1><h2 id="数据链路层的功能"><a href="#数据链路层的功能" class="headerlink" title="数据链路层的功能"></a>数据链路层的功能</h2><ol><li><p>为网络层提供服务</p><ul><li>无确认的无连接服务</li><li>有确认的无连接服务</li><li>有确认的面向连接服务</li></ul></li><li><p>链路管理 </p><p>连接的建立 -&gt; 传输帧 -&gt; 释放连接</p></li><li><p>帧定界</p><p>将一段数据的前后添加相应的首部和尾部，确定帧的界限</p></li><li><p>帧同步</p><p>接收方应能从接收到的二进制比特流中区分帧的起始和终止</p></li><li><p>透明传输</p><p>不管传的数据是什么样的比特组合，都应能在链路上传送，即避免把传输的数据误解为帧定界</p></li><li><p>差错控制</p><p>用以使发送方确定接收方是否正确收到由其发送的数据的方法</p></li></ol><h2 id="数据链路层三个重要问题"><a href="#数据链路层三个重要问题" class="headerlink" title="数据链路层三个重要问题"></a>数据链路层三个重要问题</h2><h3 id="封装成帧和透明传输"><a href="#封装成帧和透明传输" class="headerlink" title="封装成帧和透明传输"></a>封装成帧和透明传输</h3><ol><li><p>封装成帧 </p><p>封装成帧是指将数据链路层给上层交付的协议数据单元添加帧头和帧尾组成为帧</p><ul><li>帧头和帧尾有重要的控制信息，其中一个作用就是作为帧定界</li></ul></li><li><p>透明传输</p><p>数据链路层对上层交付的传输数据没有任何限制，就像链路层不存在一样</p><ul><li>字符填充法实现 插入转义字符</li><li>零比特填充法实现 插入比特0</li></ul></li></ol><p>为了提高帧的传输速率，帧的数据长度应尽可能大，但&lt;&#x3D;最大传送单元（MTU）</p><h3 id="差错控制"><a href="#差错控制" class="headerlink" title="差错控制"></a>差错控制</h3><ul><li><p>传输过程中1可能变成0，0也可能变成1，这就叫<strong>比特差错</strong></p></li><li><p>在一段时间内，传输错误的比特占所传输比特总数的比率叫误码率（BER）</p></li></ul><p>可以通过<code>检错编码</code>来检测传输过程中是否产生了比特差错，不过其只能判断是否出现错误，而无法确定错误位置，然后纠正错误。</p><ol><li><p>奇偶校验码</p><ul><li>在待发送的数据后面添加一位校验码，使整个数据（包括校验码在内）中“1”的个数为奇数（奇校验）或偶数（偶校验）</li><li>若有奇数个位发生误码，则奇偶性发生变化时即可判断出是否出现误码</li><li>若有偶数个位发生误码，则奇偶性不发生变化，无法判断是否出现误码（漏检）</li><li>该方法漏检率较高，不常用</li></ul></li><li><p>循环冗余码（CRC）</p><ul><li>收发双方约定一个<code>生成多项式G(x)</code></li><li>发送方基于待发送的数据和生成多项式计算差错检测码（冗余码），将其添加到待发送数据后面一起传输</li><li>接收方通过生成多项式计算收到的数据是否产生误码</li></ul><p><img src="https://s3.bmp.ovh/imgs/2023/04/25/db2859bc607b82db.png" alt="计算方法"></p></li></ol><p><img src="https://s3.bmp.ovh/imgs/2023/04/25/9cfb42b7a2f6e339.png" alt="计算示例（除法做的是异或运算）"></p><p>循环冗余码（CRC）的漏检率较低，且易于用硬件实现，因此被广泛用于数据链路层</p><h3 id="可靠传输"><a href="#可靠传输" class="headerlink" title="可靠传输"></a>可靠传输</h3><ul><li>数据链路层向上提供的服务类型<ul><li>不可靠传输服务：仅仅丢弃有误码的帧，其他什么也不做</li><li>可靠传输服务：想办法实现发送端发送什么，接收端就接收什么</li></ul></li><li>一般情况下，有线链路误码率较低，为减少开销，并不要求向上层提供可靠传输服务；而无线链路误码率较高，因此需要向上提供可靠传输服务</li><li>传输差错包括<code>分组丢失</code>，<code>分组失序</code>，<code>分组重复</code>和<code>比特差错</code>等</li><li>可靠传输服务并不局限在数据链路层，其他各层均可选择实现可靠传输</li><li>可靠传输的开销较大，可根据实际情况选择性实现</li></ul><p>下面介绍三种可靠传输协议机制：</p><ol><li><strong>停止-等待协议SW</strong></li></ol><ul><li><p>确认与否认</p><p><img src="https://s3.bmp.ovh/imgs/2023/04/25/bf387edb0887df6a.png"></p></li><li><p>超时重传 一般设定重传时间为略大于“从发送方到接收方的平均往返时间”</p><p><img src="https://s3.bmp.ovh/imgs/2023/04/25/4e0d4bf8c66ab6f8.png"></p></li><li><p>确认丢失 给发送数据添加对应的编号</p><p><img src="https://s3.bmp.ovh/imgs/2023/04/25/6d0858725d8ab2be.png"></p></li><li><p>确认迟到 给确认添加对应的编号</p><p><img src="https://s3.bmp.ovh/imgs/2023/04/25/f7048e1132ce4d65.png"></p></li></ul><p>注意事项：</p><ul><li>对于误码率较高的点对点链路，为了能够让发送方尽早重传，可以给发送方发送NAK分组，这样无需等待超时重传</li><li>为了让接收方判断收到的数据是否重复，需要给数据分组添加编号，由于停止-等待协议的特性，因此只需要1个比特就够了，即0和1</li><li>为了让发送方判断收到的确认是否重复，同样也需要给ACK分组添加编号，但数据链路层上基本不会发生确认迟到，因此可以无需编号</li></ul><p>信道利用率U &#x3D; T<del>D</del> &#x2F; T<del>D</del> + RTT + T<del>A</del></p><p><img src="https://s3.bmp.ovh/imgs/2023/04/25/8c6703115429636e.png"></p><ul><li>T<del>D</del> 发送方耗费的发送时延</li><li>RTT 往返时间</li><li>T<del>A</del> 接收方返回耗费的发送时延（因比T<del>D</del>要小的多，常忽略不计）</li></ul><ol start="2"><li><strong>回退N帧协议GBN</strong></li></ol><p>在流水线传输的基础上利用发送窗口来限制发送方连续发送数据分组的数量，是一种连续ARQ协议；在协议工作过程中发送窗口和接收窗口不断向前滑动，因此这类协议又称为滑动窗口协议</p><ul><li><p>发送窗口的尺寸记为<code>WT</code>，其取值范围是：1 &lt; WT &lt;&#x3D; 2^n^ - 1 （n表示比特数）</p><p><img src="https://s3.bmp.ovh/imgs/2023/04/26/51b0e1a23b3f186a.png"></p></li><li><p>接收窗口的尺寸记为<code>WR</code>，对于回退N帧协议，其取值只能为 1</p><p><img src="https://s3.bmp.ovh/imgs/2023/04/26/5b9608e0d8d6b83e.png"></p></li><li><p><code>累计确认</code>：接收方不一定要对收到的数据分组进行逐个发送确认，而是可以根据实际情况在收到多个数据分组后，对按序到达的最后一个数据分组进行发送确认。如ACKn表示数据分组n及其之前的数据分组均已收到。因此确认分组丢失后，发送方也可能不必超时重传</p></li><li><p>发送方收到重复的确认就可以知道之前的传输出现了差错，由此可以不需要等待超时时间即可立即重传</p></li><li><p>当WT超出其上限时，会造成接收方无法分辨新旧数据分组</p></li></ul><p><img src="https://s3.bmp.ovh/imgs/2023/04/26/378e1920f01b8d4a.png" alt="总结"></p><ul><li>当信道的传输质量很差导致误码率很高的时候，回退N帧协议并不一定优于停止-等待协议</li></ul><ol start="3"><li><strong>选择重传协议</strong></li></ol><p>由于回退N帧协议的接收方窗口尺寸WR只能为1，只能按序接收数据分组，因此当其中一个数据分组出现误码时，会导致其后续的数据分组都会被丢弃然后超时重传，这样极大浪费了通信资源。</p><p>若有办法只重传存在误码的数据分组，其效率将会得到提高。因此接收窗口尺寸WR应大于1，以便可以先接收失序到达但其本身并无误码的数据分组，等到所有分组全部到齐后再传输到上层，这就是<code>选择重传协议</code></p><ul><li>为了能够使发送方只重传出现误码的数据分组，接收方不能再采用累计确认，只能进行逐个确认</li><li>发送方的发送窗口尺寸WT必须满足：1 &lt; WT &lt;&#x3D; 2^(n-1)^<ul><li>WT &#x3D; 1，则是停止-等待协议</li><li>WT超出最大范围，则接收方无法区分新旧数据分组</li></ul></li><li>接收方的接收窗口尺寸WR必须满足：1 &lt; WR &lt;&#x3D; WT<ul><li>WR &#x3D; 1，则是回退N帧协议</li><li>WR 超出最大范围，无意义</li></ul></li></ul><p><img src="https://s3.bmp.ovh/imgs/2023/04/26/e553ccdafe7c237e.png" alt="总结"></p><h2 id="点对点协议PPP"><a href="#点对点协议PPP" class="headerlink" title="点对点协议PPP"></a>点对点协议PPP</h2><ul><li><p>目前使用最广泛的<strong>点对点数据链路层协议</strong></p></li><li><p>PPP协议为在点对点链路传输各种协议数据报提供了一个标准方法，主要有三部分组成：</p><ul><li>对各种协议数据报的封装方法（封装成帧）</li><li>链路控制协议LCP 用于建立、配置和测试数据链路的连接</li><li>一套网络控制协议NCPs 其中的每一个协议支持不同的网络层协议</li></ul></li><li><p>PPP帧的透明传输</p><ul><li>面向字节的异步链路使用字节填充法（插入转义字符）</li><li>面向比特的同步链路是使用比特填充法（插入零比特）</li></ul></li><li><p>PPP协议工作状态</p><p><img src="https://s3.bmp.ovh/imgs/2023/04/27/8aaefe1f729d8276.png"></p></li></ul><h2 id="共享式以太网"><a href="#共享式以太网" class="headerlink" title="共享式以太网"></a>共享式以太网</h2><h3 id="网络适配器"><a href="#网络适配器" class="headerlink" title="网络适配器"></a>网络适配器</h3><ul><li>将计算机连接到以太网需要使用相应的网络适配器，也叫<code>网卡</code></li><li>计算机内部中，网卡与CPU之间的通信，一般是通过计算机主板上的I&#x2F;O总线以<code>并行传输</code>的方式进行</li><li>网卡与外部以太网（局域网）之间的通信，一般是通过传输媒体（如光纤，同轴电缆）以<code>串行</code>方式进行</li><li>网卡其中一个重要功能就是要进行并行传输和串行传输的转换</li><li>为了网卡能够正常工作，一般还需要安装相应的驱动，驱动程序的作用是负责驱动网卡发送和接收帧</li></ul><p><img src="https://s3.bmp.ovh/imgs/2023/04/27/1ce89b800bffa3ee.png"></p><h3 id="MAC地址"><a href="#MAC地址" class="headerlink" title="MAC地址"></a>MAC地址</h3><ul><li><p>一般被固化在网卡的电可擦可编程只读存储器EEPROM中，因此也叫<strong>硬件地址（物理地址）</strong></p></li><li><p>需要注意的是物理地址属于数据链路层范畴而非物理层</p></li><li><p>一般情况下，普通用户计算机通常包含两块网卡</p><ul><li>接入有线局域网的以太网卡</li><li>接入无线局域网的WIFI网卡</li></ul></li><li><p>每块网卡都有一个全球唯一的MAC地址</p></li><li><p>交换机和路由器具有更多的网络接口，所以会有更多的MAC地址</p></li><li><p>MAC地址是对网络上各接口的唯一标识，不是对网络上各设备的唯一标识</p></li></ul><p><img src="https://s3.bmp.ovh/imgs/2023/04/27/2cf02c9ce28e5325.png"></p><h3 id="CSMA-x2F-CD协议"><a href="#CSMA-x2F-CD协议" class="headerlink" title="CSMA&#x2F;CD协议"></a>CSMA&#x2F;CD协议</h3><ul><li><p>共享总线以太网有天然的广播特性，总线上连接有多个站点，当某个站点发送帧时，总线资源会被该站点独占，若此时其他站点也在总线上发送帧，就会产生<code>信号碰撞</code></p><p><img src="https://s3.bmp.ovh/imgs/2023/04/27/46c182338e144109.png"></p></li><li><p>为解决碰撞问题，就采用了CSMA&#x2F;CD协议，即<code>载波监听多址接入/碰撞检测协议</code></p></li></ul><p><img src="https://s3.bmp.ovh/imgs/2023/04/27/9c157cab0e857df5.png"></p><ul><li>载波监听到总线空闲的时候，总线实际上可能并不空闲</li><li>CSMA&#x2F;CD协议只是尽量避免碰撞，但无法实现完全不碰撞</li><li>使用该协议时，由于正在发送帧的站点必须边发送帧边检测碰撞，所以站点不可能一边发送一边接受的，因此只能进行半双工通信</li></ul><h3 id="共享式以太网的争用期"><a href="#共享式以太网的争用期" class="headerlink" title="共享式以太网的争用期"></a>共享式以太网的争用期</h3><ul><li>站点从发送帧开始，最多经过时长2τ（即δ-&gt;0）就可以检测出所发送的帧是否遇到了碰撞</li><li>共享总线以太网的端到端往返时间<code>2τ</code>被称为<code>争用期</code>或<code>碰撞窗口</code></li><li>若在时间2τ内未检测到碰撞就可以认定该次发送不再会发生碰撞</li></ul><p><img src="https://s3.bmp.ovh/imgs/2023/04/28/85b95baf13205ac8.png"></p><h3 id="共享式以太网的最小帧长和最大帧长"><a href="#共享式以太网的最小帧长和最大帧长" class="headerlink" title="共享式以太网的最小帧长和最大帧长"></a>共享式以太网的最小帧长和最大帧长</h3><ol><li>最小帧长</li></ol><ul><li><p>最小帧长 &#x3D; 数据传输速率 * 争用期2τ</p></li><li><p>为了确保共享总线以太网上的每个站点在发送完一个完整的帧之前能够检测出是否发生了碰撞，帧的发送时延就不能少于共享总线以太网端到端的往返时间，即2τ</p></li><li><p>对于10Mb&#x2F;s的共享总线以太网，其争用期2τ的值规定为51.2μs，因此其最小帧长为512b，即64B</p></li><li><p>若遭遇碰撞，则一定发生在帧的前64B之内，因此，若接收点收到长度小于64B的帧，就可以判定这是一个遭遇了碰撞而异常终止的无效帧，将其丢弃即可</p></li></ul><ol start="2"><li>最大帧长</li></ol><ul><li>一般来说，帧的数据载荷长度应远大于帧首部和尾部的总长度，这样可以提升帧的传输效率</li><li>若不限制数据载荷长度的上限，令帧的长度过长，也会产生一些问题，例如长期占用总线，某站点缓冲区溢出等</li></ul><p><img src="https://s3.bmp.ovh/imgs/2023/04/28/f1dd310ae5692084.png"></p><h3 id="共享式以太网的退避算法"><a href="#共享式以太网的退避算法" class="headerlink" title="共享式以太网的退避算法"></a>共享式以太网的退避算法</h3><ul><li>又称截断二进制指数退避算法</li><li>退避时间 &#x3D; 基本退避时间（即争用期2τ） * 随机数r（r从离散的整数集合中[0,1…2^k^-1]随机挑选一个数，k &#x3D; min[重传次数, 10]）</li></ul><p><img src="https://s3.bmp.ovh/imgs/2023/04/28/65780bdc31adfa87.png"></p><ul><li>若连续发生多次的碰撞，表明可能有多个站点在竞争信道，使用上述的退避算法可以令重传需要推迟的平均时间随着重传次数增加而延长，从而减小发生碰撞的概率</li><li>当重传次数达16次仍未成功时，应放弃重传并向高层汇报</li></ul><h3 id="共享式以太网的信道利用率"><a href="#共享式以太网的信道利用率" class="headerlink" title="共享式以太网的信道利用率"></a>共享式以太网的信道利用率</h3><p><img src="https://s3.bmp.ovh/imgs/2023/04/28/0d22b9a2ecb137c7.png"></p><h3 id="网桥"><a href="#网桥" class="headerlink" title="网桥"></a>网桥</h3><ul><li><p>利用网桥在数据链路层扩展共享式以太网</p><ul><li>利用网桥可将两个或多个的以太网连接起来，成为一个覆盖范围更大的以太网，而原来的每个以太网都称为一个<strong>网段</strong></li></ul><p><img src="https://s3.bmp.ovh/imgs/2023/04/28/2c6443131d1a02a5.png"></p></li><li><p>网桥可以识别帧的结构</p></li><li><p>可以根据帧首部中的目的Mac地址和网桥自身的帧转发表来转发或丢弃所收到的帧</p></li></ul><ol><li>A向D发送单播帧（不同网段）</li></ol><ul><li>同一网段的根据MAC地址发现不是自己的帧，将其丢弃</li><li>到达网桥处的帧根据网桥转发表找到转发接口</li><li>通过接口顺利转发到目的站点</li></ul><p><img src="https://s3.bmp.ovh/imgs/2023/04/28/2fd8576e579f9023.png"></p><ol start="2"><li>A向C发送单播帧（同一网段）</li></ol><ul><li>同一网段的根据MAC地址发现是否属于自己的帧，是则接收，否则丢弃</li><li>到达网桥处的帧根据网桥转发表找到转发接口，发现无需转发，因此丢弃</li></ul><p><img src="https://s3.bmp.ovh/imgs/2023/04/28/fa55e50511051210.png"></p><ol start="3"><li>发送广播帧</li></ol><ul><li>所有站点均会接收该广播帧</li><li>到达网桥处的帧无需查找转发表，而是会通过除接收该帧接口外的其他接口转发该广播帧</li></ul><p><img src="https://s3.bmp.ovh/imgs/2023/04/28/c746a1e4c9dca479.png"></p><h3 id="透明网桥的自学习和转发帧"><a href="#透明网桥的自学习和转发帧" class="headerlink" title="透明网桥的自学习和转发帧"></a>透明网桥的自学习和转发帧</h3><ul><li><p>透明网桥通过<code>自学习</code>算法建立转发表</p></li><li><p>透明网桥中的<code>透明</code>，是指以太网中各网桥对于各站点而言是看不见的</p></li><li><p>透明网桥通过自学习算法基于以太网中各站点间的相互通信逐步建立起自己的转发表</p><ul><li>网桥收到帧后进行登记（即自学习）。登记内容为帧的源MAC地址和进入网桥的接口号</li><li>网桥根据帧的目的MAC地址和网桥转发表对帧进行转发，其可能出现以下三种情况<ol><li><code>明确转发</code>：网桥清楚知道应从哪个接口进行转发</li><li><code>盲目转发</code>：网桥转发表中无登记，网桥无法知道应从哪个接口进行转发，因此只能从进入接口外的其他所有接口都进行转发</li><li><code>丢弃</code>：网桥知道无需转发帧，直接丢弃</li></ol></li></ul></li><li><p>注意事项：</p><ul><li>若网桥收到有误码的帧，直接丢弃</li><li>若网桥收到无误码的广播帧，无需查表，直接从进入接口外的其他所有接口进行转发</li><li>转发表中的每条记录都是有有效时间的，到期自动删除。因为各站点MAC地址和网桥接口的对应关系并不是永久性的，例如某个站点更换了网卡，其MAC地址就会改变</li></ul><p><img src="https://s3.bmp.ovh/imgs/2023/04/29/f61486d1bd99ed0f.png"></p></li></ul><h3 id="透明网桥的生成树协议STP"><a href="#透明网桥的生成树协议STP" class="headerlink" title="透明网桥的生成树协议STP"></a>透明网桥的生成树协议STP</h3><ul><li><p>为了提高以太网的可靠性，有时需要在两个以太网之间使用多个透明网桥来提供冗余链路</p></li><li><p>在增加冗余链路提高以太网可靠性的同时，却给网络引入了环路</p></li><li><p>网络中的广播帧将在环路中永久兜圈，造成广播帧充斥整个网络，浪费了网络资源，使得网络中各主机间无法正常通信</p></li><li><p>为避免广播帧在环路中兜圈，透明网桥利用<code>生成树协议（STP）</code>，可以在增加冗余链路提高网络可靠性的同时，又避免环路带来的问题</p><ul><li>不管网桥之间连接成了怎样复杂的带环拓扑，网桥之间通过交互网桥协议单元（BPDU），找出原网络拓扑的一个连通子集（即生成树），在这个子集里整个连通的网络不存在环路</li></ul><p><img src="https://s3.bmp.ovh/imgs/2023/04/29/f4e7e6c1b9151972.png"></p><ul><li>当首次连接网桥或网络拓扑发生变化时（认为改变或出现故障），网桥都会重新构造生成树，以确保网络的连通</li></ul></li></ul><p><img src="https://s3.bmp.ovh/imgs/2023/04/29/676ac6bf7ff548a7.png"></p><h2 id="交换式以太网"><a href="#交换式以太网" class="headerlink" title="交换式以太网"></a>交换式以太网</h2><ul><li>仅使用交换机而不使用集线器的以太网就是交换式以太网</li></ul><p><img src="https://s3.bmp.ovh/imgs/2023/04/29/ee160e14618cb0d2.png"></p><h3 id="以太网交换机"><a href="#以太网交换机" class="headerlink" title="以太网交换机"></a>以太网交换机</h3><ul><li>本质上是多接口的网桥</li><li>交换机的每个接口可以连接计算机，也可以连接集线器或另一个交换机<ul><li>当连接的是计算机或交换机时，工作在全双工方式，并能在自身内部同时连通多对接口，无需使用CSMA&#x2F;CD协议</li><li>当连接的是集线器时，工作在半双工方式，需要使用CSMA&#x2F;CD协议</li></ul></li><li>一般交换机都采用“存储转发”方式；为减少转发时延，某些交换机采用了直通交换方式</li><li>采用<code>直通交换</code>方式的交换机，在接收帧的同时就立即按帧的目的MAC地址决定该帧的转发接口，然后通过其内部基于硬件的交叉矩阵进行转发，而不必进行缓存<ul><li>直通交换时延非常小</li><li>直通交换不检查差错就直接转发出去，有可能转发一些无用帧</li></ul></li></ul><h2 id="共享式以太网与交换式以太网的对比"><a href="#共享式以太网与交换式以太网的对比" class="headerlink" title="共享式以太网与交换式以太网的对比"></a>共享式以太网与交换式以太网的对比</h2><ul><li><p>本质上可以理解为集线器与交换机的对比</p><ul><li>集线器扩大了广播域，扩大了碰撞域</li></ul><p><img src="https://s3.bmp.ovh/imgs/2023/04/29/fd13bc0be4f367d0.png"></p><ul><li>交换机扩大了广播域，隔离了碰撞域</li></ul><p><img src="https://s3.bmp.ovh/imgs/2023/04/29/7ca59bffa42f4128.png"></p></li><li><p>交换式以太网网络性能远高于共享式以太网，所以集线器早已被交换机替代</p></li></ul><h2 id="以太网MAC帧格式"><a href="#以太网MAC帧格式" class="headerlink" title="以太网MAC帧格式"></a>以太网MAC帧格式</h2><p><img src="https://s3.bmp.ovh/imgs/2023/05/04/8fe9a89c0a185475.png"></p><p>接收方可能收到的无效MAC帧包括：</p><ul><li>MAC帧长度不是整数个字节</li><li>通过MAC帧的FCS字段的值检测出帧有误码</li><li>MAC帧的长度不在64~1518字节之间</li></ul><p>接收方收到无效的MAC帧时，就简单将其丢弃，以太网的数据链路层没有重传机制</p><h2 id="虚拟局域网VLAN"><a href="#虚拟局域网VLAN" class="headerlink" title="虚拟局域网VLAN"></a>虚拟局域网VLAN</h2><p>VLAN（Virtual Local Area Network）是一种将局域网内的设备划分为与物理位置无关的逻辑组技术，这些逻辑组有某些共同的需求</p><h3 id="实现机制"><a href="#实现机制" class="headerlink" title="实现机制"></a>实现机制</h3><ul><li>IEEE 802.1Q帧（Dot One Q帧）对以太网的MAC帧格式进行了扩展，插入了4字节的VLAN标记</li></ul><p><img src="https://s3.bmp.ovh/imgs/2023/05/04/2578a4062e217fd5.png"></p><ul><li><p>VLAN标记的最后12比特称为VLAN标识符<code>VID</code>，其唯一标志了以太网帧属于哪个VLAN</p><ul><li>VID取值0~4095</li><li>0和4095都不用来表示VLAN，故用于表示VLAN的有效取值范围为1~4094</li></ul></li><li><p>802.1Q帧是由交换机来处理的，而不是用户主机来处理的</p><ul><li>当交换机收到普通的以太网帧时，会将其插入4字节的VLAN标记转变为802.1Q帧，称为“<code>打标签</code>”</li><li>当交换机转发802.1Q帧时，可能会删除其4字节VLAN标记转变为普通以太网帧，称为“<code>去标签</code>”</li></ul></li><li><p>交换机端口类型</p><ul><li><strong>Access</strong><ul><li>连接用户计算机</li><li>只能属于一个VLAN</li><li>PVID与端口所属VLAN的ID相同，默认为1</li><li>接收处理：一般只接收未打标签的普通以太网帧，并给其打标签</li><li>发送处理：若帧中VID等于端口PVID，则去标签后转发；否则丢弃</li></ul></li></ul><p><img src="https://s3.bmp.ovh/imgs/2023/05/05/5f2b4624de67676c.png" alt="主机A发送广播"></p><ul><li><p><strong>Trunk</strong></p><ul><li>交换机之间或交换机与路由器之间的连接</li><li>可以属于多个VLAN</li><li>用户可以设置PVID，默认为1</li><li>接收处理：<ul><li>接收已打标签的帧</li><li>接收未打标签的帧，根据端口的PVID值给帧打标签</li></ul></li><li>发送处理：<ul><li>帧中VID等于端口PVID，则去标签后转发</li><li>不等则直接转发</li></ul></li></ul><p><img src="https://s3.bmp.ovh/imgs/2023/05/05/ec6763971abb6553.png" alt="主机C发送广播"></p></li><li><p><strong>Hybrid</strong></p><ul><li><p>交换机之间、交换机与路由器、交换机与用户计算机之间的连接</p></li><li><p>可以属于多个VLAN</p></li><li><p>用户可以设置PVID，默认为1</p></li><li><p>接收处理：</p><ul><li>接收已打标签的帧</li><li>接收未打标签的帧，根据端口的PVID值给帧打标签</li></ul></li><li><p>发送处理：</p><ul><li>查看数据帧中VID是否在端口的去标签列表中<ul><li>若存在，则去标签后转发</li><li>不存在，则直接转发</li></ul></li></ul><p><img src="https://s3.bmp.ovh/imgs/2023/05/05/8223c8db7036bd05.png" alt="主机A向主机B发送广播"></p></li></ul></li></ul></li></ul><h2 id="无线局域网WLAN"><a href="#无线局域网WLAN" class="headerlink" title="无线局域网WLAN"></a>无线局域网WLAN</h2><p>WLAN（Wireless Local Area Network）</p><h3 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h3><ol><li><p>有固定基础设施的802.11无线局域网</p><ul><li>AP：Access Point 接入点</li><li>BSS：Basic Service Set 基础服务集</li></ul><p><img src="https://s3.bmp.ovh/imgs/2023/05/05/0ad81cba7458174f.png"></p></li><li><p>无固定基础设施移动自组织网络</p><p>自组织网络没有基本服务集中的AP，而是由一些平等状态的移动站相互通信组成的临时网络，各结点地位平等，中间结点均为转发结点，因此都具有路由器的功能</p><p><img src="https://s3.bmp.ovh/imgs/2023/05/05/f7902298dd9430ce.png"></p></li></ol><h3 id="CSMA-x2F-CA协议"><a href="#CSMA-x2F-CA协议" class="headerlink" title="CSMA&#x2F;CA协议"></a>CSMA&#x2F;CA协议</h3><p>802.11无线局域网采用了CSMA&#x2F;CA协议，即<code>载波监听多址接入/碰撞避免</code></p><p>注意的是CA并不能避免所有碰撞，而是尽量减少发生碰撞的概率</p><h4 id="基本工作原理"><a href="#基本工作原理" class="headerlink" title="基本工作原理"></a>基本工作原理</h4><ul><li><p>等待DIFS：主要是考虑到可能有其他站的高优先级帧需要发送</p></li><li><p>等待SIFS：短帧间间隔。</p></li><li><p>NAV：指出了完成这次帧的传送且信道转入空闲状态所需的时间</p></li></ul><p>目的站收到源站发送的数据帧后，等待SIFS间隔后发送确认帧，这期间信道忙，其他站要发送只能推迟;当该次传输完成后，其他站需要等待DIFS间隔和随机退避时间后再发送帧</p><p><img src="https://s3.bmp.ovh/imgs/2023/05/06/6e5eaabe81901f3c.png" alt="帧发送过程"></p><p>为了进一步降低发生碰撞的概率，802.11无线局域网允许源站对信道进行<code>预约</code></p><ul><li>RTS：短的控制帧，包括源地址，目的地址和本次通信（包括目的站发回确认帧所需的时间）所需的持续时间</li><li>CTS：短的响应控制帧，包括本次通信所需的持续时间</li></ul><p>RTS若发生碰撞，源站就不可能接收到CTS帧，此时源站就会执行退避算法重传RTS帧；虽然进行信道预约会带来额外的开销，但由于两个帧都很短，且发生碰撞概率，碰撞产生及其自身的开销都很小，因此为降低碰撞概率。这点小代价还是值得的</p><p><img src="https://s3.bmp.ovh/imgs/2023/05/06/10d9df0011a6f177.png" alt="帧预约后发送过程"></p><h4 id="退避算法"><a href="#退避算法" class="headerlink" title="退避算法"></a>退避算法</h4><ul><li>站点会为退避计时器设置一个随机的退避时间<ul><li>当退避时间减小到0时，就开始发送</li><li>当退避时间未到0而信道又转为忙态时，此时需要冻结退避计时器的值，重新等待信道转为空闲，再经过帧间间隔DIFS后，继续启动退避计时器</li></ul></li></ul><p>A开始发送帧，BCD也想发送，发现信道处于忙状态，等待DIFS间隔后，启动退避计时器；假如C的退避时间最短，此时信道也处于空闲状态，C立即发送帧，BD对应退避时间冻结，等待信道转为空闲及DIFS间隔后，退避计时器解冻，重新开始计时…然后依次类推（如图所示）</p><p><img src="https://s3.bmp.ovh/imgs/2023/05/06/f23b1fb076a8e8c0.png" alt="退避算法图解"></p><h3 id="MAC帧"><a href="#MAC帧" class="headerlink" title="MAC帧"></a>MAC帧</h3><ul><li>数据帧<ul><li>用于站点间传输数据</li></ul></li></ul><p><img src="https://s3.bmp.ovh/imgs/2023/05/06/a5c6f162a699d2f4.png" alt="数据帧格式"></p><p><img src="https://s3.bmp.ovh/imgs/2023/05/06/349fa5794d84f03c.png"></p><ul><li>控制帧<ul><li>通常与数据帧搭配使用</li><li>负责区域清空，虚拟载波监听的维护及信道的接入，并于收到数据帧时予以确认</li><li>ACK帧、RTS帧及CTS帧等都属于该范畴</li></ul></li><li>管理帧<ul><li>用于加入或退出无线网络，以及处理AP之间连接的转移事宜</li><li>信标帧、关联请求帧以及身份认证帧等都属于管理帧</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 关于学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络基础系列（一）</title>
      <link href="/2023/06/01/ji-suan-ji-wang-luo-ji-chu-xi-lie-yi/"/>
      <url>/2023/06/01/ji-suan-ji-wang-luo-ji-chu-xi-lie-yi/</url>
      
        <content type="html"><![CDATA[<h1 id="第一章-概述"><a href="#第一章-概述" class="headerlink" title="第一章 概述"></a>第一章 概述</h1><h2 id="因特网概述"><a href="#因特网概述" class="headerlink" title="因特网概述"></a>因特网概述</h2><ol><li>网络与因特网的区别与联系</li></ol><ul><li>若干节点和链路互连形成网络</li><li>若干网络通过路由器互连形成互联网</li><li>因特网是当今世上最大的互联网</li></ul><table><thead><tr><th>internet</th><th>Internet</th></tr></thead><tbody><tr><td>通用名词</td><td>专有名词</td></tr><tr><td>互联网</td><td>因特网</td></tr><tr><td>任意的通信协议</td><td>TCP&#x2F;IP</td></tr></tbody></table><ol start="2"><li><p>因特网服务提供者（ISP，Internet Service Provider）</p></li><li><p>因特网已发展成为基于ISP的多层次结构的互连网络</p></li></ol><ul><li><p>第一层：国际级</p></li><li><p>第二层：区域或国家级</p></li><li><p>第三层：本地级</p></li></ul><p>值得注意的是，已接入用户也可以成为ISP（个人理解类似于长城宽带！？）</p><p><img src="https://s3.bmp.ovh/imgs/2023/04/16/741bd1e2e44cecbc.png" alt="图源《深入浅出计算机网络》"></p><ol start="4"><li>因特网的组成</li></ol><ul><li><p>边缘部分：各类主机（如台式电脑，笔记本电脑，打印机等）</p></li><li><p>核心部分：网络与连接这些网络的路由器组成</p></li></ul><h2 id="交换技术"><a href="#交换技术" class="headerlink" title="交换技术"></a>交换技术</h2><ol><li>电路交换（需提前建立连接）</li></ol><pre class="line-numbers language-mermaid" data-language="mermaid"><code class="language-mermaid"><span class="token keyword">graph</span> LR 建立连接-分配通信资源 <span class="token arrow operator">--></span> 通话-一直占用通信资源 <span class="token arrow operator">--></span> 释放连接-归还通信资源<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>​缺点：线路利用率低，不能充分利用线路容量，不便于进行差错控制</p><ol start="2"><li><strong>分组交换</strong>（无需建立连接）</li></ol><p><img src="https://s3.bmp.ovh/imgs/2023/04/16/6b658de58e83ddf7.png" alt="图源《深入浅出计算机网络》"></p><p>缺点：</p><ul><li>分组首部增加传输开销</li><li>交换节点存储转发分组会带来一定的时延</li><li>无法确保通信时端到端通信资源全部可用，在通信量较大时可能造成网络拥塞</li><li>分组可能会出现失序和丢失等问题</li></ul><ol start="3"><li>报文交换</li></ol><ul><li>分组交换的前身</li><li>将整个报文发送，而不是拆分分组</li><li>交换节点将整个报文接收完成后才开始查找转发表，然后确定转发目标</li><li>因此时延要长得多，同时交换节点需要的缓存空间也大</li></ul><p>对比：</p><p><img src="https://s3.bmp.ovh/imgs/2023/04/16/7e809aedb78a0d3a.png" alt="图源《深入浅出计算机网络》"></p><h2 id="计算机网络定义及分类"><a href="#计算机网络定义及分类" class="headerlink" title="计算机网络定义及分类"></a>计算机网络定义及分类</h2><p>计算机网络就是一些互联的，自治的计算机系统集合</p><p>分类：</p><ul><li>按交换方式<ul><li>电路交换</li><li>分组交换</li><li>报文交换</li></ul></li><li>按使用者<ul><li>公用网</li><li>专用网</li></ul></li><li>按传输介质<ul><li>有线</li><li>无线</li></ul></li><li>按覆盖范围<ul><li>广域网（WAN）</li><li>城域网（MAN）</li><li>局域网（LAN）</li><li>个域网（PAN）</li></ul></li><li>按拓扑结构<ul><li>总线</li><li>星型</li><li>网状</li><li>环形</li></ul></li></ul><h2 id="计算机系统性能指标"><a href="#计算机系统性能指标" class="headerlink" title="计算机系统性能指标"></a>计算机系统性能指标</h2><ol><li><p>速率</p><ul><li>比特（bit）计算机中数据量的基本单位</li><li>即数据传送速率，每秒传送多少个比特，也称数据率或比特率</li><li>基本单位是b&#x2F;s，常用的还有kb&#x2F;s，Mb&#x2F;s，Gb&#x2F;s，Tb&#x2F;s</li></ul><p><img src="https://s3.bmp.ovh/imgs/2023/04/21/83990b5e2fbfb66d.png"></p></li><li><p>带宽</p><ul><li>用来表示网络的通信线路所能传送数据的能力，即在单位时间内从网络中的某一点到另一点所能通过的最高数据率</li><li>单位：b&#x2F;s</li></ul></li><li><p>吞吐量</p><ul><li>单位时间内通过某个网络或接口的实际数据量</li><li>受网络带宽限制</li></ul></li><li><p>时延</p><ul><li><p>数据从网络的一端到另一端所耗费的时间</p></li><li><p>总时延 &#x3D; 发送时延 + 传播时延 + 排队时延 + 处理时延</p></li><li><p>发送时延 &#x3D; 分组长度（b） &#x2F; 发送速率(b&#x2F;s) </p><ul><li>发送速率 &#x3D; min(主机接口速率，线路带宽，交换机或路由器的接口速率)</li></ul></li><li><p>传播时延 &#x3D; 信道长度(m) &#x2F; 信号传播速率（m&#x2F;s）</p></li><li><p>排队时延（一般忽略）</p></li><li><p>处理时延（一般忽略）</p><p><img src="https://s3.bmp.ovh/imgs/2023/04/17/3eca2bd7928ce41f.png" alt="《深入浅出计算机网络》"></p></li></ul></li><li><p>时延带宽积</p><ul><li>传播时延 x 带宽 （即圆柱体积）</li></ul></li><li><p>往返时间（RTT）</p><ul><li>双向交互一次需要的时间</li></ul></li><li><p>利用率</p><ul><li>信道利用率：当某信道利用率增大时，该信道引起的时延也会迅速增加</li><li>网络利用率</li></ul></li><li><p>丢包率</p><ul><li>分组丢失率，即在一定时间范围内，传输过程中丢失的分组数量和总分组数量的比率</li><li>分组丢失情况<ul><li>分组传输过程中出现<strong>误码</strong>，被结点丢弃</li><li>分组达到一台队列已满的分组交换机时被丢弃；在通信量较大时可能造成<strong>网络堵塞</strong></li></ul></li></ul></li></ol><h2 id="计算机网络体系结构"><a href="#计算机网络体系结构" class="headerlink" title="计算机网络体系结构"></a>计算机网络体系结构</h2><ol><li><p>常见的计算机网络体系结构</p><ul><li><p>OSI七层模型</p><p><img src="https://s3.bmp.ovh/imgs/2023/04/19/9c36da1dc2d74344.png" alt="《深入浅出计算机网络》"></p></li><li><p>TCP&#x2F;IP体系结构</p><p><img src="https://s3.bmp.ovh/imgs/2023/04/19/9bd4777a2c7f67ea.png" alt="《深入浅出计算机网络》"></p></li><li><p>原理体系结构（5层模型）</p><p><img src="https://s3.bmp.ovh/imgs/2023/04/19/7546cadbcd696792.png" alt="《深入浅出计算机网络》"></p></li></ul></li><li><p>分层的必要性（以5层模型为例）</p><p><img src="https://s3.bmp.ovh/imgs/2023/04/19/cd558d40cc4b8881.png" alt="《深入浅出计算机网络》"></p></li><li><p>分层思想举例</p><p>逐层封装然后解封的过程</p><p><img src="https://s3.bmp.ovh/imgs/2023/04/20/1433f75d080bcfcf.png"></p></li><li><p>相关专业术语</p><ul><li><p>实体</p></li><li><p>任何可发送或接受信息的硬件或软件进程</p></li><li><p>对等实体</p><ul><li>收发双方相同层次中的实体</li></ul></li><li><p>协议</p><ul><li>控制两个对等实体进行逻辑通信的规则的集合</li><li>三要素<ul><li>语法 定义交换信息的格式</li><li>语义 定义收发双方所要完成的操作</li><li>同步 定义收发双方的时序关系</li></ul></li></ul></li><li><p>服务</p><ul><li>在协议的控制下，两个对等实体间的逻辑通信使得本层能够向上一层提供服务</li><li>要实现本层协议，还需要利用下一层所提供的服务</li><li>协议是水平的，服务是垂直的</li><li>实体看得见相邻下层提供的服务，但并不知道实现该服务的具体协议，也就是下面的协议对上一层的实体是透明（即看不见）的</li></ul></li><li><p>服务访问点</p><ul><li>在同一系统中相邻两层的实体交换信息的逻辑接口，用于区分不同的服务类型</li><li>例如：数据链路层的服务访问点为帧的类型字段；网络层的为IP数据报首部中的协议字段；运输层为端口号</li></ul></li><li><p>服务原语</p><ul><li>上层使用下层所提供的服务必须通过与下层交换的命令</li></ul></li><li><p>协议数据单元PDU</p><ul><li>对等层次之间传送的数据包</li></ul></li><li><p>服务数据单元SDU</p><ul><li>同一系统内，层与层之间交换的数据包</li></ul></li></ul><p><img src="https://s3.bmp.ovh/imgs/2023/04/20/48b4a3306b2f48f4.png"></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 关于学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络</title>
      <link href="/2023/06/01/ji-suan-ji-wang-luo/"/>
      <url>/2023/06/01/ji-suan-ji-wang-luo/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>自学B站上计算机网络相关视频，自己总结的笔记，方便自己学习查阅</p><p>参考视频：<a href="https://www.bilibili.com/video/BV1NT411g7n6/?spm_id_from=..search-card.all.click">深入浅出计算机网络</a>、<a href="https://www.bilibili.com/video/BV19E411D78Q/?spm_id_from=..search-card.all.click">王道考研</a></p><h1 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h1><h2 id="因特网概述"><a href="#因特网概述" class="headerlink" title="因特网概述"></a>因特网概述</h2><ol><li>网络与因特网的区别与联系</li></ol><ul><li>若干节点和链路互连形成网络</li><li>若干网络通过路由器互连形成互联网</li><li>因特网是当今世上最大的互联网</li></ul><table><thead><tr><th>internet</th><th>Internet</th></tr></thead><tbody><tr><td>通用名词</td><td>专有名词</td></tr><tr><td>互联网</td><td>因特网</td></tr><tr><td>任意的通信协议</td><td>TCP&#x2F;IP</td></tr></tbody></table><ol start="2"><li><p>因特网服务提供者（ISP，Internet Service Provider）</p></li><li><p>因特网已发展成为基于ISP的多层次结构的互连网络</p></li></ol><ul><li><p>第一层：国际级</p></li><li><p>第二层：区域或国家级</p></li><li><p>第三层：本地级</p></li></ul><p>值得注意的是，已接入用户也可以成为ISP（个人理解类似于长城宽带！？）</p><p><img src="https://s3.bmp.ovh/imgs/2023/04/16/741bd1e2e44cecbc.png" alt="图源《深入浅出计算机网络》"></p><ol start="4"><li>因特网的组成</li></ol><ul><li><p>边缘部分：各类主机（如台式电脑，笔记本电脑，打印机等）</p></li><li><p>核心部分：网络与连接这些网络的路由器组成</p></li></ul><h2 id="交换技术"><a href="#交换技术" class="headerlink" title="交换技术"></a>交换技术</h2><ol><li>电路交换（需提前建立连接）</li></ol><pre class="line-numbers language-mermaid" data-language="mermaid"><code class="language-mermaid"><span class="token keyword">graph</span> LR 建立连接-分配通信资源 <span class="token arrow operator">--></span> 通话-一直占用通信资源 <span class="token arrow operator">--></span> 释放连接-归还通信资源<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>​缺点：线路利用率低，不能充分利用线路容量，不便于进行差错控制</p><ol start="2"><li><strong>分组交换</strong>（无需建立连接）</li></ol><p><img src="https://s3.bmp.ovh/imgs/2023/04/16/6b658de58e83ddf7.png" alt="图源《深入浅出计算机网络》"></p><p>缺点：</p><ul><li>分组首部增加传输开销</li><li>交换节点存储转发分组会带来一定的时延</li><li>无法确保通信时端到端通信资源全部可用，在通信量较大时可能造成网络拥塞</li><li>分组可能会出现失序和丢失等问题</li></ul><ol start="3"><li>报文交换</li></ol><ul><li>分组交换的前身</li><li>将整个报文发送，而不是拆分分组</li><li>交换节点将整个报文接收完成后才开始查找转发表，然后确定转发目标</li><li>因此时延要长得多，同时交换节点需要的缓存空间也大</li></ul><p>对比：</p><p><img src="https://s3.bmp.ovh/imgs/2023/04/16/7e809aedb78a0d3a.png" alt="图源《深入浅出计算机网络》"></p><h2 id="计算机网络定义及分类"><a href="#计算机网络定义及分类" class="headerlink" title="计算机网络定义及分类"></a>计算机网络定义及分类</h2><p>计算机网络就是一些互联的，自治的计算机系统集合</p><p>分类：</p><ul><li>按交换方式<ul><li>电路交换</li><li>分组交换</li><li>报文交换</li></ul></li><li>按使用者<ul><li>公用网</li><li>专用网</li></ul></li><li>按传输介质<ul><li>有线</li><li>无线</li></ul></li><li>按覆盖范围<ul><li>广域网（WAN）</li><li>城域网（MAN）</li><li>局域网（LAN）</li><li>个域网（PAN）</li></ul></li><li>按拓扑结构<ul><li>总线</li><li>星型</li><li>网状</li><li>环形</li></ul></li></ul><h2 id="计算机系统性能指标"><a href="#计算机系统性能指标" class="headerlink" title="计算机系统性能指标"></a>计算机系统性能指标</h2><ol><li><p>速率</p><ul><li>比特（bit）计算机中数据量的基本单位</li><li>即数据传送速率，每秒传送多少个比特，也称数据率或比特率</li><li>基本单位是b&#x2F;s，常用的还有kb&#x2F;s，Mb&#x2F;s，Gb&#x2F;s，Tb&#x2F;s</li></ul><p><img src="https://s3.bmp.ovh/imgs/2023/04/21/83990b5e2fbfb66d.png"></p></li><li><p>带宽</p><ul><li>用来表示网络的通信线路所能传送数据的能力，即在单位时间内从网络中的某一点到另一点所能通过的最高数据率</li><li>单位：b&#x2F;s</li></ul></li><li><p>吞吐量</p><ul><li>单位时间内通过某个网络或接口的实际数据量</li><li>受网络带宽限制</li></ul></li><li><p>时延</p><ul><li><p>数据从网络的一端到另一端所耗费的时间</p></li><li><p>总时延 &#x3D; 发送时延 + 传播时延 + 排队时延 + 处理时延</p></li><li><p>发送时延 &#x3D; 分组长度（b） &#x2F; 发送速率(b&#x2F;s) </p><ul><li>发送速率 &#x3D; min(主机接口速率，线路带宽，交换机或路由器的接口速率)</li></ul></li><li><p>传播时延 &#x3D; 信道长度(m) &#x2F; 信号传播速率（m&#x2F;s）</p></li><li><p>排队时延（一般忽略）</p></li><li><p>处理时延（一般忽略）</p><p><img src="https://s3.bmp.ovh/imgs/2023/04/17/3eca2bd7928ce41f.png" alt="《深入浅出计算机网络》"></p></li></ul></li><li><p>时延带宽积</p><ul><li>传播时延 x 带宽 （即圆柱体积）</li></ul></li><li><p>往返时间（RTT）</p><ul><li>双向交互一次需要的时间</li></ul></li><li><p>利用率</p><ul><li>信道利用率：当某信道利用率增大时，该信道引起的时延也会迅速增加</li><li>网络利用率</li></ul></li><li><p>丢包率</p><ul><li>分组丢失率，即在一定时间范围内，传输过程中丢失的分组数量和总分组数量的比率</li><li>分组丢失情况<ul><li>分组传输过程中出现<strong>误码</strong>，被结点丢弃</li><li>分组达到一台队列已满的分组交换机时被丢弃；在通信量较大时可能造成<strong>网络堵塞</strong></li></ul></li></ul></li></ol><h2 id="计算机网络体系结构"><a href="#计算机网络体系结构" class="headerlink" title="计算机网络体系结构"></a>计算机网络体系结构</h2><ol><li><p>常见的计算机网络体系结构</p><ul><li><p>OSI七层模型</p><p><img src="https://s3.bmp.ovh/imgs/2023/04/19/9c36da1dc2d74344.png" alt="《深入浅出计算机网络》"></p></li><li><p>TCP&#x2F;IP体系结构</p><p><img src="https://s3.bmp.ovh/imgs/2023/04/19/9bd4777a2c7f67ea.png" alt="《深入浅出计算机网络》"></p></li><li><p>原理体系结构（5层模型）</p><p><img src="https://s3.bmp.ovh/imgs/2023/04/19/7546cadbcd696792.png" alt="《深入浅出计算机网络》"></p></li></ul></li><li><p>分层的必要性（以5层模型为例）</p><p><img src="https://s3.bmp.ovh/imgs/2023/04/19/cd558d40cc4b8881.png" alt="《深入浅出计算机网络》"></p></li><li><p>分层思想举例</p><p>逐层封装然后解封的过程</p><p><img src="https://s3.bmp.ovh/imgs/2023/04/20/1433f75d080bcfcf.png"></p></li><li><p>相关专业术语</p><ul><li><p>实体</p></li><li><p>任何可发送或接受信息的硬件或软件进程</p></li><li><p>对等实体</p><ul><li>收发双方相同层次中的实体</li></ul></li><li><p>协议</p><ul><li>控制两个对等实体进行逻辑通信的规则的集合</li><li>三要素<ul><li>语法 定义交换信息的格式</li><li>语义 定义收发双方所要完成的操作</li><li>同步 定义收发双方的时序关系</li></ul></li></ul></li><li><p>服务</p><ul><li>在协议的控制下，两个对等实体间的逻辑通信使得本层能够向上一层提供服务</li><li>要实现本层协议，还需要利用下一层所提供的服务</li><li>协议是水平的，服务是垂直的</li><li>实体看得见相邻下层提供的服务，但并不知道实现该服务的具体协议，也就是下面的协议对上一层的实体是透明（即看不见）的</li></ul></li><li><p>服务访问点</p><ul><li>在同一系统中相邻两层的实体交换信息的逻辑接口，用于区分不同的服务类型</li><li>例如：数据链路层的服务访问点为帧的类型字段；网络层的为IP数据报首部中的协议字段；运输层为端口号</li></ul></li><li><p>服务原语</p><ul><li>上层使用下层所提供的服务必须通过与下层交换的命令</li></ul></li><li><p>协议数据单元PDU</p><ul><li>对等层次之间传送的数据包</li></ul></li><li><p>服务数据单元SDU</p><ul><li>同一系统内，层与层之间交换的数据包</li></ul></li></ul><p><img src="https://s3.bmp.ovh/imgs/2023/04/20/48b4a3306b2f48f4.png"></p></li></ol><h1 id="第二章"><a href="#第二章" class="headerlink" title="第二章"></a>第二章</h1><h2 id="物理层基本概念"><a href="#物理层基本概念" class="headerlink" title="物理层基本概念"></a>物理层基本概念</h2><ul><li>物理层考虑的是怎样才能在连接各种计算机的传输媒体上传输数据比特流</li><li>物理层为数据链路层屏蔽了各种传输媒体的差异，使数据链路层只需要考虑如何完成本层的协议和服务，不必考虑网络具体的传输媒体是什么</li></ul><h2 id="数据通信相关术语"><a href="#数据通信相关术语" class="headerlink" title="数据通信相关术语"></a>数据通信相关术语</h2><ul><li>数据 传送信息的实体</li><li>信号 数据的电气或电磁表现，数据在传输过程中的存在形式</li><li><strong>码元</strong> <ul><li>用一个固定时长的信号波形（数字脉冲）表示一位K进制数字，代表不同离散数值的基本波形，该时长内的信号叫k（即码元离散状态个数）进制码元，而该时长称为<strong>码元宽度</strong>；1码元可以携带若干比特的信息量<ul><li>例如：二进制码元，只有两种不同状态的码元，一种代表0，一种代表1；即1码元携带1比特信息</li><li>4进制码元，则有四种不同状态，1码元携带2比特信息</li><li>X进制码元，则有X种不同状态，1码元携带log<del>2</del>X比特信息</li></ul></li></ul></li><li>信源 产生和发送数据的源头</li><li>信道 信号的传输媒介</li><li>信宿 接收数据的终点</li><li>基带信号 对应数字信号</li><li>宽带信号 对应模拟信号</li><li>速率 数据传输速率，单位时间内传输的数据量<ul><li>码元传输速率（波特率）  <strong>即一秒传输多少码元</strong><ul><li>单位时间内数字通信系统传输的码元个数或脉冲个数或信号变化次数，单位为波特（Baud），码元速率与进制数无关</li></ul></li><li>信息传输速率（信息速率&#x2F;比特率） <strong>即一秒传输多少比特</strong><ul><li>单位时间内数字通信系统传输的二进制码元个数（即比特数），单位是比特每秒（b&#x2F;s）</li></ul></li><li>两者数量关系<ul><li>若一码元携带<code>n</code>比特的信息量，则<code>M</code>波特率的码元传输速率对应信息传输速率为<code>M*n b/s</code></li></ul></li></ul></li></ul><h2 id="传输介质"><a href="#传输介质" class="headerlink" title="传输介质"></a>传输介质</h2><ul><li>双绞线</li><li>同轴电缆</li><li>光纤</li><li>无线传输介质</li></ul><h2 id="传输方式"><a href="#传输方式" class="headerlink" title="传输方式"></a>传输方式</h2><ul><li>串行传输与并行传输</li><li><strong>同步传输与异步传输</strong><ul><li>同步：各字节间没有间隔</li><li>异步：字节间存在间隔（不固定），但字节中的比特持续时间仍相同</li></ul></li><li>单工、半双工和全双工</li></ul><h2 id="编码与调制"><a href="#编码与调制" class="headerlink" title="编码与调制"></a>编码与调制</h2><p>把数据变换为数字信号的过程叫<strong>编码</strong></p><p>把数据变换为模拟信号的过程叫<strong>调制</strong></p><ol><li><strong>数字数据编码为数字信号</strong></li></ol><p><img src="https://s3.bmp.ovh/imgs/2023/04/22/77ba492ece64f9ee.png"></p><ul><li>归零编码（RZ）<ul><li>高电平为1，低电平为0，每个时钟周期中间均需要归零</li></ul></li><li>非归零编码（NRZ）<ul><li>高电平为1，低电平为0，无需归零，一个周期可全部用于传输数据</li></ul></li><li><strong>曼彻斯特编码</strong><ul><li>将码元分成两个相等的间隙，前一个间隔为高电平而后一个间隔为低电平表示1，相反则表示0；也可以采用相反的规定</li><li>每个码元中间都会出现电平的跳变，此跳变既可以作为时钟同步，也可以作为数据信号</li><li>以太网使用的便是此编码</li></ul></li><li>差分曼彻斯特编码<ul><li>若码元为1，则前半个码元的电平与上一码元的后半个码元电平一致；若为0，则相反</li><li>每个码元中间都会出现跳变，可实现自同步，抗干扰性较好</li><li>常用于局域网传输</li></ul></li></ul><ol start="2"><li><strong>数字数据调制为模拟信号</strong></li></ol><p><img src="https://s3.bmp.ovh/imgs/2023/04/22/aa28fc2d14cb2493.png"></p><ul><li>幅移键控（ASK） 调幅（AM）</li><li>频移键控（FSK） 调频（FM）</li><li>相移键控（PSK） 调相（PM）</li><li>正交振幅调制（QAM） 将ASK与PSK结合</li></ul><ol start="3"><li><strong>模拟数据编码为数字信号</strong></li></ol><ul><li>采样<ul><li>对模拟信号进行周期性扫描，然后把时间上连续的信号变成时间上离散的信号</li></ul></li><li>量化<ul><li>将离散的信号根据一定标准转化成离散的数字</li></ul></li><li>编码<ul><li>把量化的结果转为与之对应的二进制编码</li></ul></li></ul><ol start="4"><li>模拟数据调制为模拟信号</li></ol><h2 id="信道极限容量"><a href="#信道极限容量" class="headerlink" title="信道极限容量"></a>信道极限容量</h2><ol><li><p><strong>奈氏准则</strong></p><p>$理想低通信道下的极限数据传输速率 &#x3D; 2Wlog<del>2</del>V$  (单位b&#x2F;s)​</p><ul><li>W为理想低通信道的带宽</li><li>V为每个码元离散电平的数目，即多少种不同的码元</li></ul><p><img src="https://s3.bmp.ovh/imgs/2023/04/22/ecd63acffe6f17cc.png"></p></li><li><p><strong>香农定理</strong></p><p>$信道极限数据传输速率 &#x3D; Wlog<del>2</del>(1+S&#x2F;N)$  (单位b&#x2F;s)​</p><p>$信噪比 &#x3D; 10log<del>10</del>(S&#x2F;N)dB$</p><ul><li>W为信道带宽</li><li>S为信道所传输信号的平均功率</li><li>N为信道内部的高斯噪声功率</li><li>S&#x2F;N为信噪比</li></ul><p><img src="https://s3.bmp.ovh/imgs/2023/04/22/7d8f0a563102e122.png"></p></li></ol><p><img src="https://s3.bmp.ovh/imgs/2023/04/22/51d03383a016998c.png"></p><h2 id="信道复用技术"><a href="#信道复用技术" class="headerlink" title="信道复用技术"></a>信道复用技术</h2><ol><li>频分复用(FDM)</li><li>时分复用(TDM)</li><li>波分复用(WDM)</li><li>码分复用(CDM)</li></ol><h1 id="第三章"><a href="#第三章" class="headerlink" title="第三章"></a>第三章</h1><h2 id="数据链路层的功能"><a href="#数据链路层的功能" class="headerlink" title="数据链路层的功能"></a>数据链路层的功能</h2><ol><li><p>为网络层提供服务</p><ul><li>无确认的无连接服务</li><li>有确认的无连接服务</li><li>有确认的面向连接服务</li></ul></li><li><p>链路管理 </p><p>连接的建立 -&gt; 传输帧 -&gt; 释放连接</p></li><li><p>帧定界</p><p>将一段数据的前后添加相应的首部和尾部，确定帧的界限</p></li><li><p>帧同步</p><p>接收方应能从接收到的二进制比特流中区分帧的起始和终止</p></li><li><p>透明传输</p><p>不管传的数据是什么样的比特组合，都应能在链路上传送，即避免把传输的数据误解为帧定界</p></li><li><p>差错控制</p><p>用以使发送方确定接收方是否正确收到由其发送的数据的方法</p></li></ol><h2 id="数据链路层三个重要问题"><a href="#数据链路层三个重要问题" class="headerlink" title="数据链路层三个重要问题"></a>数据链路层三个重要问题</h2><h3 id="封装成帧和透明传输"><a href="#封装成帧和透明传输" class="headerlink" title="封装成帧和透明传输"></a>封装成帧和透明传输</h3><ol><li><p>封装成帧 </p><p>封装成帧是指将数据链路层给上层交付的协议数据单元添加帧头和帧尾组成为帧</p><ul><li>帧头和帧尾有重要的控制信息，其中一个作用就是作为帧定界</li></ul></li><li><p>透明传输</p><p>数据链路层对上层交付的传输数据没有任何限制，就像链路层不存在一样</p><ul><li>字符填充法实现 插入转义字符</li><li>零比特填充法实现 插入比特0</li></ul></li></ol><p>为了提高帧的传输速率，帧的数据长度应尽可能大，但&lt;&#x3D;最大传送单元（MTU）</p><h3 id="差错控制"><a href="#差错控制" class="headerlink" title="差错控制"></a>差错控制</h3><ul><li><p>传输过程中1可能变成0，0也可能变成1，这就叫<strong>比特差错</strong></p></li><li><p>在一段时间内，传输错误的比特占所传输比特总数的比率叫误码率（BER）</p></li></ul><p>可以通过<code>检错编码</code>来检测传输过程中是否产生了比特差错，不过其只能判断是否出现错误，而无法确定错误位置，然后纠正错误。</p><ol><li><p>奇偶校验码</p><ul><li>在待发送的数据后面添加一位校验码，使整个数据（包括校验码在内）中“1”的个数为奇数（奇校验）或偶数（偶校验）</li><li>若有奇数个位发生误码，则奇偶性发生变化时即可判断出是否出现误码</li><li>若有偶数个位发生误码，则奇偶性不发生变化，无法判断是否出现误码（漏检）</li><li>该方法漏检率较高，不常用</li></ul></li><li><p>循环冗余码（CRC）</p><ul><li>收发双方约定一个<code>生成多项式G(x)</code></li><li>发送方基于待发送的数据和生成多项式计算差错检测码（冗余码），将其添加到待发送数据后面一起传输</li><li>接收方通过生成多项式计算收到的数据是否产生误码</li></ul><p><img src="https://s3.bmp.ovh/imgs/2023/04/25/db2859bc607b82db.png" alt="计算方法"></p></li></ol><p><img src="https://s3.bmp.ovh/imgs/2023/04/25/9cfb42b7a2f6e339.png" alt="计算示例（除法做的是异或运算）"></p><p>循环冗余码（CRC）的漏检率较低，且易于用硬件实现，因此被广泛用于数据链路层</p><h3 id="可靠传输"><a href="#可靠传输" class="headerlink" title="可靠传输"></a>可靠传输</h3><ul><li>数据链路层向上提供的服务类型<ul><li>不可靠传输服务：仅仅丢弃有误码的帧，其他什么也不做</li><li>可靠传输服务：想办法实现发送端发送什么，接收端就接收什么</li></ul></li><li>一般情况下，有线链路误码率较低，为减少开销，并不要求向上层提供可靠传输服务；而无线链路误码率较高，因此需要向上提供可靠传输服务</li><li>传输差错包括<code>分组丢失</code>，<code>分组失序</code>，<code>分组重复</code>和<code>比特差错</code>等</li><li>可靠传输服务并不局限在数据链路层，其他各层均可选择实现可靠传输</li><li>可靠传输的开销较大，可根据实际情况选择性实现</li></ul><p>下面介绍三种可靠传输协议机制：</p><ol><li><strong>停止-等待协议SW</strong></li></ol><ul><li><p>确认与否认</p><p><img src="https://s3.bmp.ovh/imgs/2023/04/25/bf387edb0887df6a.png"></p></li><li><p>超时重传 一般设定重传时间为略大于“从发送方到接收方的平均往返时间”</p><p><img src="https://s3.bmp.ovh/imgs/2023/04/25/4e0d4bf8c66ab6f8.png"></p></li><li><p>确认丢失 给发送数据添加对应的编号</p><p><img src="https://s3.bmp.ovh/imgs/2023/04/25/6d0858725d8ab2be.png"></p></li><li><p>确认迟到 给确认添加对应的编号</p><p><img src="https://s3.bmp.ovh/imgs/2023/04/25/f7048e1132ce4d65.png"></p></li></ul><p>注意事项：</p><ul><li>对于误码率较高的点对点链路，为了能够让发送方尽早重传，可以给发送方发送NAK分组，这样无需等待超时重传</li><li>为了让接收方判断收到的数据是否重复，需要给数据分组添加编号，由于停止-等待协议的特性，因此只需要1个比特就够了，即0和1</li><li>为了让发送方判断收到的确认是否重复，同样也需要给ACK分组添加编号，但数据链路层上基本不会发生确认迟到，因此可以无需编号</li></ul><p>信道利用率U &#x3D; T<del>D</del> &#x2F; T<del>D</del> + RTT + T<del>A</del></p><p><img src="https://s3.bmp.ovh/imgs/2023/04/25/8c6703115429636e.png"></p><ul><li>T<del>D</del> 发送方耗费的发送时延</li><li>RTT 往返时间</li><li>T<del>A</del> 接收方返回耗费的发送时延（因比T<del>D</del>要小的多，常忽略不计）</li></ul><ol start="2"><li><strong>回退N帧协议GBN</strong></li></ol><p>在流水线传输的基础上利用发送窗口来限制发送方连续发送数据分组的数量，是一种连续ARQ协议；在协议工作过程中发送窗口和接收窗口不断向前滑动，因此这类协议又称为滑动窗口协议</p><ul><li><p>发送窗口的尺寸记为<code>WT</code>，其取值范围是：1 &lt; WT &lt;&#x3D; 2^n^ - 1 （n表示比特数）</p><p><img src="https://s3.bmp.ovh/imgs/2023/04/26/51b0e1a23b3f186a.png"></p></li><li><p>接收窗口的尺寸记为<code>WR</code>，对于回退N帧协议，其取值只能为 1</p><p><img src="https://s3.bmp.ovh/imgs/2023/04/26/5b9608e0d8d6b83e.png"></p></li><li><p><code>累计确认</code>：接收方不一定要对收到的数据分组进行逐个发送确认，而是可以根据实际情况在收到多个数据分组后，对按序到达的最后一个数据分组进行发送确认。如ACKn表示数据分组n及其之前的数据分组均已收到。因此确认分组丢失后，发送方也可能不必超时重传</p></li><li><p>发送方收到重复的确认就可以知道之前的传输出现了差错，由此可以不需要等待超时时间即可立即重传</p></li><li><p>当WT超出其上限时，会造成接收方无法分辨新旧数据分组</p></li></ul><p><img src="https://s3.bmp.ovh/imgs/2023/04/26/378e1920f01b8d4a.png" alt="总结"></p><ul><li>当信道的传输质量很差导致误码率很高的时候，回退N帧协议并不一定优于停止-等待协议</li></ul><ol start="3"><li><strong>选择重传协议</strong></li></ol><p>由于回退N帧协议的接收方窗口尺寸WR只能为1，只能按序接收数据分组，因此当其中一个数据分组出现误码时，会导致其后续的数据分组都会被丢弃然后超时重传，这样极大浪费了通信资源。</p><p>若有办法只重传存在误码的数据分组，其效率将会得到提高。因此接收窗口尺寸WR应大于1，以便可以先接收失序到达但其本身并无误码的数据分组，等到所有分组全部到齐后再传输到上层，这就是<code>选择重传协议</code></p><ul><li>为了能够使发送方只重传出现误码的数据分组，接收方不能再采用累计确认，只能进行逐个确认</li><li>发送方的发送窗口尺寸WT必须满足：1 &lt; WT &lt;&#x3D; 2^(n-1)^<ul><li>WT &#x3D; 1，则是停止-等待协议</li><li>WT超出最大范围，则接收方无法区分新旧数据分组</li></ul></li><li>接收方的接收窗口尺寸WR必须满足：1 &lt; WR &lt;&#x3D; WT<ul><li>WR &#x3D; 1，则是回退N帧协议</li><li>WR 超出最大范围，无意义</li></ul></li></ul><p><img src="https://s3.bmp.ovh/imgs/2023/04/26/e553ccdafe7c237e.png" alt="总结"></p><h2 id="点对点协议PPP"><a href="#点对点协议PPP" class="headerlink" title="点对点协议PPP"></a>点对点协议PPP</h2><ul><li><p>目前使用最广泛的<strong>点对点数据链路层协议</strong></p></li><li><p>PPP协议为在点对点链路传输各种协议数据报提供了一个标准方法，主要有三部分组成：</p><ul><li>对各种协议数据报的封装方法（封装成帧）</li><li>链路控制协议LCP 用于建立、配置和测试数据链路的连接</li><li>一套网络控制协议NCPs 其中的每一个协议支持不同的网络层协议</li></ul></li><li><p>PPP帧的透明传输</p><ul><li>面向字节的异步链路使用字节填充法（插入转义字符）</li><li>面向比特的同步链路是使用比特填充法（插入零比特）</li></ul></li><li><p>PPP协议工作状态</p><p><img src="https://s3.bmp.ovh/imgs/2023/04/27/8aaefe1f729d8276.png"></p></li></ul><h2 id="共享式以太网"><a href="#共享式以太网" class="headerlink" title="共享式以太网"></a>共享式以太网</h2><h3 id="网络适配器"><a href="#网络适配器" class="headerlink" title="网络适配器"></a>网络适配器</h3><ul><li>将计算机连接到以太网需要使用相应的网络适配器，也叫<code>网卡</code></li><li>计算机内部中，网卡与CPU之间的通信，一般是通过计算机主板上的I&#x2F;O总线以<code>并行传输</code>的方式进行</li><li>网卡与外部以太网（局域网）之间的通信，一般是通过传输媒体（如光纤，同轴电缆）以<code>串行</code>方式进行</li><li>网卡其中一个重要功能就是要进行并行传输和串行传输的转换</li><li>为了网卡能够正常工作，一般还需要安装相应的驱动，驱动程序的作用是负责驱动网卡发送和接收帧</li></ul><p><img src="https://s3.bmp.ovh/imgs/2023/04/27/1ce89b800bffa3ee.png"></p><h3 id="MAC地址"><a href="#MAC地址" class="headerlink" title="MAC地址"></a>MAC地址</h3><ul><li><p>一般被固化在网卡的电可擦可编程只读存储器EEPROM中，因此也叫<strong>硬件地址（物理地址）</strong></p></li><li><p>需要注意的是物理地址属于数据链路层范畴而非物理层</p></li><li><p>一般情况下，普通用户计算机通常包含两块网卡</p><ul><li>接入有线局域网的以太网卡</li><li>接入无线局域网的WIFI网卡</li></ul></li><li><p>每块网卡都有一个全球唯一的MAC地址</p></li><li><p>交换机和路由器具有更多的网络接口，所以会有更多的MAC地址</p></li><li><p>MAC地址是对网络上各接口的唯一标识，不是对网络上各设备的唯一标识</p></li></ul><p><img src="https://s3.bmp.ovh/imgs/2023/04/27/2cf02c9ce28e5325.png"></p><h3 id="CSMA-x2F-CD协议"><a href="#CSMA-x2F-CD协议" class="headerlink" title="CSMA&#x2F;CD协议"></a>CSMA&#x2F;CD协议</h3><ul><li><p>共享总线以太网有天然的广播特性，总线上连接有多个站点，当某个站点发送帧时，总线资源会被该站点独占，若此时其他站点也在总线上发送帧，就会产生<code>信号碰撞</code></p><p><img src="https://s3.bmp.ovh/imgs/2023/04/27/46c182338e144109.png"></p></li><li><p>为解决碰撞问题，就采用了CSMA&#x2F;CD协议，即<code>载波监听多址接入/碰撞检测协议</code></p></li></ul><p><img src="https://s3.bmp.ovh/imgs/2023/04/27/9c157cab0e857df5.png"></p><ul><li>载波监听到总线空闲的时候，总线实际上可能并不空闲</li><li>CSMA&#x2F;CD协议只是尽量避免碰撞，但无法实现完全不碰撞</li><li>使用该协议时，由于正在发送帧的站点必须边发送帧边检测碰撞，所以站点不可能一边发送一边接受的，因此只能进行半双工通信</li></ul><h3 id="共享式以太网的争用期"><a href="#共享式以太网的争用期" class="headerlink" title="共享式以太网的争用期"></a>共享式以太网的争用期</h3><ul><li>站点从发送帧开始，最多经过时长2τ（即δ-&gt;0）就可以检测出所发送的帧是否遇到了碰撞</li><li>共享总线以太网的端到端往返时间<code>2τ</code>被称为<code>争用期</code>或<code>碰撞窗口</code></li><li>若在时间2τ内未检测到碰撞就可以认定该次发送不再会发生碰撞</li></ul><p><img src="https://s3.bmp.ovh/imgs/2023/04/28/85b95baf13205ac8.png"></p><h3 id="共享式以太网的最小帧长和最大帧长"><a href="#共享式以太网的最小帧长和最大帧长" class="headerlink" title="共享式以太网的最小帧长和最大帧长"></a>共享式以太网的最小帧长和最大帧长</h3><ol><li>最小帧长</li></ol><ul><li><p>最小帧长 &#x3D; 数据传输速率 * 争用期2τ</p></li><li><p>为了确保共享总线以太网上的每个站点在发送完一个完整的帧之前能够检测出是否发生了碰撞，帧的发送时延就不能少于共享总线以太网端到端的往返时间，即2τ</p></li><li><p>对于10Mb&#x2F;s的共享总线以太网，其争用期2τ的值规定为51.2μs，因此其最小帧长为512b，即64B</p></li><li><p>若遭遇碰撞，则一定发生在帧的前64B之内，因此，若接收点收到长度小于64B的帧，就可以判定这是一个遭遇了碰撞而异常终止的无效帧，将其丢弃即可</p></li></ul><ol start="2"><li>最大帧长</li></ol><ul><li>一般来说，帧的数据载荷长度应远大于帧首部和尾部的总长度，这样可以提升帧的传输效率</li><li>若不限制数据载荷长度的上限，令帧的长度过长，也会产生一些问题，例如长期占用总线，某站点缓冲区溢出等</li></ul><p><img src="https://s3.bmp.ovh/imgs/2023/04/28/f1dd310ae5692084.png"></p><h3 id="共享式以太网的退避算法"><a href="#共享式以太网的退避算法" class="headerlink" title="共享式以太网的退避算法"></a>共享式以太网的退避算法</h3><ul><li>又称截断二进制指数退避算法</li><li>退避时间 &#x3D; 基本退避时间（即争用期2τ） * 随机数r（r从离散的整数集合中[0,1…2^k^-1]随机挑选一个数，k &#x3D; min[重传次数, 10]）</li></ul><p><img src="https://s3.bmp.ovh/imgs/2023/04/28/65780bdc31adfa87.png"></p><ul><li>若连续发生多次的碰撞，表明可能有多个站点在竞争信道，使用上述的退避算法可以令重传需要推迟的平均时间随着重传次数增加而延长，从而减小发生碰撞的概率</li><li>当重传次数达16次仍未成功时，应放弃重传并向高层汇报</li></ul><h3 id="共享式以太网的信道利用率"><a href="#共享式以太网的信道利用率" class="headerlink" title="共享式以太网的信道利用率"></a>共享式以太网的信道利用率</h3><p><img src="https://s3.bmp.ovh/imgs/2023/04/28/0d22b9a2ecb137c7.png"></p><h3 id="网桥"><a href="#网桥" class="headerlink" title="网桥"></a>网桥</h3><ul><li><p>利用网桥在数据链路层扩展共享式以太网</p><ul><li>利用网桥可将两个或多个的以太网连接起来，成为一个覆盖范围更大的以太网，而原来的每个以太网都称为一个<strong>网段</strong></li></ul><p><img src="https://s3.bmp.ovh/imgs/2023/04/28/2c6443131d1a02a5.png"></p></li><li><p>网桥可以识别帧的结构</p></li><li><p>可以根据帧首部中的目的Mac地址和网桥自身的帧转发表来转发或丢弃所收到的帧</p></li></ul><ol><li>A向D发送单播帧（不同网段）</li></ol><ul><li>同一网段的根据MAC地址发现不是自己的帧，将其丢弃</li><li>到达网桥处的帧根据网桥转发表找到转发接口</li><li>通过接口顺利转发到目的站点</li></ul><p><img src="https://s3.bmp.ovh/imgs/2023/04/28/2fd8576e579f9023.png"></p><ol start="2"><li>A向C发送单播帧（同一网段）</li></ol><ul><li>同一网段的根据MAC地址发现是否属于自己的帧，是则接收，否则丢弃</li><li>到达网桥处的帧根据网桥转发表找到转发接口，发现无需转发，因此丢弃</li></ul><p><img src="https://s3.bmp.ovh/imgs/2023/04/28/fa55e50511051210.png"></p><ol start="3"><li>发送广播帧</li></ol><ul><li>所有站点均会接收该广播帧</li><li>到达网桥处的帧无需查找转发表，而是会通过除接收该帧接口外的其他接口转发该广播帧</li></ul><p><img src="https://s3.bmp.ovh/imgs/2023/04/28/c746a1e4c9dca479.png"></p><h3 id="透明网桥的自学习和转发帧"><a href="#透明网桥的自学习和转发帧" class="headerlink" title="透明网桥的自学习和转发帧"></a>透明网桥的自学习和转发帧</h3><ul><li><p>透明网桥通过<code>自学习</code>算法建立转发表</p></li><li><p>透明网桥中的<code>透明</code>，是指以太网中各网桥对于各站点而言是看不见的</p></li><li><p>透明网桥通过自学习算法基于以太网中各站点间的相互通信逐步建立起自己的转发表</p><ul><li>网桥收到帧后进行登记（即自学习）。登记内容为帧的源MAC地址和进入网桥的接口号</li><li>网桥根据帧的目的MAC地址和网桥转发表对帧进行转发，其可能出现以下三种情况<ol><li><code>明确转发</code>：网桥清楚知道应从哪个接口进行转发</li><li><code>盲目转发</code>：网桥转发表中无登记，网桥无法知道应从哪个接口进行转发，因此只能从进入接口外的其他所有接口都进行转发</li><li><code>丢弃</code>：网桥知道无需转发帧，直接丢弃</li></ol></li></ul></li><li><p>注意事项：</p><ul><li>若网桥收到有误码的帧，直接丢弃</li><li>若网桥收到无误码的广播帧，无需查表，直接从进入接口外的其他所有接口进行转发</li><li>转发表中的每条记录都是有有效时间的，到期自动删除。因为各站点MAC地址和网桥接口的对应关系并不是永久性的，例如某个站点更换了网卡，其MAC地址就会改变</li></ul><p><img src="https://s3.bmp.ovh/imgs/2023/04/29/f61486d1bd99ed0f.png"></p></li></ul><h3 id="透明网桥的生成树协议STP"><a href="#透明网桥的生成树协议STP" class="headerlink" title="透明网桥的生成树协议STP"></a>透明网桥的生成树协议STP</h3><ul><li><p>为了提高以太网的可靠性，有时需要在两个以太网之间使用多个透明网桥来提供冗余链路</p></li><li><p>在增加冗余链路提高以太网可靠性的同时，却给网络引入了环路</p></li><li><p>网络中的广播帧将在环路中永久兜圈，造成广播帧充斥整个网络，浪费了网络资源，使得网络中各主机间无法正常通信</p></li><li><p>为避免广播帧在环路中兜圈，透明网桥利用<code>生成树协议（STP）</code>，可以在增加冗余链路提高网络可靠性的同时，又避免环路带来的问题</p><ul><li>不管网桥之间连接成了怎样复杂的带环拓扑，网桥之间通过交互网桥协议单元（BPDU），找出原网络拓扑的一个连通子集（即生成树），在这个子集里整个连通的网络不存在环路</li></ul><p><img src="https://s3.bmp.ovh/imgs/2023/04/29/f4e7e6c1b9151972.png"></p><ul><li>当首次连接网桥或网络拓扑发生变化时（认为改变或出现故障），网桥都会重新构造生成树，以确保网络的连通</li></ul></li></ul><p><img src="https://s3.bmp.ovh/imgs/2023/04/29/676ac6bf7ff548a7.png"></p><h2 id="交换式以太网"><a href="#交换式以太网" class="headerlink" title="交换式以太网"></a>交换式以太网</h2><ul><li>仅使用交换机而不使用集线器的以太网就是交换式以太网</li></ul><p><img src="https://s3.bmp.ovh/imgs/2023/04/29/ee160e14618cb0d2.png"></p><h3 id="以太网交换机"><a href="#以太网交换机" class="headerlink" title="以太网交换机"></a>以太网交换机</h3><ul><li>本质上是多接口的网桥</li><li>交换机的每个接口可以连接计算机，也可以连接集线器或另一个交换机<ul><li>当连接的是计算机或交换机时，工作在全双工方式，并能在自身内部同时连通多对接口，无需使用CSMA&#x2F;CD协议</li><li>当连接的是集线器时，工作在半双工方式，需要使用CSMA&#x2F;CD协议</li></ul></li><li>一般交换机都采用“存储转发”方式；为减少转发时延，某些交换机采用了直通交换方式</li><li>采用<code>直通交换</code>方式的交换机，在接收帧的同时就立即按帧的目的MAC地址决定该帧的转发接口，然后通过其内部基于硬件的交叉矩阵进行转发，而不必进行缓存<ul><li>直通交换时延非常小</li><li>直通交换不检查差错就直接转发出去，有可能转发一些无用帧</li></ul></li></ul><h2 id="共享式以太网与交换式以太网的对比"><a href="#共享式以太网与交换式以太网的对比" class="headerlink" title="共享式以太网与交换式以太网的对比"></a>共享式以太网与交换式以太网的对比</h2><ul><li><p>本质上可以理解为集线器与交换机的对比</p><ul><li>集线器扩大了广播域，扩大了碰撞域</li></ul><p><img src="https://s3.bmp.ovh/imgs/2023/04/29/fd13bc0be4f367d0.png"></p><ul><li>交换机扩大了广播域，隔离了碰撞域</li></ul><p><img src="https://s3.bmp.ovh/imgs/2023/04/29/7ca59bffa42f4128.png"></p></li><li><p>交换式以太网网络性能远高于共享式以太网，所以集线器早已被交换机替代</p></li></ul><h2 id="以太网MAC帧格式"><a href="#以太网MAC帧格式" class="headerlink" title="以太网MAC帧格式"></a>以太网MAC帧格式</h2><p><img src="https://s3.bmp.ovh/imgs/2023/05/04/8fe9a89c0a185475.png"></p><p>接收方可能收到的无效MAC帧包括：</p><ul><li>MAC帧长度不是整数个字节</li><li>通过MAC帧的FCS字段的值检测出帧有误码</li><li>MAC帧的长度不在64~1518字节之间</li></ul><p>接收方收到无效的MAC帧时，就简单将其丢弃，以太网的数据链路层没有重传机制</p><h2 id="虚拟局域网VLAN"><a href="#虚拟局域网VLAN" class="headerlink" title="虚拟局域网VLAN"></a>虚拟局域网VLAN</h2><p>VLAN（Virtual Local Area Network）是一种将局域网内的设备划分为与物理位置无关的逻辑组技术，这些逻辑组有某些共同的需求</p><h3 id="实现机制"><a href="#实现机制" class="headerlink" title="实现机制"></a>实现机制</h3><ul><li>IEEE 802.1Q帧（Dot One Q帧）对以太网的MAC帧格式进行了扩展，插入了4字节的VLAN标记</li></ul><p><img src="https://s3.bmp.ovh/imgs/2023/05/04/2578a4062e217fd5.png"></p><ul><li><p>VLAN标记的最后12比特称为VLAN标识符<code>VID</code>，其唯一标志了以太网帧属于哪个VLAN</p><ul><li>VID取值0~4095</li><li>0和4095都不用来表示VLAN，故用于表示VLAN的有效取值范围为1~4094</li></ul></li><li><p>802.1Q帧是由交换机来处理的，而不是用户主机来处理的</p><ul><li>当交换机收到普通的以太网帧时，会将其插入4字节的VLAN标记转变为802.1Q帧，称为“<code>打标签</code>”</li><li>当交换机转发802.1Q帧时，可能会删除其4字节VLAN标记转变为普通以太网帧，称为“<code>去标签</code>”</li></ul></li><li><p>交换机端口类型</p><ul><li><strong>Access</strong><ul><li>连接用户计算机</li><li>只能属于一个VLAN</li><li>PVID与端口所属VLAN的ID相同，默认为1</li><li>接收处理：一般只接收未打标签的普通以太网帧，并给其打标签</li><li>发送处理：若帧中VID等于端口PVID，则去标签后转发；否则丢弃</li></ul></li></ul><p><img src="https://s3.bmp.ovh/imgs/2023/05/05/5f2b4624de67676c.png" alt="主机A发送广播"></p><ul><li><p><strong>Trunk</strong></p><ul><li>交换机之间或交换机与路由器之间的连接</li><li>可以属于多个VLAN</li><li>用户可以设置PVID，默认为1</li><li>接收处理：<ul><li>接收已打标签的帧</li><li>接收未打标签的帧，根据端口的PVID值给帧打标签</li></ul></li><li>发送处理：<ul><li>帧中VID等于端口PVID，则去标签后转发</li><li>不等则直接转发</li></ul></li></ul><p><img src="https://s3.bmp.ovh/imgs/2023/05/05/ec6763971abb6553.png" alt="主机C发送广播"></p></li><li><p><strong>Hybrid</strong></p><ul><li><p>交换机之间、交换机与路由器、交换机与用户计算机之间的连接</p></li><li><p>可以属于多个VLAN</p></li><li><p>用户可以设置PVID，默认为1</p></li><li><p>接收处理：</p><ul><li>接收已打标签的帧</li><li>接收未打标签的帧，根据端口的PVID值给帧打标签</li></ul></li><li><p>发送处理：</p><ul><li>查看数据帧中VID是否在端口的去标签列表中<ul><li>若存在，则去标签后转发</li><li>不存在，则直接转发</li></ul></li></ul><p><img src="https://s3.bmp.ovh/imgs/2023/05/05/8223c8db7036bd05.png" alt="主机A向主机B发送广播"></p></li></ul></li></ul></li></ul><h2 id="无线局域网WLAN"><a href="#无线局域网WLAN" class="headerlink" title="无线局域网WLAN"></a>无线局域网WLAN</h2><p>WLAN（Wireless Local Area Network）</p><h3 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h3><ol><li><p>有固定基础设施的802.11无线局域网</p><ul><li>AP：Access Point 接入点</li><li>BSS：Basic Service Set 基础服务集</li></ul><p><img src="https://s3.bmp.ovh/imgs/2023/05/05/0ad81cba7458174f.png"></p></li><li><p>无固定基础设施移动自组织网络</p><p>自组织网络没有基本服务集中的AP，而是由一些平等状态的移动站相互通信组成的临时网络，各结点地位平等，中间结点均为转发结点，因此都具有路由器的功能</p><p><img src="https://s3.bmp.ovh/imgs/2023/05/05/f7902298dd9430ce.png"></p></li></ol><h3 id="CSMA-x2F-CA协议"><a href="#CSMA-x2F-CA协议" class="headerlink" title="CSMA&#x2F;CA协议"></a>CSMA&#x2F;CA协议</h3><p>802.11无线局域网采用了CSMA&#x2F;CA协议，即<code>载波监听多址接入/碰撞避免</code></p><p>注意的是CA并不能避免所有碰撞，而是尽量减少发生碰撞的概率</p><h4 id="基本工作原理"><a href="#基本工作原理" class="headerlink" title="基本工作原理"></a>基本工作原理</h4><ul><li><p>等待DIFS：主要是考虑到可能有其他站的高优先级帧需要发送</p></li><li><p>等待SIFS：短帧间间隔。</p></li><li><p>NAV：指出了完成这次帧的传送且信道转入空闲状态所需的时间</p></li></ul><p>目的站收到源站发送的数据帧后，等待SIFS间隔后发送确认帧，这期间信道忙，其他站要发送只能推迟;当该次传输完成后，其他站需要等待DIFS间隔和随机退避时间后再发送帧</p><p><img src="https://s3.bmp.ovh/imgs/2023/05/06/6e5eaabe81901f3c.png" alt="帧发送过程"></p><p>为了进一步降低发生碰撞的概率，802.11无线局域网允许源站对信道进行<code>预约</code></p><ul><li>RTS：短的控制帧，包括源地址，目的地址和本次通信（包括目的站发回确认帧所需的时间）所需的持续时间</li><li>CTS：短的响应控制帧，包括本次通信所需的持续时间</li></ul><p>RTS若发生碰撞，源站就不可能接收到CTS帧，此时源站就会执行退避算法重传RTS帧；虽然进行信道预约会带来额外的开销，但由于两个帧都很短，且发生碰撞概率，碰撞产生及其自身的开销都很小，因此为降低碰撞概率。这点小代价还是值得的</p><p><img src="https://s3.bmp.ovh/imgs/2023/05/06/10d9df0011a6f177.png" alt="帧预约后发送过程"></p><h4 id="退避算法"><a href="#退避算法" class="headerlink" title="退避算法"></a>退避算法</h4><ul><li>站点会为退避计时器设置一个随机的退避时间<ul><li>当退避时间减小到0时，就开始发送</li><li>当退避时间未到0而信道又转为忙态时，此时需要冻结退避计时器的值，重新等待信道转为空闲，再经过帧间间隔DIFS后，继续启动退避计时器</li></ul></li></ul><p>A开始发送帧，BCD也想发送，发现信道处于忙状态，等待DIFS间隔后，启动退避计时器；假如C的退避时间最短，此时信道也处于空闲状态，C立即发送帧，BD对应退避时间冻结，等待信道转为空闲及DIFS间隔后，退避计时器解冻，重新开始计时…然后依次类推（如图所示）</p><p><img src="https://s3.bmp.ovh/imgs/2023/05/06/f23b1fb076a8e8c0.png" alt="退避算法图解"></p><h3 id="MAC帧"><a href="#MAC帧" class="headerlink" title="MAC帧"></a>MAC帧</h3><ul><li>数据帧<ul><li>用于站点间传输数据</li></ul></li></ul><p><img src="https://s3.bmp.ovh/imgs/2023/05/06/a5c6f162a699d2f4.png" alt="数据帧格式"></p><p><img src="https://s3.bmp.ovh/imgs/2023/05/06/349fa5794d84f03c.png"></p><ul><li>控制帧<ul><li>通常与数据帧搭配使用</li><li>负责区域清空，虚拟载波监听的维护及信道的接入，并于收到数据帧时予以确认</li><li>ACK帧、RTS帧及CTS帧等都属于该范畴</li></ul></li><li>管理帧<ul><li>用于加入或退出无线网络，以及处理AP之间连接的转移事宜</li><li>信标帧、关联请求帧以及身份认证帧等都属于管理帧</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 关于学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入理解Java虚拟机之类加载</title>
      <link href="/2023/06/01/xu-ni-ji-lei-jia-zai-ji-zhi/"/>
      <url>/2023/06/01/xu-ni-ji-lei-jia-zai-ji-zhi/</url>
      
        <content type="html"><![CDATA[<h2 id="类加载机制"><a href="#类加载机制" class="headerlink" title="类加载机制"></a>类加载机制</h2><h3 id="类加载时机"><a href="#类加载时机" class="headerlink" title="类加载时机"></a>类加载时机</h3><p>一个类型从被加载到虚拟机内存中开始，到卸载出内存为止，其生命周期如图所示：</p><p><img src="https://s3.bmp.ovh/imgs/2022/04/29/26b3a2a0db4237da.png" alt="image-20220124103017142"></p><p>对于初始化阶段，《Java虚拟机规范》严格规定了<strong>有且只有</strong>六种情况必须立即对类进行“初始化”，以下行为称为对一个类型的<code>主动引用</code>：</p><ol><li>遇到<code>new、getstatic、putstatic或invokestatic</code>这四条字节码指令时，如果类型没有进行过初始化，则需要先触发其初始化阶段<ul><li>使用<code>new</code>关键字实例化对象的时候</li><li>读取和设置静态字段的时候（被final修饰及已在编译器把结果放入常量池中的静态字段除外）</li><li>调用静态方法的时候</li></ul></li><li>使用反射调用相应类型但其并未进行过初始化的时候</li><li>当初始化某个类，而其父类并未进行过初始化的时候，则先触发父类的初始化</li><li>当虚拟机启动的时候，会先初始化主类（即包含main()方法的那个类）</li><li>当使用JDK 7新加入的动态语言支持时，如果一个<code>java.lang.invoke.MethodHandle</code>实例最后的解析结果为<code>REF_getStatic、REF_putStatic、REF_invokeStatic、REF_newInvokeSpecial</code>四种类型的方法句柄，并且这个方法句柄对应的类没有进行过初始化，则需要先触发其初始化</li><li>JDK8中，若某个接口定义了默认方法（<code>default</code>），则当其实现类发生初始化的时候，应先触发接口的初始化</li></ol><hr><p>除了主动引用之外，所有引用类型的方式都不会触发初始化，称为<code>被动引用</code>：</p><ol><li>通过子类引用父类的静态字段，不会导致子类初始化</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SuperClass</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"SuperClass init!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> value <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SubClass</span> <span class="token keyword">extends</span> <span class="token class-name">SuperClass</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"SubClass init!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/*** 非主动使用类字段演示**/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NotInitialization</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">SubClass</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>输出结果：    <span class="token class-name">SuperClass</span> init<span class="token operator">!</span>    <span class="token number">123</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>通过数组定义来引用类，不会触发此类的初始化</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NotInitialization</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">SuperClass</span><span class="token punctuation">[</span><span class="token punctuation">]</span> sca <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SuperClass</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>无输出结果<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>常量在编译阶段会存入调用类的常量池中，本质上没有直接引用到定义常量的类，因此不会触发定义常量的类的初始化</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConstClass</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ConstClass init!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">HELLOWORLD</span> <span class="token operator">=</span> <span class="token string">"hello world"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*** 非主动使用类字段演示**/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NotInitialization</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">ConstClass</span><span class="token punctuation">.</span><span class="token constant">HELLOWORLD</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>输出结果：    hello world<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="类加载过程"><a href="#类加载过程" class="headerlink" title="类加载过程"></a>类加载过程</h3><ol><li><p>加载：加载二进制然后转换成JVM需要的结构，最后生成对应Class对象</p><ul><li>通过一个类的全限定名来获取定义此类的二进制字节流</li><li>将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构</li><li>在内存中生成一个代表这个类的java.lang.Class对象，作为方法区这个类的各种数据的访问入口</li></ul><p><img src="https://s3.bmp.ovh/imgs/2022/04/28/1adc7ecc8e085aed.png" alt="image-20220124155045831"></p></li><li><p>验证：确保Class文件的字节流中包含的信息符合《Java虚拟机规范》的全部约束要求，保证这些信息被当作代码运行后不会危害虚拟机自身的安全</p><p><img src="https://s3.bmp.ovh/imgs/2022/04/28/f82f49dfb865e317.png" alt="image-20220124160954798"></p></li><li><p>准备：准备阶段是正式为类中定义的变量（即静态变量，被static修饰的变量）分配内存并设置类变量初始值的阶段</p><ul><li><pre><code class="java">// 此处准备阶段后初始值为0，需等到初始化阶段后才会赋值为123public static int value = 123;<pre class="line-numbers language-none"><code class="language-none">- &#96;&#96;&#96;java  &#x2F;&#x2F; 此处准备阶段后初始值为123  public static final int value &#x3D; 123;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></code></pre></li></ul></li><li><p>解析：解析阶段是Java虚拟机将常量池内的符号引用替换为直接引用的过程</p><blockquote><p>符号引用：class文件中常量池的CONSTANT_Class_info、CONSTANT_Fieldref_info、CONSTANT_Methodref_info这几个结构所存储的字符串常量</p><p>直接引用：能定位到所引用的真正内容</p></blockquote><p><img src="https://s3.bmp.ovh/imgs/2022/04/28/ee2ac429be894ad8.png" alt="image-20220124171344715"></p></li><li><p>初始化：该阶段开始真正执行Java程序代码（初始化阶段就是执行类构造器<clinit>()方法的过程）</p><ul><li><p><code>&lt;clinit&gt;()</code>方法是由编译器自动收集类中的所有类变量的赋值动作和静态语句块（static{}块）中的语句合并产生的，编译器收集的顺序是由语句在源文件中出现的顺序决定的，静态语句块中只能访问到定义在静态语句块之前的变量，定义在它之后的变量，在前面的静态语句块可以赋值，但是不能访问</p><p><img src="https://s3.bmp.ovh/imgs/2022/04/28/928a2d7f65bdb4a6.png" alt="image-20220125094235856"></p></li><li><p>父类的<clinit>()方法要先于子类的执行</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 父类的静态语句块要先于子类的赋值操作，因此B的值应是2</span><span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Parent</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token class-name">A</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">A</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Sub</span> <span class="token keyword">extends</span> <span class="token class-name">Parent</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token class-name">B</span> <span class="token operator">=</span> <span class="token class-name">A</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Sub<span class="token punctuation">.</span>B</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>当一个类中没有静态语句块，也没有变量的赋值操作时，编译器是不会为该类生成<clinit>方法的</p></li><li><p>接口与类又有不同，只有当父接口中定义的变量被使用时，才会触发父接口的初始化；实现类初始化时也不会执行接口的<clinit>方法</p></li><li><p>Java虚拟机必须保证一个类的<clinit>方法在多线程环境下被正确地加锁同步，否则可能会导致线程阻塞</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">DeadLoopClass</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 如果不加上这个if语句，编译器将提示“Initializer must be able to complete normally” 并拒绝编译</span>        <span class="token comment">// 因为如果不加if，就会进入while死循环，虚拟机检查不通过；加了if后，虚拟机就只会单纯地检查if语句，而不会发现内部的死循环</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"init DeadLoopClass"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Runnable</span> script <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"start"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">DeadLoopClass</span> dlc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DeadLoopClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" run over"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token class-name">Thread</span> thread1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>script<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Thread</span> thread2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>script<span class="token punctuation">)</span><span class="token punctuation">;</span>    thread1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    thread2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>最终运行结果：    <span class="token class-name">Thread</span><span class="token punctuation">[</span><span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span>main<span class="token punctuation">]</span>start<span class="token class-name">Thread</span><span class="token punctuation">[</span><span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span>main<span class="token punctuation">]</span>start<span class="token class-name">Thread</span><span class="token punctuation">[</span><span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span>main<span class="token punctuation">]</span>init <span class="token class-name">DeadLoopClass</span>一个线程进入了死循环，另一个线程在阻塞等待中<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ol><h3 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h3><h4 id="类与类加载器"><a href="#类与类加载器" class="headerlink" title="类与类加载器"></a>类与类加载器</h4><p>每一个类加载器，都有一个独立的类名称空间。若两个类来自同一个Class文件，被同一个Java虚拟机加载，但类加载器不同，那么这两个类就不相等</p><ul><li><p>不同类加载器对<code>instanceof</code>关键字的影响</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ClassLoaderTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 自定义的类加载器</span>        <span class="token class-name">ClassLoader</span> myLoader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> <span class="token function">loadClass</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ClassNotFoundException</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    <span class="token comment">// 获取同一路径下的.class文件</span>                    <span class="token class-name">String</span> fileName <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">".class"</span><span class="token punctuation">;</span>                    <span class="token comment">// 加载.class文件</span>                    <span class="token class-name">InputStream</span> is <span class="token operator">=</span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>is <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span>is<span class="token punctuation">.</span><span class="token function">available</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    is<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> <span class="token function">defineClass</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> b<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ClassNotFoundException</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token comment">// 采用自定义类加载器加载类并实例化</span>        <span class="token class-name">Object</span> obj <span class="token operator">=</span> myLoader<span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span><span class="token string">"org.example.ClassLoaderTest"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>example<span class="token punctuation">.</span></span>ClassLoaderTest</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>输出结果：    <span class="token keyword">class</span> <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>example<span class="token punctuation">.</span></span>ClassLoaderTest</span> <span class="token comment">// 自定义类加载器加载</span><span class="token boolean">false</span> <span class="token comment">// 一个是自定义类加载器加载，另一个是Java虚拟机默认应用程序类加载器加载，所以类型检查结果不一致</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s3.bmp.ovh/imgs/2022/04/28/845786937ca76711.png" alt="image-20220125105928093"></p></li></ul><h4 id="双亲委派模型"><a href="#双亲委派模型" class="headerlink" title="双亲委派模型"></a>双亲委派模型</h4><p>类加载器的双亲委派模型：</p><p><img src="https://s3.bmp.ovh/imgs/2022/04/28/7a4003032bf04dcd.png" alt="image-20220126153048590"></p><p>其工作过程：</p><ul><li>类加载器收到类加载请求后会先把请求委派给父加载器完成，因此所有请求最终都会传达到最顶层的启动类加载器中；只有父加载器无法完成加载抛出异常时，子加载器才会尝试自己去完成加载</li><li>目的是为了保证应用程序的稳定有序</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 双亲委派模型源码实现</span><span class="token keyword">protected</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> <span class="token function">loadClass</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">boolean</span> resolve<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ClassNotFoundException</span><span class="token punctuation">&#123;</span>    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token function">getClassLoadingLock</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 检查类是否已经被加载</span>        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> c <span class="token operator">=</span> <span class="token function">findLoadedClass</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">long</span> t0 <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>parent <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token comment">// 父加载器加载</span>                    c <span class="token operator">=</span> parent<span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                    <span class="token comment">// 父加载器为空，使用默认的启动类加载器</span>                    c <span class="token operator">=</span> <span class="token function">findBootstrapClassOrNull</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 父加载器无法加载完成，抛出异常</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">long</span> t1 <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 父加载器无法完成，子加载器自己动手加载</span>                c <span class="token operator">=</span> <span class="token function">findClass</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// this is the defining class loader; record the stats</span>                <span class="token class-name"><span class="token namespace">sun<span class="token punctuation">.</span>misc<span class="token punctuation">.</span></span>PerfCounter</span><span class="token punctuation">.</span><span class="token function">getParentDelegationTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addTime</span><span class="token punctuation">(</span>t1 <span class="token operator">-</span> t0<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name"><span class="token namespace">sun<span class="token punctuation">.</span>misc<span class="token punctuation">.</span></span>PerfCounter</span><span class="token punctuation">.</span><span class="token function">getFindClassTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addElapsedTimeFrom</span><span class="token punctuation">(</span>t1<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name"><span class="token namespace">sun<span class="token punctuation">.</span>misc<span class="token punctuation">.</span></span>PerfCounter</span><span class="token punctuation">.</span><span class="token function">getFindClasses</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>resolve<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">resolveClass</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> c<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="破坏双亲委派模型"><a href="#破坏双亲委派模型" class="headerlink" title="破坏双亲委派模型"></a>破坏双亲委派模型</h4><ol><li><p>第一次破坏：</p><blockquote><p>由于双亲委派模型在JDK 1.2之后才被引入，但是类加载器的概念和抽象类java.lang.ClassLoader则在Java的第一个版本中就已经存在，因此为了兼容已有代码，做了一些妥协：即引导大家尽可能地重写java.lang.ClassLoader中的<code>findClass()</code>方法，而不要重写loadClass()方法</p></blockquote><p><img src="https://s3.bmp.ovh/imgs/2022/04/28/e2c1782c155a908b.png" alt="image-20220126154642582"></p></li><li><p>第二次破坏：</p><blockquote><p>由于模型自身缺陷导致，基础类基本都能够被上层加载器加载，但当基础类想要调用用户代码的时候，就会存在问题。因此引入了<code>线程上下文类加载器</code>（这个类加载器可以通过java.lang.Thread类的setContext-ClassLoader()方法进行设置，如果创建线程时还未设置，它将会从父线程中继承一个，如果在应用程序的全局范围内都没有设置过的话，那这个类加载器默认就是应用程序类加载器）</p></blockquote><p>以SPI为例：</p><blockquote><p>SPI全称是 Service Provider Interface，是 Java 提供的一套用来被第三方实现或者扩展的 API，它可以用来启用框架扩展和替换组件。</p><p>简而言之，通过在 META-INF&#x2F;services 目录下，创建一个以接口全限定名为命名的文件（内容为实现类的全限定名），即可自动加载这一种实现，其主要使用 <strong>java.util.ServiceLoader</strong> 类进行动态装载</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">java<span class="token punctuation">.</span>util</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">ServiceLoader</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">S</span><span class="token punctuation">></span></span> <span class="token keyword">implements</span> <span class="token class-name">Iterable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">S</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">PREFIX</span> <span class="token operator">=</span> <span class="token string">"META-INF/services/"</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>ServiceLoader</code>是由启动类加载器加载的，但加载它的同时还需要加载具体的类方法实现，而类方法实现在应用代码，由应用程序类加载器加载，故出现了反向双亲委派的情况</p><p><img src="https://s3.bmp.ovh/imgs/2022/04/28/381b5281e383d863.png" alt="image-20220126171854523"></p></li><li><p>第三次破坏：</p><blockquote><p>由于用户对程序动态性的追求而导致的，即热更新，热部署等。出现了OSGi，其自定义了类加载器机制的实现，不再是双亲委派模型的树形结构，而是更加复杂的网状结构</p></blockquote></li></ol>]]></content>
      
      
      <categories>
          
          <category> 深入理解Java虚拟机系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 深入理解Java虚拟机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入理解Java虚拟机之虚拟机执行子系统</title>
      <link href="/2023/06/01/xu-ni-ji-zhi-xing-zi-xi-tong/"/>
      <url>/2023/06/01/xu-ni-ji-zhi-xing-zi-xi-tong/</url>
      
        <content type="html"><![CDATA[<h1 id="三、虚拟机执行子系统"><a href="#三、虚拟机执行子系统" class="headerlink" title="三、虚拟机执行子系统"></a>三、虚拟机执行子系统</h1><h2 id="类文件结构"><a href="#类文件结构" class="headerlink" title="类文件结构"></a>类文件结构</h2><p>Java虚拟机的语言无关性：</p><p><img src="https://s3.bmp.ovh/imgs/2022/04/29/c122229056bd84dc.png" alt="image-20220119103243062"></p><h3 id="Class类文件结构"><a href="#Class类文件结构" class="headerlink" title="Class类文件结构"></a>Class类文件结构</h3><blockquote><p>Class文件是一组以8个字节为基础单位的二进制流，各个数据项目严格按照顺序紧凑地排列在文件之中，中间没有添加任何分隔符，这使得整个Class文件中存储的内容几乎全部是程序运行的必要数据，没有空隙存在。当遇到需要占用8个字节以上空间的数据项时，则会按照高位在前的方式分割成若干个8个字节进行存储</p></blockquote><blockquote><p>根据《Java虚拟机规范》的规定，Class文件格式采用一种类似于C语言结构体的伪结构来存储数据，这种伪结构中只有两种数据类型：“无符号数”和“表”</p></blockquote><ul><li>无符号数是基本数据类型。可表示数字，索引引用，数量值或按UTF-8编码构成的字符串值。u1,u2,u4,u8分别代表1、2、4、8字节</li><li>表是由多个无符号数或其他表构成的符合数据类型，常以<code>_info</code>结尾。可表示有层次关系的数据</li></ul><p>Class文件格式：</p><p><img src="https://s3.bmp.ovh/imgs/2022/04/29/0ab9b8622e5abfc2.png" alt="image-20220119110729948"></p><h4 id="魔数与Class文件版本"><a href="#魔数与Class文件版本" class="headerlink" title="魔数与Class文件版本"></a>魔数与Class文件版本</h4><p>Class文件头四个字节称为<code>魔数</code>，作用是判断该Class文件能否被Java虚拟机接收。接着的第5和第6个字节是次版本号（MinorVersion），第7和第8个字节是主版本号（Major Version），高版本JDK向下兼容Class文件，但不能运行更高版本的Class文件</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>example</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Hello</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> m<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">inc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>以JDK1.8做演示。去到文件目录下打开命令行，使用命令<code>javac Hello.java</code>，编译生成<code>Hello.class</code>文件，使用VsCode（装上<code>Hex Editor</code>插件即可查看编辑16进制文件）打开。可看到魔数是<code>0xCAFEBABE</code>，主版本号是<code>0x0034</code>即十进制的<code>52</code></li></ol><p><img src="https://s3.bmp.ovh/imgs/2022/04/29/4d79191d3fee248d.png" alt="img"></p><h4 id="常量池"><a href="#常量池" class="headerlink" title="常量池"></a>常量池</h4><p>接着版本号之后的就是常量池，是占用Class文件空间最大的数据项目之一，也是第一个出现的表类型数据项目，常量池中的每一项常量都是一个表。由于常量池中常量的数量并不固定，因此在入口放置了一个u2类型的数据，代表常量池容量计数值（从1开始计数）。</p><p><img src="https://s3.bmp.ovh/imgs/2022/04/29/6dc70ebfc621a067.png" alt="图中代表常量池中有1个常量池容量计数值和18个常量"></p><p>常量池主要存放两大类常量：</p><ol><li><strong>字面量</strong><ul><li>文本字符串、被声明为final的常量值</li></ul></li><li><strong>符号引用</strong><ul><li>被模块导出或者开放的包（Package）</li><li>类和接口的全限定名（Fully Qualified Name）</li><li>字段的名称和描述符（Descriptor）</li><li>方法的名称和描述符</li><li>方法句柄和方法类型（Method Handle、Method Type、Invoke Dynamic）</li><li>动态调用点和动态常量（Dynamically-Computed Call Site、Dynamically-Computed Constant）</li></ul></li></ol><p>利用<code>javap</code>命令分析Class文件字节码：</p><ol><li><p>执行命令<code>javap -verpose Hello.class</code>，可以看到常量池中18个常量已经罗列出来</p><p><img src="https://s3.bmp.ovh/imgs/2022/04/29/33a82f1f288a32e0.png" alt="image-20220120150413660"></p></li></ol><h4 id="访问标志"><a href="#访问标志" class="headerlink" title="访问标志"></a>访问标志</h4><p>常量池结束之后的两个字节代表访问标志，用于识别一些类或接口层次的访问信息。</p><p><img src="https://s3.bmp.ovh/imgs/2022/04/29/414ce4be4a842519.png" alt="访问标志"></p><p>在上述代码中，Hello只是一个用public修饰的普通Java类，因此访问标志只有<code>ACC_PUBLIC</code>和<code>ACC_SUPER</code>为true，即0x0001 | 0x0020 &#x3D; 0x0021，符合下图：</p><p><img src="https://s3.bmp.ovh/imgs/2022/04/29/9c868d444a260cb8.png" alt="image-20220120144304067"></p><h4 id="类索引、父类索引与接口索引集合"><a href="#类索引、父类索引与接口索引集合" class="headerlink" title="类索引、父类索引与接口索引集合"></a>类索引、父类索引与接口索引集合</h4><p>类索引（this_class）和父类索引（super_class）都是一个u2类型的数据，而接口索引集合（interfaces）是一组u2类型的数据的集合，Class文件中由这三项数据来确定该类型的继承关系。类索引用于确定这个类的全限定名，父类索引用于确定这个类的父类的全限定名，接口索引集合用于描述该类实现了哪些接口。</p><p>由图中可以看到类索引是3，父类索引是4，接口索引集合大小是0：</p><p><img src="https://s3.bmp.ovh/imgs/2022/04/29/c551dc35003b03c9.png" alt="image-20220120150138155"></p><h4 id="字段表集合"><a href="#字段表集合" class="headerlink" title="字段表集合"></a>字段表集合</h4><p>字段表（field_info）用于描述接口或者类中声明的变量。</p><p>字段访问标志：</p><p><img src="https://s3.bmp.ovh/imgs/2022/04/29/4adf452f6cb5f79a.png" alt="image-20220120151831396"></p><p>结合16进制编码查看，<code>fields_count</code>是容量计数器，0x0001表示只有一个字段表数据；<code>access_flags</code>是访问标志，值是0x0002，结合上图可以知道表示的是private修饰符；<code>name_index</code>索引是0x0005，结合常量池图看可以知道是代表字段值名称m；<code>descriptor_index</code>索引是0x0006，同理可知道其值是I(代表的是基本数据类型int)</p><p><img src="https://s3.bmp.ovh/imgs/2022/04/29/62701ec4aa8484e2.png" alt="image-20220120152355735"></p><p><img src="https://s3.bmp.ovh/imgs/2022/04/29/2a6ea9aca4bf668f.png" alt="image-20220120152613278"></p><h4 id="方法表集合"><a href="#方法表集合" class="headerlink" title="方法表集合"></a>方法表集合</h4><p>方法表集合与字段表集合类似，<code>methods_count</code>代表的是方法容量计数器，0x0002表示有两个方法（默认的构造器init和自定义的inc）；<code>access_flags=0x0001</code>表示的是public修饰符；<code>name_index</code>索引值是0x0007，结合常量池图发现代表的正是init方法；<code>descriptor_index</code>的索引值是0x0008，对应常量”()V”；<code>attributes_count</code>表示属性表中有一项属性；<code>attribute_name_index</code>索引值是0x0009，对应常量”Code”（虚拟机规范中预定义的属性），表示的是此属性是方法的字节码描述</p><p><img src="https://s3.bmp.ovh/imgs/2022/04/29/275c16e726c0550a.png" alt="image-20220120153939832"></p><p><img src="https://s3.bmp.ovh/imgs/2022/04/29/35ecf1d70a5424a3.png" alt="image-20220120154904174"></p><h4 id="属性表集合"><a href="#属性表集合" class="headerlink" title="属性表集合"></a>属性表集合</h4><ul><li>max_stack：操作数栈深度最大值</li><li>max_locals：局部变量表所需存储空间</li><li>code_length：代表字节码长度</li><li>code：存储字节码指令的系列字节流</li></ul><p>下图中，操作数栈的最大深度和本地变量表的容量都为0x0001，字节码区域所占空间的长度为0x0005。虚拟机读取到字节码区域的长度后，按照顺序依次读入紧随的5个字节，并根据虚拟机字节码指令表翻译出所对应的字节码指令。</p><p><img src="https://s3.bmp.ovh/imgs/2022/04/29/f1aecbe81f5ef977.png" alt="image-20220120161237537"></p><p>接着查看常量表部分后的内容，结合代码发现，无论是init还是inc方法都并没有传入任何参数，但args_size&#x3D;1，这是因为在任何实例方法里面，都可以通过“this”关键字访问到此方法所属的对象，而且只对实例方法有效，因此都会默认传入this；当把inc方法使用static修饰时（此时方法属于类），args_size&#x3D;0</p><p><img src="https://s3.bmp.ovh/imgs/2022/04/29/d2f51564278e344c.png" alt="image-20220120163044040"></p><h3 id="字节码指令"><a href="#字节码指令" class="headerlink" title="字节码指令"></a>字节码指令</h3><p>Java虚拟机的指令由一个字节长度的、代表着某种特定操作含义的数字（称为操作码，Opcode）以及跟随其后的零至多个代表此操作所需的参数（称为操作数，Operand）构成。Java虚拟机解释器的基本操作模式如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">do</span> <span class="token punctuation">&#123;</span>    自动计算<span class="token constant">PC</span>寄存器的值加<span class="token number">1</span><span class="token punctuation">;</span>    根据<span class="token constant">PC</span>寄存器指示的位置，从字节码流中取出操作码<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>字节码存在操作数<span class="token punctuation">)</span> 从字节码流中取出操作数<span class="token punctuation">;</span>执行操作码所定义的操作<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>字节码流长度 <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="字节码和数据类型"><a href="#字节码和数据类型" class="headerlink" title="字节码和数据类型"></a>字节码和数据类型</h4><blockquote><p>在Java虚拟机的指令集中，大多数指令都包含其操作所对应的数据类型信息</p><p>对于大部分与数据类型相关的字节码指令，它们的操作码助记符中都有特殊的字符来表明专门为哪种数据类型服务：i代表对int类型的数据操作，l代表long，s代表short，b代表byte，c代表char，f代表float，d代表double，a代表reference</p></blockquote><h4 id="加载和存储指令"><a href="#加载和存储指令" class="headerlink" title="加载和存储指令"></a>加载和存储指令</h4><p>用于将数据在栈帧中的局部变量表和操作数栈之间来回传输</p><blockquote><p>PS：<n>表示的是一组指令，如iload_<n>，其代表了iload_0、iload_1、iload_2和iload_3</p></blockquote><ul><li><p>将一个局部变量加载到操作栈：<code>iload、iload_&lt;n&gt;、lload、lload_&lt;n&gt;、fload、fload_&lt;n&gt;、dload、dload_&lt;n&gt;、aload、aload_&lt;n&gt;</code></p></li><li><p>将一个数值从操作数栈存储到局部变量表：<code>istore、istore_&lt;n&gt;、lstore、lstore_&lt;n&gt;、fstore、fstore_&lt;n&gt;、dstore、dstore_&lt;n&gt;、astore、astore_&lt;n&gt;</code></p></li><li><p>将一个常量加载到操作数栈：<code>bipush、sipush、ldc、ldc_w、ldc2_w、aconst_null、iconst_m1、iconst_&lt;i&gt;、lconst_&lt;l&gt;、fconst_&lt;f&gt;、dconst_&lt;d&gt;</code></p></li><li><p>扩充局部变量表的访问索引的指令：<code>wide</code></p></li></ul><h4 id="运算指令"><a href="#运算指令" class="headerlink" title="运算指令"></a>运算指令</h4><p>用于对两个操作数栈上的值进行某种特定运算，并把结果重新存入到操作栈顶</p><ul><li>加法指令：<code>iadd、ladd、fadd、dadd</code></li><li>减法指令：<code>isub、lsub、fsub、dsub</code></li><li>乘法指令：<code>imul、lmul、fmul、dmul</code></li><li>除法指令：<code>idiv、ldiv、fdiv、ddiv</code></li><li>求余指令：<code>irem、lrem、frem、drem</code></li><li>取反指令：<code>ineg、lneg、fneg、dneg</code></li><li>位移指令：<code>ishl、ishr、iushr、lshl、lshr、lushr</code></li><li>按位或指令：<code>ior、lor</code></li><li>按位与指令：<code>iand、land</code></li><li>按位异或指令：<code>ixor、lxor</code></li><li>局部变量自增指令：<code>iinc</code></li><li>比较指令：<code>dcmpg、dcmpl、fcmpg、fcmpl、lcmp</code></li></ul><h4 id="类型转换指令"><a href="#类型转换指令" class="headerlink" title="类型转换指令"></a>类型转换指令</h4><p>用于将两种不同的数值类型相互转换</p><ul><li>Java虚拟机直接支持小范围向大范围的安全转换<ul><li>int类型到long、float或者double类型</li><li>long类型到float、double类型</li><li>float类型到double类型</li></ul></li><li>反之必须使用转换指令：<code>i2b、i2c、i2s、l2i、f2i、f2l、d2i、d2l和d2f</code>，其中可能会出现精度丢失问题</li></ul><h4 id="对象创建与访问指令"><a href="#对象创建与访问指令" class="headerlink" title="对象创建与访问指令"></a>对象创建与访问指令</h4><p>Java虚拟机对类实例和数组的创建与操作使用了不同的字节码指令，对象创建后，就可以通过对象访问指令获取对象实例或者数组实例中的字段或者数组元素</p><ul><li>创建类实例的指令：<code>new</code></li><li>创建数组的指令：<code>newarray、anewarray、multianewarray</code></li><li>访问类字段（static字段，或者称为类变量）和实例字段（非static字段，或者称为实例变量）的指令：<code>getfield、putfield、getstatic、putstatic</code></li><li>把一个数组元素加载到操作数栈的指令：<code>baload、caload、saload、iaload、laload、faload、daload、aaload</code></li><li>将一个操作数栈的值储存到数组元素中的指令：<code>bastore、castore、sastore、iastore、fastore、dastore、aastore</code></li><li>取数组长度的指令：<code>arraylength</code></li><li>检查类实例类型的指令：<code>instanceof、checkcast</code></li></ul><h4 id="操作数栈管理指令"><a href="#操作数栈管理指令" class="headerlink" title="操作数栈管理指令"></a>操作数栈管理指令</h4><ul><li>将操作数栈的栈顶一个或两个元素出栈：<code>pop、pop2</code></li><li>复制栈顶一个或两个数值并将复制值或双份的复制值重新压入栈顶：<code>dup、dup2、dup_x1、dup2_x1、dup_x2、dup2_x2</code></li><li>将栈最顶端的两个数值互换：<code>swap</code></li></ul><h4 id="控制转移指令"><a href="#控制转移指令" class="headerlink" title="控制转移指令"></a>控制转移指令</h4><p>简单理解，控制指令就是在有条件或无条件地修改PC寄存器的值</p><ul><li>条件分支：<code>ifeq、iflt、ifle、ifne、ifgt、ifge、ifnull、ifnonnull、if_icmpeq、if_icmpne、if_icmplt、if_icmpgt、if_icmple、if_icmpge、if_acmpeq和if_acmpne</code></li><li>复合条件分支：<code>tableswitch、lookupswitch</code></li><li>无条件分支：<code>goto、goto_w、jsr、jsr_w、ret</code></li></ul><h4 id="方法调用和返回指令"><a href="#方法调用和返回指令" class="headerlink" title="方法调用和返回指令"></a>方法调用和返回指令</h4><p>方法调用指令：</p><ul><li><code>invokevirtual指令</code>：用于调用对象的实例方法，根据对象的实际类型进行分派（虚方法分派），这也是Java语言中最常见的方法分派方式。</li><li><code>invokeinterface指令</code>：用于调用接口方法，它会在运行时搜索一个实现了这个接口方法的对象，找出适合的方法进行调用。</li><li><code>invokespecial指令</code>：用于调用一些需要特殊处理的实例方法，包括实例初始化方法、私有方法和父类方法。</li><li><code>invokestatic指令</code>：用于调用类静态方法（static方法）。</li><li><code>invokedynamic指令</code>：用于在运行时动态解析出调用点限定符所引用的方法。并执行该方法</li></ul><p>返回指令：</p><ul><li><code>ireturn（当返回值是boolean、byte、char、short和int类型时使用）、lreturn、freturn、dreturn和areturn、return</code></li></ul><h4 id="同步指令"><a href="#同步指令" class="headerlink" title="同步指令"></a>同步指令</h4><p>Java虚拟机可以支持方法级的同步和方法内部一段指令序列的同步，这两种同步结构都是使用管程（Monitor，更常见的是直接将它称为“锁”）来实现的。</p><ul><li>方法级的同步是隐式的，无需通过字节码的方式控制，它实现在方法的调用和返回操作中</li><li>同步一段指令通常是由Java语言中的<code>synchronized</code>关键字来表示，而对应的字节码是<code>monitorenter、monitorexit</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> 深入理解Java虚拟机系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 深入理解Java虚拟机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入理解Java虚拟机之工具篇</title>
      <link href="/2023/06/01/xu-ni-ji-xing-neng-jian-kong-gu-zhang-chu-li-gong-ju/"/>
      <url>/2023/06/01/xu-ni-ji-xing-neng-jian-kong-gu-zhang-chu-li-gong-ju/</url>
      
        <content type="html"><![CDATA[<h2 id="虚拟机性能监控、故障处理工具"><a href="#虚拟机性能监控、故障处理工具" class="headerlink" title="虚拟机性能监控、故障处理工具"></a>虚拟机性能监控、故障处理工具</h2><blockquote><p>给一个系统定位问题的时候，知识、经验是关键基础，数据是依据，工具是运用知识处理数据的手段。这里说的数据包括但不限于异常堆栈、虚拟机运行日志、垃圾收集器日志、线程快照（threaddump&#x2F;javacore文件）、堆转储快照（heapdump&#x2F;hprof文件）等。恰当地使用虚拟机故障处理、分析的工具可以提升我们分析数据、定位并解决问题的效率</p></blockquote><h3 id="基础故障处理工具"><a href="#基础故障处理工具" class="headerlink" title="基础故障处理工具"></a>基础故障处理工具</h3><p>JDK的bin目录下提供了许多小工具</p><img src="https://s3.bmp.ovh/imgs/2022/04/21/d431c5626f0b2ce7.png" alt="image-20220112115227650" style="zoom: 80%;" /><h4 id="jps：虚拟机进程状况工具"><a href="#jps：虚拟机进程状况工具" class="headerlink" title="jps：虚拟机进程状况工具"></a>jps：虚拟机进程状况工具</h4><blockquote><p>可以列出正在运行的虚拟机进程，并显示虚拟机执行主类（Main Class，main()函数所在的类）名称以及这些进程的本地虚拟机唯一ID（LVMID，Local Virtual Machine Identifier）</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">jps <span class="token punctuation">[</span>选项<span class="token punctuation">]</span> <span class="token punctuation">[</span>hostid<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://s3.bmp.ovh/imgs/2022/04/21/4e14701dc4692d0d.png" alt="image-20220112191015040"></p><p>jps主要选项：</p><table><thead><tr><th align="center">选项</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">-q</td><td align="center">只输出LVMID，省略主类的名称</td></tr><tr><td align="center">-m</td><td align="center">输出虚拟机进程启动时传递给主类main()函数的参数</td></tr><tr><td align="center">-l</td><td align="center">输出主类的全名，若进程执行的是JAR包，输出JAR路径</td></tr><tr><td align="center">-v</td><td align="center">输出虚拟机进程启动时的JVM参数</td></tr></tbody></table><h4 id="jstat：虚拟机统计信息监视工具"><a href="#jstat：虚拟机统计信息监视工具" class="headerlink" title="jstat：虚拟机统计信息监视工具"></a>jstat：虚拟机统计信息监视工具</h4><blockquote><p>jstat（JVM Statistics Monitoring Tool）是用于监视虚拟机各种运行状态信息的命令行工具。它可以显示本地或者远程虚拟机进程中的类加载、内存、垃圾收集、即时编译等运行时等数据</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">jstat <span class="token punctuation">[</span>选项 vmid<span class="token punctuation">(</span>虚拟机进程ID<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>间隔时间<span class="token punctuation">]</span> <span class="token punctuation">[</span>执行次数<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://s3.bmp.ovh/imgs/2022/04/21/b6f5ab287ba7cb67.png" alt="image-20220112193733480"></p><h4 id="jinfo：Java配置信息工具"><a href="#jinfo：Java配置信息工具" class="headerlink" title="jinfo：Java配置信息工具"></a>jinfo：Java配置信息工具</h4><blockquote><p>jinfo（Configuration Info for Java）的作用是实时查看和调整虚拟机各项参数</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">jinfo <span class="token punctuation">[</span>选项<span class="token punctuation">]</span> pid<span class="token punctuation">(</span>操作系统进程ID<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="jmap：Java内存映像工具"><a href="#jmap：Java内存映像工具" class="headerlink" title="jmap：Java内存映像工具"></a>jmap：Java内存映像工具</h4><blockquote><p>jmap（Memory Map for Java）命令用于生成堆转储快照（一般称为heapdump或dump文件）</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">jmap <span class="token punctuation">[</span>选项<span class="token punctuation">]</span> vmid<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://s3.bmp.ovh/imgs/2022/04/23/cd0952439925091d.png" alt="image-20220112194503396"></p><h4 id="jhat：虚拟机堆转储快照分析工具"><a href="#jhat：虚拟机堆转储快照分析工具" class="headerlink" title="jhat：虚拟机堆转储快照分析工具"></a>jhat：虚拟机堆转储快照分析工具</h4><blockquote><p>JDK提供jhat（JVM Heap Analysis Tool）命令与jmap搭配使用，来分析jmap生成的堆转储快照</p></blockquote><p>分析功能比较简陋，少用</p><h4 id="jstack：Java堆栈跟踪工具"><a href="#jstack：Java堆栈跟踪工具" class="headerlink" title="jstack：Java堆栈跟踪工具"></a>jstack：Java堆栈跟踪工具</h4><blockquote><p>jstack（Stack Trace for Java）命令用于生成虚拟机当前时刻的线程快照（一般称为threaddump或者javacore文件）。线程快照就是当前虚拟机内每一条线程正在执行的方法堆栈的集合，生成线程快照的目的通常是定位线程出现长时间停顿的原因，如线程间死锁、死循环、请求外部资源导致的长时间挂起等，都是导致线程长时间停顿的常见原因。线程出现停顿时通过jstack来查看各个线程的调用堆栈，就可以获知没有响应的线程到底在后台做些什么事情，或者等待着什么资源</p></blockquote><pre class="line-numbers language-none"><code class="language-none">jmap [选项] vmid<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://s3.bmp.ovh/imgs/2022/04/23/5f3631ddab60d363.png" alt="image-20220112194938785"></p><h3 id="可视化故障处理工具"><a href="#可视化故障处理工具" class="headerlink" title="可视化故障处理工具"></a>可视化故障处理工具</h3><h4 id="JHSDB：基于服务性代理的调试工具"><a href="#JHSDB：基于服务性代理的调试工具" class="headerlink" title="JHSDB：基于服务性代理的调试工具"></a>JHSDB：基于服务性代理的调试工具</h4><blockquote><p>JHSDB是一款基于服务性代理（Serviceability Agent，SA）实现的进程外调试工具。服务性代理是HotSpot虚拟机中一组用于映射Java虚拟机运行信息的、主要基于Java语言（含少量JNI代码）实现的API集合</p></blockquote><p>在JDK8的bin目录下我并没有找到这个工具，为此特地下载了个JDK17进行演示</p><p><img src="https://s3.bmp.ovh/imgs/2022/04/23/13611362cbf3cd5f.png" alt="image-20220113112827414"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>example</span><span class="token punctuation">;</span><span class="token comment">/** * 使用Debug 启动，利用JHSDB工具获取staticObj，instanceObj，localObj三个变量的存储位置 * VM参数：-Xmx10m -XX:+UseSerialGC -XX:-UseCompressedOops */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Hello</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token class-name">ObjectHolder</span> staticObj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectHolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ObjectHolder</span> instanceObj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectHolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">void</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">ObjectHolder</span> localObj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectHolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"done"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 这里设一个断点</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">ObjectHolder</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Test</span> test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Hello<span class="token punctuation">.</span>Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        test<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><p>Debug启动上述代码，确保内存已分配好，打开命令行，去到JDK的bin目录下，使用命令<code>jps -l</code>查看虚拟机进程</p><p><img src="https://s3.bmp.ovh/imgs/2022/04/23/bf8b41cc5f7e176d.png" alt="image-20220113140952909"></p></li><li><p>执行命令<code>.\jhsdb.exe hsdb</code>，打开jhsdb界面，菜单栏选择File-&gt;Attach To HotSpot Process，输入上面拿到的pid</p><p><img src="https://s3.bmp.ovh/imgs/2022/04/23/ffa1f9b0c4f457ae.png" alt="image-20220113141336858"></p></li><li><p>菜单栏选择Tools-&gt;Heap Parameters查看堆中信息，由于VM参数指定使用的是SerialGC（不指定默认为G1收集器），所以可以看到典型的分代布局：Eden，From，To，Old；以及它们各自的虚拟内存地址起止范围</p><p><img src="https://s3.bmp.ovh/imgs/2022/04/23/b059934725c18189.png" alt="image-20220113145845426"></p></li><li><p>菜单栏选择Windows-&gt;Console，使用<code>scanoops</code>命令在Java堆的新生代（从Eden起始地址到To Survivor结束地址）范围内查找ObjectHolder的实例，可以看到三个实例的地址都在Eden区地址范围内，也印证了新对象在Eden区创建的规则</p><p><img src="https://s3.bmp.ovh/imgs/2022/04/23/d7d6c90f0a471062.png" alt="image-20220113150744366"></p></li><li><p>菜单栏选择Tools-&gt;Inspector，输入上述任一实例的地址，可查看对象信息（对象头和指向对象元数据的指针，里面包括了Java类型的名字、继承关系、实现接口关系，字段信息、方法信息、运行时常量池的指针、内嵌的虚方法表（vtable）以及接口方法表（itable）等）</p><p><img src="https://s3.bmp.ovh/imgs/2022/04/23/687992d64643ea00.png" alt="image-20220113151514197"></p></li><li><p>根据堆中对象实例地址找出引用它们的指针，继续回到上述的Console界面，执行命令<code>revptrs 对象实例地址</code>，得出引用指针，可以看到这是一个Class类型对象实例，里面有一个<code>staticObj</code>实例字段，注意一下它后面的地址，可以发现，就是这里引用了第一个对象</p><blockquote><p>JDK 7及其以后版本的HotSpot虚拟机选择把静态变量与类型在Java语言一端的映射Class对象存放在一起，存储于Java堆之中</p></blockquote><p><img src="https://s3.bmp.ovh/imgs/2022/04/23/bc06ef40a0e887f7.png" alt="image-20220113155108239"></p></li><li><p>同理第二，三个对象实例查找也是如此操作。可以看到第二次找到的是<code>Hello$Test</code>的对象实例，第二个<code>ObjectHolder</code>的指针是在Java堆中<code>Hello$Test</code>对象的<code>instanceObj</code>字段上。接着查找第三个对象时发现返回的是null，这是因为第三个对象在方法中创建，是要进栈的，而<code>revptrs</code>并不支持查找栈上的指针引用，所以需要换一个方法查找</p><p><img src="https://s3.bmp.ovh/imgs/2022/04/23/66c30e772006b3ea.png" alt="image-20220113161118298"></p><p><img src="https://s3.bmp.ovh/imgs/2022/04/23/01adc4bc34882baa.png" alt="image-20220113161124069"></p></li><li><p>在Java Threads窗口选择main，然后点击打开Stack Memory窗口，就可以看到main线程中的栈内存内容，图中红框内就是第三个对象了，可以看到是引用了新生代中的<code>Hello$ObjectHolder</code>对象</p><p><img src="https://s3.bmp.ovh/imgs/2022/04/23/9958a9ae7a67890b.png" alt="image-20220113165252846"></p></li></ol><p><img src="https://s3.bmp.ovh/imgs/2022/04/23/773a03a1a06f8df0.png" alt="image-20220113165453736"></p><p>总结：</p><p><img src="https://s3.bmp.ovh/imgs/2022/04/23/18d5447a51bb0fb3.png" alt="image-20220114165011506"></p><h4 id="JConsole：Java监视与管理控制台"><a href="#JConsole：Java监视与管理控制台" class="headerlink" title="JConsole：Java监视与管理控制台"></a>JConsole：Java监视与管理控制台</h4><blockquote><p>JConsole（Java Monitoring and Management Console）是一款基于JMX（Java Manage-mentExtensions）的可视化监视、管理工具。它的主要功能是通过JMX的MBean（Managed Bean）对系统进行信息收集和参数动态调整</p></blockquote><p>内存监控：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// VM参数：-Xms100m -Xmx100m -XX:+UseSerialGC</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Hello</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 内存占位符对象，一个OOMObject大约占64KB     */</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">OOMObject</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> placeholder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">64</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">fillHeap</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">OOMObject</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">OOMObject</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 稍作延时，令监视曲线的变化更加明显</span>            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OOMObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token function">fillHeap</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><p>run上述代码，然后在控制台执行命令：<code>jconsole</code>，选择对应的本地进程建立连接</p><p><img src="https://s3.bmp.ovh/imgs/2022/04/23/6abf1d8743f3d317.png" alt="image-20220117144242388"></p></li><li><p>程序执行结束后，可以选择内存页签看到堆内存的变化。可以看到，Eden和Survivor区都差不多被清空，只有Old区还处于峰值状态，这是因为<code>List&lt;OOMObject&gt; list = new ArrayList&lt;OOMObject&gt;();</code>仍然存活未被回收，list对象在System.gc()执行时仍然处于作用域之内。如果把System.gc()移动到fillHeap()方法外调用就可以回收掉全部内存</p><p><img src="https://s3.bmp.ovh/imgs/2022/04/23/8fb0ced945c275fd.png" alt="image-20220118143243613"></p></li></ol><p>线程监控：</p><ul><li>线程资源等待演示：</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Hello</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 线程死循环演示     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">createBusyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>                <span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">"testBusyThread"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 线程锁等待演示     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">createLockThread</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Object</span> lock<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>lock<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    lock<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">"testLockThread"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">BufferedReader</span> br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">createBusyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Object</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">createLockThread</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><p>运行代码，选择线程页签查看main线程。可以看到<code>BufferedReader br = new BufferedReader(new InputStreamReader(System.in));</code>一直在等待键盘输入，所以此时还在Runnable状态</p><p><img src="https://s3.bmp.ovh/imgs/2022/04/23/c9f7e308b8a6116b.png" alt="image-20220118171017627"></p></li><li><p>在控制台中输入任意内容，再次观察发现<code>testBusyThread</code>线程出现。根据堆栈跟踪可以看出，在代码13行处产生了资源等待</p><p><img src="https://s3.bmp.ovh/imgs/2022/04/23/794639b53f959131.png" alt="image-20220118171239777"></p></li><li><p>将<code>createBusyThread();</code>注释掉，重新启动代码，和上述操作一致，观察<code>testLockThread</code>线程。可以看到线程进入Waiting状态，在等待lock对象的notify()或notifyAll()方法的出现</p><p><img src="https://s3.bmp.ovh/imgs/2022/04/23/44072e9a9a4bdaa5.png" alt="image-20220118171522758"></p></li></ol><ul><li>线程死锁演示：</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Hello</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 线程死锁等待演示     */</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">SynAddRunalbe</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">SynAddRunalbe</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token operator">=</span> a<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>b <span class="token operator">=</span> b<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SynAddRunalbe</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SynAddRunalbe</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>这段代码开了200个线程去分别计算1+2以及2+1的值，理论上for循环都是可省略的，两个线程也可能会导致死锁，不过那样概率太小，需要尝试运行很多次才能看到死锁的效果。如果运气不是特别差的话，上面带for循环的版本最多运行两三次就会遇到线程死锁，程序无法结束。造成死锁的根本原因是Integer.valueOf()方法出于减少对象创建次数和节省内存的考虑，会对数值为-128～127之间的Integer对象进行缓存，如果valueOf()方法传入的参数在这个范围之内，就直接返回缓存中的对象。也就是说代码中尽管调用了200次Integer.valueOf()方法，但一共只返回了两个不同的Integer对象。假如某个线程的两个synchronized块之间发生了一次线程切换，那就会出现线程A在等待被线程B持有的Integer.valueOf(1)，线程B又在等待被线程A持有的Integer.valueOf(2)，结果大家都跑不下去的情况</p></blockquote><ol><li>启动代码，点击线程页签内的检测死锁，会发现新的页签。可以看到线程处于Blocked状态，<code>Thread48</code>和<code>Thread49</code>互相持有了对方想要的资源无法释放</li></ol><p>​<img src="https://s1.ax1x.com/2022/04/23/LfBGrT.png"></p><p>总结：</p><p><img src="https://s3.bmp.ovh/imgs/2022/04/23/280332e469dead16.png"></p><p>​</p><p>​</p>]]></content>
      
      
      <categories>
          
          <category> 深入理解Java虚拟机系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 深入理解Java虚拟机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入理解Java虚拟机之字节码执行引擎</title>
      <link href="/2023/06/01/xu-ni-ji-zi-jie-ma-zhi-xing-yin-qing/"/>
      <url>/2023/06/01/xu-ni-ji-zi-jie-ma-zhi-xing-yin-qing/</url>
      
        <content type="html"><![CDATA[<h2 id="字节码执行引擎"><a href="#字节码执行引擎" class="headerlink" title="字节码执行引擎"></a>字节码执行引擎</h2><blockquote><p>所有的Java虚拟机的执行引擎输入、输出都是一致的：输入的是字节码二进制流，处理过程是字节码解析执行的等效过程，输出的是执行结果</p></blockquote><h3 id="运行时栈帧结构"><a href="#运行时栈帧结构" class="headerlink" title="运行时栈帧结构"></a>运行时栈帧结构</h3><h4 id="局部变量表"><a href="#局部变量表" class="headerlink" title="局部变量表"></a>局部变量表</h4><blockquote><p>局部变量表（Local Variables Table）是一组变量值的存储空间，用于存放方法参数和方法内部定义的局部变量，其容量最小单位是变量槽（Slot）。</p><p>一个Slot中可以存放：boolean，byte，char，short，int，float，reference，returnAddress (少见)，虚拟机可通过局部变量表中的reference查找Java堆中的实例对象的起始地址&#x2F;查找方法区中的Class对象。</p><p>若当前字节码PC计数器的值已经超出了某个变量的作用域，那这个变量对应的变量槽就可以交给其他变量来重用</p></blockquote><p>非static方法局部变量表的分配图解：</p><p><img src="https://s3.bmp.ovh/imgs/2022/04/29/6bd14469cca0d219.png" alt="image-20220127150800292"></p><p>关于局部变量表中变量槽复用对垃圾收集的影响：</p><ol><li>可以看到并无进行垃圾回收，因为System.gc执行时，bytes还处于作用域内</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// VM参数：-verbose:gc</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 64M内存填充</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">64</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// 垃圾收集</span>    <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>输出结果：  <span class="token punctuation">[</span><span class="token constant">GC</span> <span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token number">70739</span>K<span class="token operator">-></span><span class="token function">66368K</span><span class="token punctuation">(</span><span class="token number">249344</span>K<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0.0020881</span> secs<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token class-name">Full</span> <span class="token constant">GC</span> <span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token number">66368</span>K<span class="token operator">-></span><span class="token function">66168K</span><span class="token punctuation">(</span><span class="token number">249344</span>K<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0.0052478</span> secs<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>给bytes加上括号{}后，作用域应该发生了变化，但可以看到垃圾依旧没有进行回。这是因为作用域虽然发生了变化，但局部变量表之后并没有再发生过任何的读写行为，那bytes原来占用着的变量槽也就还未被复用，GCRoots的部分局部变量表还存在关联，因此无法回收</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"> <span class="token comment">// VM参数：-verbose:gc</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">64</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>输出结果：  <span class="token punctuation">[</span><span class="token constant">GC</span> <span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token number">70739</span>K<span class="token operator">-></span><span class="token function">66384K</span><span class="token punctuation">(</span><span class="token number">249344</span>K<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0.0009639</span> secs<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token class-name">Full</span> <span class="token constant">GC</span> <span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token number">66384</span>K<span class="token operator">-></span><span class="token function">66168K</span><span class="token punctuation">(</span><span class="token number">249344</span>K<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0.0059830</span> secs<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>成功回收。因为变量a成功复用了bytes的变量槽</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// VM参数：-verbose:gc</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">64</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>输出结果：    <span class="token punctuation">[</span><span class="token constant">GC</span> <span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token number">70739</span>K<span class="token operator">-></span><span class="token function">66384K</span><span class="token punctuation">(</span><span class="token number">249344</span>K<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0.0011159</span> secs<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token class-name">Full</span> <span class="token constant">GC</span> <span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token number">66384</span>K<span class="token operator">-></span><span class="token function">632K</span><span class="token punctuation">(</span><span class="token number">249344</span>K<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0.0079671</span> secs<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>值得注意的一个问题：局部变量不像类变量存在准备阶段（即有默认值），局部变量必须赋予初始化值才能使用</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> a<span class="token punctuation">;</span>    <span class="token comment">// 未赋值，编译报错</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="操作数栈"><a href="#操作数栈" class="headerlink" title="操作数栈"></a>操作数栈</h4><blockquote><p>操作数栈常叫操作栈，先入后出，32位数据类型所占的栈容量为1，64位数据类型所占的栈容量为2</p></blockquote><p>在方法的执行过程中，会有各种字节码指令往操作数栈中写入和提取内容，也就是出栈和入栈操作</p><p><img src="https://s3.bmp.ovh/imgs/2022/04/29/bdfc559fbe6e067f.png" alt="image-20220208153702132"></p><h4 id="动态连接"><a href="#动态连接" class="headerlink" title="动态连接"></a>动态连接</h4><blockquote><p>Class文件的常量池中存有大量的符号引用，字节码中的方法调用指令就以常量池里指向方法的符号引用作为参数。这些符号引用一部分会在类加载阶段或者第一次使用的时候就被转化为直接引用，这种转化被称为<code>静态解析</code>。另外一部分将在每一次运行期间都转化为直接引用，这部分就称为<code>动态连接</code></p></blockquote><h4 id="方法返回地址"><a href="#方法返回地址" class="headerlink" title="方法返回地址"></a>方法返回地址</h4><blockquote><p>方法返回时可能需要在栈帧中保存一些信息，用来帮助恢复它的上层主调方法的执行状态。一般来说，方法正常退出时，主调方法的PC计数器的值就可以作为返回地址，栈帧中很可能会保存这个计数器值。而方法异常退出时，返回地址是要通过异常处理器表来确定的，栈帧中就一般不会保存这部分信息</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 深入理解Java虚拟机系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 深入理解Java虚拟机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>研究表明含负面词汇的标题能增加点击率</title>
      <link href="/2023/06/01/yan-jiu-biao-ming-han-fu-mian-ci-hui-de-biao-ti-neng-zeng-jia-dian-ji-lu/"/>
      <url>/2023/06/01/yan-jiu-biao-ming-han-fu-mian-ci-hui-de-biao-ti-neng-zeng-jia-dian-ji-lu/</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文地址：</p><p><a href="https://mp.weixin.qq.com/s/A6CP69BOeQPn38uPRcVgnA">https://mp.weixin.qq.com/s/A6CP69BOeQPn38uPRcVgnA</a></p></blockquote><h1 id="Bad-News-Negativity-Increases-Online-News-Consumption-From-Psychology-Today"><a href="#Bad-News-Negativity-Increases-Online-News-Consumption-From-Psychology-Today" class="headerlink" title="Bad News: Negativity Increases Online News Consumption From: Psychology Today"></a>Bad News: Negativity Increases Online News Consumption From: Psychology Today</h1><hr><p>A new study finds that negative words in headlines increase click-through rates.</p><p>Millions of people now get their news online. But with so much online content to consume and so little time to consume it, editors at news outlets know that writing “catchy” headlines is more important than ever. So, what makes a headline catchy? A new study published in Nature Human Behaviour found that negative emotion words in headlines made it more likely that consumers would click through and read the story. In contrast, positive emotion words decreased click rates.</p><p>The idea that people are more attentive to negative things is not a new one. Journalists have always had this intuition (captured in phrases like “if it bleeds, it leads”), and psychology studies have backed it up. People dislike losses more than they like gains, and they overweigh negative information in many contexts. Even infants pay more attention to negative stimuli. This negativity bias makes some sense from an evolutionary perspective: If you miss out on an opportunity to forage for some delicious berries, you will be sad…but if you accidentally eat a poison mushroom, you will be dead.</p><p>Given this negativity bias, do people tend to engage more with negative news content online? Previous research suggests that the answer is yes. For example, people share more content if it makes them angry. But a lot of this research has been done either in a controlled lab setting, or it has been correlational, so we can’t know for sure if negativity actually causes people to consume news more.</p><p>That’s why the dataset analyzed by Robertson and colleagues is so special. First of all, it is data on the number of clicks (“click-through rate” is the technical term) in response to &gt;105,000 headlines on the news site Upworthy. Therefore, these are real decisions being made by real people. Moreover, Upworthy often tested out (through random assignment) different headlines for the same exact story, so they essentially ran experiments on their users. Therefore, even when the content of the news story was exactly the same, when editors put negative words like “hate” and “worst” into the headline, more people clicked on it, and when they included positive words like “love,” and “best,” fewer people clicked through.</p><p>Not only does this paper tell us more about the factors that influence online news consumption, but it also showcases the nuanced ways in which emotion influences decision-making. The researchers found that words about sadness increased click-through rates, but words about fear actually decreased them (and anger words had no significant effect). Now, we don’t know if people were actually feeling those emotions when they read the headlines, so we will need more studies to explore these effects further.</p><p>However, given that different discrete emotions might be associated with different appraisals of one’s current situation, it makes sense that not all negative emotions would have the same downstream effects on behavior. For example, previous research has shown that people are more optimistic and risk-seeking when they are angry, but they are more pessimistic and risk-averse when they are afraid.</p><p>In the future, it will be interesting to see how generalizable these findings are. For instance, this study did not look at individual differences in news consumption, and it is possible that the results would depend on the reader’s personality or age (e.g., older adults are less susceptible to negativity bias). But I’m excited about the trend of psychologists digging into real-world decision-making data to gain insights into the ways that emotion impacts decision-making.</p><hr><h2 id="生词记录"><a href="#生词记录" class="headerlink" title="生词记录"></a>生词记录</h2><blockquote><p><em>click-through rate</em> 点击率</p><p><em>catchy</em> 引人注意的，容易记住的，动人的</p><p><em>attentive</em> 专心的，注意点，留心的</p><p><em>intuition</em> 直觉</p><p><em>capture</em> 赢得，获得，取得；描绘，刻画；拍摄，摄制</p><p><em>phrase</em> 短语，说法，警句</p><p><em>if it bleeds, it leads</em> 新闻媒体倾向于报道负面事件（可吸引更多关注）</p><p><em>stimuli</em> 刺激物，促进因素</p><p><em>evolutionary</em> 演变的，进化的</p><p><em>perspective</em> 前途，观点，看法</p><p><em>poison</em> 毒物</p><p><em>correlational</em> 互为相关，相关性的</p><p><em>essentially</em> 本质上，基本上，根本上，实际上</p><p><em>showcase</em> 充分展示，展示…的优点</p><p><em>nuanced</em> 细微差别<br><em>significant</em> 显著，重要，明显</p><p><em>make sense</em> 有道理，有意义</p><p><em>discrete</em> 独立的，各自的，独自的，离散的</p><p><em>appraisal</em> 评定，鉴定，估价，评价</p><p><em>downstream</em> 顺流地，向下游地；后阶段地</p><p><em>pessimistic</em> 悲观的</p><p><em>risk-averse</em> 规避风险</p><p><em>generalizable</em> 可归纳的，可推广的，可概括性</p><p><em>susceptible</em> 敏感，过敏，易受影响</p></blockquote><h2 id="文章概述"><a href="#文章概述" class="headerlink" title="文章概述"></a>文章概述</h2><blockquote><p>最近一项研究表明带有负面词汇标题可以给文章带来显著的点击率提升，文章围绕该项研究做出了较详细的叙述</p></blockquote><h2 id="个人感悟"><a href="#个人感悟" class="headerlink" title="个人感悟"></a>个人感悟</h2><blockquote><p>我对文章的观点表示赞同，因为结合我考研时看过的B站某些视频，制造焦虑是很容易获得大量关注度的，其播放量往往也是最高的，这确是一大流量密码，可是这种行为实在可耻，考研本来就不是一件易事，还在别人迷茫寻找路线的时候给他人制造恐慌，制造焦虑绝对是不道德行为。</p><p>因此，打破焦虑最好的办法就是行动起来，多读书多看报，少看B站多睡觉。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 每日阅读分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 英语提升 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>研究表明八卦可助人成功？</title>
      <link href="/2023/06/01/yan-jiu-biao-ming-ba-gua-ke-zhu-ren-cheng-gong/"/>
      <url>/2023/06/01/yan-jiu-biao-ming-ba-gua-ke-zhu-ren-cheng-gong/</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文地址：<a href="https://mp.weixin.qq.com/s/RUMV5XU2dOENq_efVlaDhQ">https://mp.weixin.qq.com/s/RUMV5XU2dOENq_efVlaDhQ</a></p></blockquote><h1 id="Gossip-influences-who-gets-ahead-in-different-cultures"><a href="#Gossip-influences-who-gets-ahead-in-different-cultures" class="headerlink" title="Gossip influences who gets ahead in different cultures"></a><strong>Gossip influences who gets ahead in different cultures</strong></h1><hr><p>Gossip influences if people receive advantages whether they work in an office in the U.S. or in India – or even in a remote village in Africa, a Washington State University study found.</p><p>In a set of experiments, WSU anthropologists found that positive and negative gossip influenced whether participants were willing to give a person a resource, such as a raise or a family heirloom, especially when the gossip was specific to the circumstance. For instance, positive gossip concerning job-related behavior, such as saying the person worked well under pressure, increased the participants’ willingness to give a work-related benefit compared to gossip about family relationships.</p><p>The researchers ran the experiment with 120 online participants workers in the U.S. and India, and after making some culturally appropriate adjustments, with 160 Ngandu horticulturalists, who make a living from small gardens in the Central African Republic. In all three groups, they found similar results.</p><p>“Gossip seems context relevant. People don’t just say random things,” said Nicole Hess, a WSU anthropologist and lead author on the study published in the journal Evolution and Human Behavior. “Gossip that was relevant to the exchange and the relationship had the most impact on whether a person gave a resource, or not.”</p><p>Anthropologists consider gossip, defined as exchanging reputational information about other community members, to be a feature of almost every human society, but it is less clear what function it serves. Some argue that talking about other people this way helps enforce social norms or serves as social bonding between the gossipers. This study lends evidence to yet another theory: that gossip is used competitively because it shows a direct relationship between gossip and the likelihood of receiving more resources.</p><p>“Up until this study, no one had even really asked ‘what is the end result of gossip?’ Gossip makes a person’s reputation worse or better, so what is the result?” Hess said. “These findings support the competitive evolutionary model: that people are using gossip to compete with each other over valuable resources in their communities.”</p><p>For this study, Hess and co-author Ed Hagen, also a WSU anthropologist, developed a set of experiments that provided participants with job- or family-related scenarios. For the office workers in the industrialized countries, the scenarios described a situation where they could either give a raise to one of their co-workers or an inherited painting to a family member.</p><p>They then were given a mix of gossip statements about how a theoretical co-worker or relative behaved at work or dealt with their family. For example, the work statement might be about whether the colleague was willing to work late to finish a project, or on the family side, whether they got along well with their siblings.</p><p>After reading a mix of these statements, the participants were asked whether they were willing to give that fictional person the resource.</p><p>For the Ngandu farmers, the work scenario was adjusted to have them evaluate a fictional worker they hired to help with their garden, and whether they would share some shirts with the worker that a produce buyer had given them. The family scenario involved deciding whether to give a relative some nice clothes the participant had inherited.</p><p>Both surveys showed a similar pattern: participants were more willing to give the resource when exposed to more positive, context-specific gossip statements about them, and less willing when exposed to more negative, context-specific gossip statements.</p><p>In this paper, the researchers also included an observational study of 40 Aka hunter-gatherers who live near the Ngandu horticulturists. This study was designed as a series of questions asked verbally about real people the participants knew, which increased the study’s ecological validity, meaning it shows that the results can be generalized to real-life settings.</p><p>While not exactly parallel with the experimental studies, these observational results also indicated that an individual’s positive reputation strongly influenced whether the Aka participants were willing to share a resource with them.</p><p>“The cultural contexts are different, but they have the same patterns of responses,” said Hess. “This appears to be the universal psychology in how people evaluate reputation in allocating valuable things from industrial societies to small scale communities.”</p><hr><h2 id="生词记录"><a href="#生词记录" class="headerlink" title="生词记录"></a>生词记录</h2><blockquote><p><em>anthropologist</em> 人类学家</p><p><em>heirloom</em> 传家宝，祖传之物</p><p><em>horticulturist</em> 园艺家，园艺师</p><p><em>make a living</em> 谋生</p><p><em>context</em> 背景，环境；上下文，语境</p><p><em>reputational</em> 声誉的，名誉的</p><p><em>enforce</em> 实行，执行，把…强加于</p><p><em>norm</em> 规范，行为标准</p><p><em>lend</em> 增添，增加</p><p><em>inherit</em> 继承；遗传得到</p><p><em>produce</em> 农产品</p><p><em>hunter-gatherer</em> 采猎者，狩猎采集者</p><p><em>verbally</em> 口头上</p></blockquote><h2 id="个人感悟"><a href="#个人感悟" class="headerlink" title="个人感悟"></a>个人感悟</h2><blockquote><p>老实说，这篇文章看翻译都感觉不是很理解，实在是没搞懂八卦和资源分配有什么关系？（流下没技术的眼泪.jpg）</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 每日阅读分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 英语提升 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>研究发现：爱吃炸薯条可能更容易抑郁和焦虑</title>
      <link href="/2023/06/01/yan-jiu-fa-xian-ai-chi-zha-shu-tiao-ke-neng-geng-rong-yi-yi-yu-he-jiao-lu/"/>
      <url>/2023/06/01/yan-jiu-fa-xian-ai-chi-zha-shu-tiao-ke-neng-geng-rong-yi-yi-yu-he-jiao-lu/</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文地址：<a href="https://mp.weixin.qq.com/s/pwZOx5Ox6F3Q26mCIJKqlA">https://mp.weixin.qq.com/s/pwZOx5Ox6F3Q26mCIJKqlA</a></p></blockquote><h1 id="New-research-suggests-that-french-fries-may-be-linked-to-depression"><a href="#New-research-suggests-that-french-fries-may-be-linked-to-depression" class="headerlink" title="New research suggests that french fries may be linked to depression"></a><strong>New research suggests that french fries may be linked to depression</strong></h1><hr><p>French fries — they’re greasy, starchy and a comfort food for many.</p><p>But reaching for fried foods may have a negative impact on mental health.</p><p>A research team in Hangzhou, China, found that frequent consumption of fried foods, especially fried potatoes, was linked with a 12% higher risk of anxiety and 7% higher risk of depression than in people who didn’t eat fried foods.</p><p>The link was more pronounced among young men and younger consumers.</p><p>Fried foods are known risk factors for obesity, high blood pressure and other health effects. These results “open an avenue in the significance of reducing fried food consumption for mental health,” according to the paper published Monday in the journal PNAS.</p><p>However, experts who study nutrition said the results are preliminary, and it’s not necessarily clear whether the fried foods were driving mental health issues, or people experiencing symptoms of depression or anxiety turned to fried foods.</p><p>The study evaluated 140,728 people over 11.3 years. After excluding participants diagnosed with depression within the first two years, a total of 8,294 cases of anxiety and 12,735 cases of depression were found in those that consumed fried food, while specifically fried potatoes were found to have a 2% increase in risk of depression over fried white meat.</p><p>The study had also found that the participants consuming more than one serving of fried food regularly were more likely to be younger men.</p><p>“The human component of this study may indicate just what it purports: that higher intake of fried food increases the risk of anxiety&#x2F;depression,” said Dr. David Katz, a lifestyle medicine specialist who was not involved in the study, via email.</p><p>“However, the causal pathway could just as readily go the other way: people with anxiety&#x2F;depression turn to ‘comfort food’ with increasing frequency for some semblance of relief,” added Katz, founder of the nonprofit True Health Initiative, a global coalition of experts dedicated to evidence-based lifestyle medicine.</p><p>Those with underlying symptoms of anxiety and depression could turn to comfort foods as a way of self-medicating, he said.</p><p>Unhealthy food and poor nutrition can lower one’s mood and progress a mental health condition, as found in a prior study cited within this new one.</p><p><strong>The same goes for zebrafish</strong></p><p>In the new study, the researchers suggest that acrylamide, a chemical formed during the frying process, especially in fried potatoes, is to blame for the higher risk of anxiety and depression.</p><p>In a separate paper referenced in the new study, the researchers exposed zebrafish to the chemical, finding that long-term exposure had caused the fish to dwell in dark zones within the tank, a common sign of a higher anxiety level in the fish.</p><p>The zebrafish had also displayed a reduced ability to explore their tanks and socialize, as they did not swim closely with other zebrafish, even though zebrafish are known to form schools with their species.</p><p>“Zebrafish were presumably chosen … because they were already known to be vulnerable to acrylamide toxicity, and because their behavioral responses to anxiety are established and consistent — offering a source of both biological and behavioral data,” Katz said.</p><p>Dr. Walter Willett said the results “should be regarded as very preliminary, especially the connection with fried food and acrylamide.”</p><p><strong>Anxiety and depression on the rise</strong></p><p>Zhejiang University researcher Yu Zhang, an author of the study, told CNN in an email that “there is no need to panic about the adverse effects of fried food.” But maintaining a healthy lifestyle and reducing consumption of fried foods may be helpful for mental health in additional to overall health.</p><p>The researchers had pointed to a recent rise in depression and anxiety worldwide, with 2020 seeing an increase of 27.6% and 25.6%, respectively. The World Health Organization also estimates that more than 5% of adults suffer from depression, globally, as noted in the paper.</p><p>By looking at the effects of fried food consumption in humans and acrylamide exposure in zebrafish, the researchers had compared the two to suggest that frequent consumption of the chemical commonly found in fried food could have a negative effect on mental health.</p><p>A lack of variety in food has also been shown to decrease well-being, according to Katz.</p><p>“If a take-away is needed it is simply that overall diet quality, and the selection of wholesome foods, matters profoundly to every aspect of health — mental and physical alike,” Katz said.</p><p>Willett said there’s also the possibility of reverse causation — that people may change their diets because they have depression or anxiety. “These mood changes are, in general, more difficult to study because they may come and go, unlike the diagnosis of a major cancer or heart attack, the study was not designed to address these challenges,” he said.</p><hr><h2 id="生词记录"><a href="#生词记录" class="headerlink" title="生词记录"></a>生词记录</h2><blockquote><p><em>greasy</em> 油腻的；多油的，油污的；油性的</p><p><em>starchy</em> 淀粉的；刻板的，拘谨的</p><p><em>comfort food</em> 开心食品，安慰食品</p><p><em>pronounced</em> 明显的，明确的</p><p><em>preliminary</em> 初步的，预备性的，开始的</p><p><em>serving</em> 一份，一客；现役的</p><p><em>component</em> 组成部分，成分</p><p><em>purport</em> 自称，标榜，声称</p><p><em>intake</em> 摄入量</p><p><em>causal</em> 因果关系</p><p><em>semblance</em> 表象，假象；外观，外貌</p><p><em>coalition</em> 联盟，同盟，联合体</p><p><em>dwell</em> 居住，栖身</p><p><em>presumably</em> 大概，可能</p><p><em>toxicity</em> 毒性</p><p><em>established</em> 著名的；已确立的；既定的</p><p><em>adverse</em> 不利的，有害的</p><p><em>take-away</em> 外卖；要点，从···中了解到的主要信息</p><p><em>wholesome</em> 有益健康的，有益的，有道德的</p><p><em>causation</em> 因果关系</p></blockquote><h2 id="个人感悟"><a href="#个人感悟" class="headerlink" title="个人感悟"></a>个人感悟</h2><blockquote><p>无论怎样，油炸的东西吃多了都是不太健康的，凡事讲究的是适可而止，马原也有说过要把握好度。</p><p>可是油炸食品吃起来真的好开心哦😄</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 每日阅读分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 英语提升 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>研究发现男性避孕的关键基因</title>
      <link href="/2023/06/01/yan-jiu-fa-xian-nan-xing-bi-yun-de-guan-jian-ji-yin/"/>
      <url>/2023/06/01/yan-jiu-fa-xian-nan-xing-bi-yun-de-guan-jian-ji-yin/</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文地址：<a href="https://mp.weixin.qq.com/s/RmHrqp7tFh_KowoP6tTzqg">https://mp.weixin.qq.com/s/RmHrqp7tFh_KowoP6tTzqg</a></p></blockquote><h1 id="Male-Contraception-Could-Be-Edging-Closer-Thanks-To-New-Genetic-Discovery"><a href="#Male-Contraception-Could-Be-Edging-Closer-Thanks-To-New-Genetic-Discovery" class="headerlink" title="Male Contraception Could Be Edging Closer Thanks To New Genetic Discovery"></a><strong>Male Contraception Could Be Edging Closer Thanks To New Genetic Discovery</strong></h1><hr><p>A gene that’s only expressed in the testicles of various mammals, including humans, could be the key to an effective, reversible, non-hormonal form of contraception for men. A new study details how manipulating the Arrdc5 gene in mice led to infertility in males, and scientists say that a drug targeting this gene could be a sorely needed solution to the massive disparity between male and female contraceptive options.</p><p>Few scientific questions have the same power to capture our interest and spark debate as the promise of a male contraceptive drug. The idea has been years in the making, but progress has been frustratingly slow. In the meantime, the burden of contraceptive planning overwhelmingly falls on the shoulders of women. </p><p>But not all women have access to a form of birth control that is suitable for them, and the United Nations estimates that almost half of all pregnancies worldwide are unplanned – this, against a backdrop of ever more barriers to accessing abortion and prenatal healthcare across the globe, thrown into particularly stark relief by the overturning of Roe vs Wade in the US.</p><p>New options for contraceptives targeted at the male reproductive system would therefore be hugely welcome. Researchers from Washington State University recently identified a gene, called Arrdc5, which could prove to be a potent target in the development of new birth control drugs.</p><p>“The study identifies this gene for the first time as being expressed only in testicular tissue, nowhere else in the body, and it’s expressed by multiple mammalian species,” said senior author Jon Oatley in a statement. This is what makes Arrdc5 stand out from other potential drug targets that have previously been found.</p><p>The researchers knocked out the Arrdc5 gene in mice to investigate the effects this would have on their fertility. The male mice lacking the gene produced 28 percent less sperm and the swimmers they did produce had lower motility, moving 2.8 times slower than usual. Not only that, 98 percent of the sperm had abnormalities in their heads and mid-pieces, rendering them unable to fertilize an egg.</p><p>The name for this collection of irregularities in sperm is oligoasthenoteratospermia (OAT), and it’s a common reason for infertility in humans. Up to now, the causes of this condition have not been clear, but the authors write that their findings around the Arrdc5 gene raise “the intriguing possibility that deleterious mutations could be underlying causes of fertility defects.”</p><p>As to potentially targeting the gene with a birth control drug, a huge advantage would be the lack of hormonal involvement. Testosterone plays many important roles in the male body beyond the reproductive system, so achieving a contraceptive effect without disrupting testosterone would be ideal. The authors also highlighted that it should be easy to engineer any such new drug to be reversible.</p><p>“You don’t want to wipe out the ability to ever make sperm – just stop the sperm that are being made from being made correctly,” Oatley explained. “Then, in theory, you could remove the drug and the sperm would start being built normally again.”</p><p>Work based on these initial findings is already underway, with Oatley and first author Mariana Giassetti having filed a provisional patent for the development of a contraceptive based on their discovery. Since the Arrdc5 gene is found in many species, this research could have broader implications, such as for population control in livestock; but for now, the team has their sights firmly set on the human side of things.</p><p>“Right now, we don’t really have anything on the male side for contraception other than surgery,” said Oatley. “If we can develop this discovery into a solution for contraception, it could have far-ranging impacts.”</p><hr><h2 id="生词记录"><a href="#生词记录" class="headerlink" title="生词记录"></a>生词记录</h2><blockquote><p><em>testicle</em> 睾丸</p><p><em>mammal</em> 哺乳动物</p><p><em>reversible</em> 可逆的</p><p><em>hormonal</em> 和激素相关的</p><p><em>contraception</em> 避孕，节育</p><p><em>manipulate</em> 操纵，控制</p><p><em>infertility</em> 不孕，不肥沃，贫瘠</p><p><em>sorely</em> 极其，非常</p><p><em>disparity</em> 不同，差异（尤指不公平的）</p><p><em>contraceptive</em> 避孕药，避孕用具</p><p><em>spark</em> 激发，引发<br><em>in the making</em> 完成，制造成，制作成</p><p><em>overwhelmingly</em> 压倒性地，不可抵抗地</p><p><em>backdrop</em> 背景幕布，事情的背景，背景</p><p><em>abortion</em> 流产，堕胎</p><p><em>prenatal</em> 产前的</p><p><em>stark</em> 明显的，鲜明的；赤裸裸的，严酷的</p><p><em>relief</em> 宽心，宽慰，轻松，解脱；救济品，救济金；浮雕</p><p><em>reproductive</em> 生殖，生育，繁殖</p><p><em>potent</em> 强有力的，强大的</p><p><em>motility</em> 运动性，机动性</p><p><em>abnormality</em> 反常，异常，变态</p><p><em>render</em> 翻译；以某种方式表达；使成为，使变得；给予，提供；粉刷墙壁</p><p><em>fertilize</em> 使受精；使受孕；施肥</p><p><em>intriguing</em> 引人入胜的，非常有趣的，神秘的</p><p><em>deleterious</em> 有害的，造成伤害的，损害的</p><p><em>mutation</em> 变异，突变</p><p><em>underlying</em> 潜在的，暗含的，深层的；以…为基础的</p><p><em>testosterone</em> 睾酮</p><p><em>wipe out</em> 消灭，摧毁，使灭绝</p><p><em>file</em> 提起诉讼，提出申请，送交备案</p><p><em>provisional</em> 暂时的，临时的</p><p><em>livestock</em> 家畜，家禽</p></blockquote><h2 id="个人感悟"><a href="#个人感悟" class="headerlink" title="个人感悟"></a>个人感悟</h2><blockquote><p>科技的进步带来的便利。现在避孕主要一就是避孕套，二就是女性事前或事后食药，副作用大，若然此研究能够落实，而且真的是可逆不会造成伤害的话，绝对是一大成就。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 每日阅读分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 英语提升 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>研究发现他人汗液有助缓解社恐</title>
      <link href="/2023/06/01/yan-jiu-fa-xian-ta-ren-han-ye-you-zhu-huan-jie-she-kong/"/>
      <url>/2023/06/01/yan-jiu-fa-xian-ta-ren-han-ye-you-zhu-huan-jie-she-kong/</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文地址：</p><p><a href="https://mp.weixin.qq.com/s/ulMT92bITtkcY2YJK16VMg">https://mp.weixin.qq.com/s/ulMT92bITtkcY2YJK16VMg</a></p></blockquote><h1 id="Exposure-to-other-people’s-sweat-could-help-reduce-social-anxiety-study-finds"><a href="#Exposure-to-other-people’s-sweat-could-help-reduce-social-anxiety-study-finds" class="headerlink" title="Exposure to other people’s sweat could help reduce social anxiety, study finds"></a>Exposure to other people’s sweat could help reduce social anxiety, study finds</h1><hr><p>People with social anxiety may benefit from mindfulness therapy combined with exposure to odours from others’ sweat, according to a study.</p><p>The approach could be used in treatment for the mental health condition, where people worry excessively about participating in social situations, it was suggested.</p><p>Lead researcher Elisa Vigna, of the Karolinska Institute in Stockholm, Sweden, explained that an individual’s state of mind caused the production of molecules (or chemo-signals) in sweat that communicated an emotional state and produced corresponding responses in other people.</p><p>“The results of our preliminary study show that combining these chemo-signals with mindfulness therapy seem to produce better results in treating social anxiety than can be achieved by mindfulness therapy alone,” she said.</p><p>The study – which is being presented this week at the European congress of psychiatry in Paris – involved collecting sweat from volunteers, and then exposing patients being treated for social anxiety to chemo-signals extracted from those samples.</p><p>The samples were collected from people who were watching clips from films chosen to elicit particular emotional states, such as fear or happiness. They included Mr Bean’s Holiday and Sister Act, as well as horror films such as The Grudge.</p><p>Once the sweat had been collected, researchers recruited 48 women, all of whom suffered from social anxiety, and divided them into three groups each of 16 people. Over two days, they all underwent mindfulness therapy for social anxiety. At the same time, each group was exposed to the odour samples or to clean air.</p><p>The study found that the women who had been exposed to the odour samples responded better to the therapy.</p><p>Patients who undertook one treatment session of mindfulness therapy together with being exposed to human body odours showed about 39% reduction in anxiety scores. There was a 17% reduction in anxiety scores after one treatment session in the group receiving only the therapy.</p><p>Vigna said: “We were a little surprised to find that the emotional state of the person producing the sweat didn’t differ in treatment outcomes: sweat produced while someone was happy had the same effect as someone who had been scared by a movie clip.</p><p>“So there may be something about human chemo-signals in sweat generally which affects the response to treatment. It may be that simply being exposed to the presence of someone else has this effect, but we need to confirm this.”</p><p>The NHS describes social anxiety as a long-term and overwhelming fear of social situations. Treatments at present include cognitive behavioural therapy (CBT) with a therapist and antidepressant medicines.</p><p>Previous research has suggested that an estimated 12.1% of adults in the US experience social anxiety disorder at some point.</p><hr><h2 id="生词记录"><a href="#生词记录" class="headerlink" title="生词记录"></a>生词记录</h2><blockquote><p><em>mindfulness</em> 正念认知</p><p><em>odour</em> 气味，臭味</p><p><em>excessively</em> 过度地，过分地，过量地</p><p><em>molecule</em> 分子</p><p><em>chemo-</em> 化学的</p><p><em>preliminary</em> 预备性的，初步的，开始的</p><p><em>congress</em> 代表大会，国会</p><p><em>psychiatry</em> 精神病学</p><p><em>extract</em> 取出，拔出，提取</p><p><em>elicit</em> 探出，引出</p><p><em>grudge</em> 怨恨，积怨</p><p><em>undergo</em> 经历，经受</p><p><em>overwhelming</em> 难以抵挡的，无法抗拒的</p><p><em>cognitive</em> 认知的，感知的</p><p><em>antidepressant</em> 抗抑郁药的</p><p><em>disorder</em> 混乱，凌乱，杂乱无章；失调</p></blockquote><h2 id="个人感悟"><a href="#个人感悟" class="headerlink" title="个人感悟"></a>个人感悟</h2><blockquote><p>这意思是说闻到他人的汗液味就会不那么紧张了？😄，有点奇怪的研究</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 每日阅读分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 英语提升 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>疯狂五一</title>
      <link href="/2023/06/01/feng-kuang-wu-yi/"/>
      <url>/2023/06/01/feng-kuang-wu-yi/</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文地址：<a href="https://mp.weixin.qq.com/s/iJacRCkJEsSuabWiqY5C1A">https://mp.weixin.qq.com/s/iJacRCkJEsSuabWiqY5C1A</a></p></blockquote><h1 id="Fully-booked-China-braces-for-record-May-Day-holiday-rush"><a href="#Fully-booked-China-braces-for-record-May-Day-holiday-rush" class="headerlink" title="Fully booked! China braces for record May Day holiday rush"></a><strong>Fully booked! China braces for record May Day holiday rush</strong></h1><hr><p>China is bracing for a record-high travel rush over the Labour Day holiday, with popular sightseeing spots selling out of tickets and some cities warning would-be visitors away as domestic tourism rebounds after Beijing ended COVID curbs.</p><p>Authorities are expecting 19 million trips to be made across China’s vast railway network on Saturday, the first day of the five-day holiday, which would be the highest number of rail trips made in a single day in the country’s history.</p><p>It compares to 4.4 million rail trips on May 1 last year, when China locked down several cities including Shanghai to battle the spread of the virus, and the last peak of 18.8 million on the same day in 2021.</p><p>Over the 40-day Lunar New Year travel period in January-February this year, 348 million trips were made in total, or about 8.7 million trips a day on average, according to the National Railway Administration.</p><p>The May holiday is far shorter than the Lunar New Year and October Golden Week holidays but traditionally still is one of China’s busiest travel seasons as spring moves into summer. This year, the holiday is crucial for the tourism industry as well as the wider Chinese economy as the country strives to recover from years of virus disruptions.</p><p>“It took me a lot of effort to get a ticket, it’s hard this time,” said Di Jingshu, 21, as she waited for a train at Shanghai’s packed Hongqiao railway station on Thursday. China’s aviation authority said it expects air passenger trips to reach a total of 9 million over the five days.</p><p>Booking sites for popular scenic spots, such as Beijing’s Old Summer Palace and the Badaling section of the Great Wall showed they were sold out of tickets for the first few days of the Labour Day holiday, and Trip.com Group said that reservations across its online travel platform had surpassed 2019 levels.</p><p>One small city, Zibo in China’s coastal Shandong province, which has gone viral on Chinese social media in recent weeks for its local barbecue cuisine, imposed an upper limit on Sunday on hotel room rates and three days later issued a public letter warning would-be visitors its downtown hotels were fully booked.</p><p>“Passenger traffic has exceeded our accommodation capacity,” it said, pleading for understanding should service levels fall short given the anticipated swelling of visitor numbers.</p><p>Outbound travel for the holiday however continues to remain constrained, in part due to a shortage of international flights, although bright spots were emerging in cities such as Macau and Jakarta, according to a report from travel data firm ForwardKeys.</p><p>“Bookings for outbound travel are around 50% behind the pre-pandemic levels,” it said. “Chinese travellers have started to travel abroad but are still preferring destinations within the Asia Pacific region.”</p><hr><h2 id="生词记录"><a href="#生词记录" class="headerlink" title="生词记录"></a>生词记录</h2><blockquote><p><em>brace for</em> 做准备，准备迎接（令人不快的事）</p><p><em>rush</em> 猛冲，急速流动；一阵强烈感情，一阵感觉，情绪迸发；忙乱，忙碌；争抢；蜂拥前往，蜂拥的人潮</p><p><em>would-be</em> 想要做···的，试图成为···的，未来的</p><p><em>rebound</em> 弹回，反弹，跳回</p><p><em>curb</em> 限制，抑制</p><p><em>lock down</em> 对出行、社交和进入公共场所实行严格限制</p><p><em>peak</em> 顶峰，顶点</p><p><em>packed</em> 挤满的，拥挤的</p><p><em>aviation</em> 航空学，飞行术，航空工业</p><p><em>reservation</em> 存疑，保留意见，异议；预订，预约；野生动物保护区，自然保护区</p><p><em>surpass</em> 优于，超过</p><p><em>coastal</em> 沿海的</p><p><em>viral</em> 病毒式的</p><p><em>cuisine</em> 饭菜，菜肴，烹调风格</p><p><em>swell</em> 增大，肿胀</p><p><em>outbound</em> 向外的，离港的，离开某地的</p></blockquote><h2 id="个人记录"><a href="#个人记录" class="headerlink" title="个人记录"></a>个人记录</h2><blockquote><p>年年都是人挤人，有钱的亲临现场周游列国，没钱的坐电视机前周游列国，大家都有光明的未来。</p><p>PS：都说经济形势不太行，最后才发现小丑竟是我自己 🌚</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 每日阅读分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 英语提升 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>理想假期是几天？</title>
      <link href="/2023/06/01/li-xiang-jia-qi-shi-ji-tian/"/>
      <url>/2023/06/01/li-xiang-jia-qi-shi-ji-tian/</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文地址：<a href="https://mp.weixin.qq.com/s/eNjukHVfCRvSlJrQf92fTw">https://mp.weixin.qq.com/s/eNjukHVfCRvSlJrQf92fTw</a></p></blockquote><h1 id="Science-Says-This-Is-the-Ideal-Vacation-Length"><a href="#Science-Says-This-Is-the-Ideal-Vacation-Length" class="headerlink" title="Science Says This Is the Ideal Vacation Length"></a><strong>Science Says This Is the Ideal Vacation Length</strong></h1><hr><p><em>More days away doesn’t always equal more relaxation, studies show.</em></p><p>Each year you have a certain amount of days you can get away. Should you take them all at once and indulge in a lavish vacation blowout? Should you spread them out into little mini-breaks, or even use them to give yourself lots and lots of long weekends?</p><p>It’s a question every professional must answer, and while the nature of your work, the size of your budget, and the preferences of your family all play a role in deciding what sort of holiday to take, science also has something to say on the issue. Studies have identified an ideal length of time to get away to maximize the relaxation bang you get for your vacation buck.</p><p><strong>Eight days to peak vacation joy.</strong></p><p>The research out of a Finnish university followed 54 holidaymakers throughout the duration of their getaways, measuring the highs and lows of their happiness and satisfaction as their vacations progressed. The researchers discovered that vacation-related joy didn’t climb ever upward as tourists’ tans deepened and work receded to a distant memory. In contrast, happiness peaked after eight days away.</p><p>“It could be that eight days is the ideal to fully gain the benefits of a holiday,” Jessica de Bloom, a member of the research team, told The Wall Street Journal.</p><p>The idea that a little more than a week is the perfect vacation length sits well with other seasoned vacationers. “Eight days. Seems about right. You take off on a Friday after work, maybe sneak out a little early. You then have Saturday, Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, and Sunday,” HR expert Tim Sackett wrote, commenting on the study on his blog.</p><p>“That first day never seems like a vacation as you get settled in and try to unwind and that last Saturday you need to start packing and getting stuff together because you leave on Sunday. That final Sunday might as well be a work day because you definitely aren’t on vacation any longer!” he added, explaining why the week-and-a-bit duration appealed to him.</p><p><strong>The science of the perfect getaway.</strong></p><p>It’s a finding worth noting if you’re planning a last-minute summer getaway. Travel is expensive, after all (and, if you have kids, not exactly stress free), so there’s no point prolonging a trip if the extra time and money spent isn’t going to add to your happiness or relaxation levels. But this study isn’t the only scientific insight available on how to take the best possible vacation. Happiness experts have plenty of other tips to offer on how to get the most joy out of your vacation, while other research shows how to squeeze every last drop of enjoyment out of your holiday.</p><p>How long is the ideal vacation in your opinion?</p><hr><h2 id="生词记录"><a href="#生词记录" class="headerlink" title="生词记录"></a>生词记录</h2><blockquote><p><em>get away</em> 常指因需要休息而外出度假</p><p><em>indulge</em> 沉溺于，放纵</p><p><em>lavish</em> 大量的，使人印象深刻的，昂贵的，慷慨的，大方的</p><p><em>blowout</em> 盛宴</p><p><em>mini-break</em> 短假</p><p><em>buck</em> 美元；许多钱；抵制，反抗</p><p><em>tan</em> 晒成棕褐色的肤色</p><p><em>sit right&#x2F;well with sb</em> 某人可接受；受某人欢迎</p><p><em>seasoned</em> 经验丰富的，老到的</p><p><em>settle in</em> 安顿下来，适应新环境</p><p><em>unwind</em> 解开，打开；放松，轻松</p><p><em>last-minute</em> 最后一分钟才完成（或决定，安排好等）；紧急关头的</p><p><em>insight</em> 洞察力，深刻见解</p><p><em>squeeze</em> 挤压；挤进；给···带来财务困难</p></blockquote><h2 id="个人感悟"><a href="#个人感悟" class="headerlink" title="个人感悟"></a>个人感悟</h2><blockquote><p>工作时想放假，放假时想工作。</p><p>如果问我理想假期是几天，我的回答是一辈子😄（前提得有钱，没钱都活不下去了还想放假）。</p><p>有一说一，放假太久真的会很空虚，整天无所事事的，不如找点事做充实一下。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 每日阅读分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 英语提升 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>特朗普被判性虐待和诽谤罪名成立</title>
      <link href="/2023/06/01/te-lang-pu-bei-pan-xing-nue-dai-he-fei-bang-zui-ming-cheng-li/"/>
      <url>/2023/06/01/te-lang-pu-bei-pan-xing-nue-dai-he-fei-bang-zui-ming-cheng-li/</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文地址：<a href="https://mp.weixin.qq.com/s/jFBh3sj9c6O8PnjyUim_Kw">https://mp.weixin.qq.com/s/jFBh3sj9c6O8PnjyUim_Kw</a></p></blockquote><h1 id="Jury-Finds-Trump-Sexually-Abused-Woman-Decades-Ago-Awards-Her-5-Million"><a href="#Jury-Finds-Trump-Sexually-Abused-Woman-Decades-Ago-Awards-Her-5-Million" class="headerlink" title="Jury Finds Trump Sexually Abused Woman Decades Ago, Awards Her $5 Million"></a><strong>Jury Finds Trump Sexually Abused Woman Decades Ago, Awards Her $5 Million</strong></h1><hr><p>A federal jury in New York on Tuesday awarded a onetime magazine advice columnist $5 million after concluding Donald Trump was liable for sexually abusing her 20 years before he became a U.S. president and then defamed her by dismissing the encounter as a “hoax.”</p><p>The nine-member jury — six men and three women — reached its decision after three hours of deliberation, the first time Trump has faced a trial to hold him accountable for widespread allegations over many years from women accusing him of unwanted sexual advances.</p><p>The jury rejected the claim by E. Jean Carroll, now 79, that Trump raped her in the dressing room of an upscale department store in New York sometime in 1996. But it concluded that he sexually abused her, awarding her $2 million on that allegation.</p><p>It awarded Carroll another $3 million for Trump’s repeated claims publicly and on his social media accounts that her allegations were “a scam” and “a complete con job.”</p><p>Carroll emerged from the courthouse smiling but did not stop to talk to a gaggle of news reporters.</p><p>A woman yelled to her, “You’re so brave and beautiful,” to which Carroll said, “Thank you, thank you so much.”</p><p>Later, she said in a statement, “I filed this lawsuit against Donald Trump to clear my name and to get my life back. Today, the world finally knows the truth. This victory is not just for me but for every woman who has suffered because she was not believed.”</p><p>‘Bogus case’</p><p>Trump slammed the decision, insisting he is the subject of a witch hunt.</p><p>“This verdict is a disgrace — a continuation of the greatest witch hunt of all time,” the former president posted, using all capital letters, on his Truth Social media platform.</p><p>“I have absolutely no idea who this woman is,” he said of Carroll.</p><p>The Trump campaign promoting his 2024 run for the Republican presidential nomination said, “Make no mistake, this entire bogus case is a political endeavor targeting President Trump because he is now an overwhelming front-runner to be once again elected president of the United States.”</p><p>Trump defense lawyer Joseph Tacopina said the former president would appeal the outcome, with the lawyer adding that he believes there are “plenty of issues” on which to try to overturn the verdict.</p><p>Tacopina said he does not believe Trump can get a fair trial in New York, which, even though Trump grew up and lived in the city for decades, voted overwhelmingly against him in his two previous campaigns for the White House.</p><p>Trump lost his 2020 reelection bid to Democrat Joe Biden and now is facing several criminal investigations stemming from his efforts to overturn that election outcome and his retention of classified documents from his presidency at his Mar-a-Lago estate in Florida.</p><p>But the allegations made by Carroll were adjudicated in a civil, not criminal case, and as a result carried no threat of a conviction or imprisonment for the 76-year-old Trump.</p><p>Trump did not appear in the courtroom to hear Carroll’s account nor was he required to. Two other women testified on her behalf that Trump assaulted them decades ago in similar fashion: A onetime stock broker said he groped her in the first-class cabin of a New York-bound flight, and a journalist alleged that he suddenly started kissing her at Mar-a-Lago while she was there to report a story for People magazine on the first anniversary of his marriage to his third wife, former first lady Melania Trump.</p><p>Tacopina called no defense witnesses in the case and instead tried to chip away at Carroll’s account of the incident, noting that she could not remember the exact date the attack occurred, never reported it to police at the time nor went to a hospital for treatment, and only first made her allegation public in a 2019 memoir.</p><p>“It’s the most ridiculous, disgusting story. It’s just made up,” Tacopina told the jurors in his closing argument on Monday. Earlier, as the case opened two weeks ago, Tacopina said, “There are no witnesses to call to prove a negative” and that jurors would have to “believe the unbelievable” to rule in favor of Carroll, who sought a retraction of Trump’s denial of the incident and unspecified monetary damages.</p><hr><h2 id="生词记录"><a href="#生词记录" class="headerlink" title="生词记录"></a>生词记录</h2><blockquote><p><em>jury</em> 陪审团，裁判团，评判委员会</p><p><em>columnist</em> 专栏作家</p><p><em>liable</em> 承担责任的，负有法律责任的</p><p><em>defame</em> 诽谤，诋毁</p><p><em>dismiss</em> 对···不予理会，摒弃，去除；解雇，开除，免职</p><p><em>hoax</em> 骗局</p><p><em>deliberation</em> 讨论，商议，细想，考虑</p><p><em>trial</em> 审判，审讯；试验，试用</p><p><em>allegation</em> 指控，指责</p><p><em>upscale</em> 高档的，高级的</p><p><em>con</em> 骗局，圈套，花招</p><p><em>gaggle</em> 一群喧闹的人，一帮蠢人</p><p><em>bogus</em> 假冒的，伪造的</p><p><em>slam</em> 严厉抨击</p><p><em>witch hunt</em> 政治迫害</p><p><em>disgrace</em> 耻辱，丢脸，不光彩的行为</p><p><em>continuation</em> 持续，继续，延续</p><p><em>capital letter</em> 大写字母</p><p><em>make no mistake</em> 完全可以肯定，没有半点怀疑</p><p><em>endeavor</em> 努力，奋力</p><p><em>front-runner</em> 领跑者</p><p><em>appeal</em> 上诉，申诉，异议；对···有感染力，引起兴趣</p><p><em>retention</em> 保留，保持，维持</p><p><em>classified</em> 机密的，保密的</p><p><em>adjudicate</em> 裁决，裁定，判决</p><p><em>conviction</em> 定罪，判罪；坚定的看法，坚定的信仰</p><p><em>imprisonment</em> 囚禁，服刑，刑期</p><p><em>account</em> 报道，报告，记述，描述</p><p><em>testify</em> 证明，作证，证实</p><p><em>assault</em> 袭击，攻击</p><p><em>stockbroker</em> 股票经纪人</p><p><em>grope</em> 猥亵</p><p><em>chip away at sth</em> 逐渐削弱或减少，一点点地除掉</p><p><em>memoir</em> 回忆录，自传</p><p><em>juror</em> 陪审员</p><p><em>retraction</em> 撤销，收回</p></blockquote><h2 id="个人感悟"><a href="#个人感悟" class="headerlink" title="个人感悟"></a>个人感悟</h2><p> 🍉吃瓜，不予置评</p>]]></content>
      
      
      <categories>
          
          <category> 每日阅读分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 英语提升 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>特朗普声称自己即将被捕</title>
      <link href="/2023/06/01/te-lang-pu-sheng-cheng-zi-ji-ji-jiang-bei-bu/"/>
      <url>/2023/06/01/te-lang-pu-sheng-cheng-zi-ji-ji-jiang-bei-bu/</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文地址：</p><p><a href="https://mp.weixin.qq.com/s/OAjThmalRmv3hNNRe6bB8A">https://mp.weixin.qq.com/s/OAjThmalRmv3hNNRe6bB8A</a></p></blockquote><h1 id="Ex-US-President-Donald-Trump-expects-to-be-arrested-on-Tuesday"><a href="#Ex-US-President-Donald-Trump-expects-to-be-arrested-on-Tuesday" class="headerlink" title="Ex-US President Donald Trump expects to be arrested on Tuesday"></a>Ex-US President Donald Trump expects to be arrested on Tuesday</h1><h1 id="From-BBC"><a href="#From-BBC" class="headerlink" title="From: BBC"></a>From: BBC</h1><hr><p>Donald Trump says he expects to be arrested on Tuesday and has urged his supporters to launch mass protests.</p><p>However his lawyer said there had been no communication from law enforcement and the former president’s post was based on media reports.</p><p>Prosecutors have been looking at a possible indictment of Mr Trump. Reports say it could come next week.</p><p>If he is indicted, it would be the first criminal case ever brought against a former US president.</p><p>This case focuses on alleged hush money paid on Mr Trump’s behalf by his lawyer to porn star Stormy Daniels prior to the 2016 presidential election.</p><p>It is one of several cases in which the 76-year-old is currently being investigated, although he has not yet been charged in any and denies wrongdoing in each.</p><p>Mr Trump has pledged to continue his campaign to become the Republican nominee in the 2024 presidential election, even if he is indicted.</p><p>Past efforts to investigate him, including two impeachment trials, the Russia investigation and the Mar-a-Lago raid, have tended to make him more popular with his base, so an indictment could have a similar effect.</p><p>It is not yet known if he is going to be criminally charged this week or even, beyond broad strokes, what those charges might be.</p><p>But with the former president predicting an arrest, and calling for mass protests, this is a journey into unknown territory.</p><p>Mr Trump has a loyal base of followers, and the 6 January 2021 attack on the US Capitol by his supporters following his repeated calls to protest has proven that a fraught situation can quickly escalate into violence.</p><p>On Saturday Mr Trump wrote on his social networking site Truth Social that “illegal leaks” from the Manhattan district attorney’s office “indicate” he would be arrested on Tuesday.</p><p>The district attorney’s office has not yet commented. Mr Trump’s lawyer, Susan Necheles, said her team had not heard anything from law enforcement officials.</p><p>“Since this is a political prosecution, the district attorney’s office has engaged in a practice of leaking everything to the press, rather than communicating with President Trump’s attorneys as would be done in a normal case,” she said.</p><p>The Republican Speaker of the US House of Representatives, Kevin McCarthy, has hit out at the investigation, calling it “an outrageous abuse of power by a radical DA [district attorney]”.</p><p>In a tweet, he also promised to investigate whether federal money was being used to interfere in elections “with politically motivated prosecutions”.</p><p>Any indictment would create a complicated calculation for Mr Trump’s rivals within the Republican Party, as they decide whether to up their attacks on the former president while he is potentially distracted or keep their heads down and hope for the best.</p><p>If history is any guide, it will be the latter.</p><p><strong>What happens next?</strong></p><p>• Grand jury finishes its investigation </p><p>Trump’s former personal lawyer, Michael Cohen, and ex-aides Kellyanne Conway and Hope Hicks, are among those understood to have given evidence so far. The Trump team has said the former president declined an invitation to appear, a sign the case is almost over, according to experts. Reports suggest one final witness could give evidence, possibly on Monday.</p><p>• Prosecutors decide whether to indict </p><p>Once the investigation is complete, the grand jury votes on whether to recommend criminal charges. However, their verdict is not binding. Ultimately, it is up to Manhattan District Attorney Alvin Bragg to determine what, if any, charges to bring. There is no deadline for this. It is a legal decision - what does he believe can he prove beyond a reasonable doubt to win a conviction - but also a deeply political one.</p><p>• A possible Trump court appearance in New York </p><p>A former US president has never been indicted before but Mr Trump’s lawyer said he would follow normal procedure. Typically, a defendant is either arrested or surrenders to the authorities - if they are facing a more serious felony charge they would be handcuffed. They then have their photo and fingerprints taken. After an initial hearing - called an arraignment - a defendant in a white-collar crime case like this is usually released until the next court date.</p><p>The Stormy Daniels case is about how Mr Trump reimbursed his lawyer Michael Cohen after Cohen paid Ms Daniels $130,000. The record for the payment reimbursing Cohen says the payment was for “legal fees”. Prosecutors may say this amounts to Mr Trump falsifying business records, a misdemeanour in New York.</p><p>US media organisations say law enforcement agencies in New York are preparing for the possibility of Mr Trump being indicted and appearing in a Manhattan courtroom as early as next week.</p><p>According to the Associated Press, they are considering the practicalities of taking a former president into court, including questions around security.</p><p>Donald Trump faces a separate criminal investigation over efforts to overturn his narrow loss in the state of Georgia in the 2020 presidential election - though it is not known if the former president is being directly investigated.</p><p>The Department of Justice is also looking at whether classified government documents were handled incorrectly after Mr Trump left office, as well as broader efforts to undermine the results of the presidential election three years ago - including the 6 January attack.</p><hr><h2 id="生词记录"><a href="#生词记录" class="headerlink" title="生词记录"></a>生词记录</h2><blockquote><p><em>arrest</em> 逮捕，拘捕</p><p><em>protest</em> 反抗，抗议，示威，游行</p><p><em>law enforcement</em> 执法部门</p><p><em>prosecutor</em> 检察官，原告律师</p><p><em>indictment</em> 起诉，控诉，谴责</p><p><em>indict</em> 起诉，控告</p><p><em>allege</em> 声称</p><p><em>hush money</em> 封口费</p><p><em>porn</em> 色情</p><p><em>wrongdoing</em> 不当行为，违法行为</p><p><em>pledge</em> 发誓，承诺，抵押</p><p><em>campaign</em> 竞选，战役，运动</p><p><em>nominee</em> 候选人</p><p><em>impeachment</em> 弹劾，控告</p><p><em>trial</em> 审判，试验</p><p><em>raid</em> 突袭，突击检查，打劫</p><p><em>territory</em> 领土，地盘，领域</p><p><em>fraught</em> 充满（风险，问题），令人担忧的</p><p><em>attorney</em> 律师</p><p><em>prosecution</em> 起诉，控方，从事，进行，实施</p><p><em>hit out</em> 猛烈批评，严厉抨击</p><p><em>outrageous</em> 无耻的，无法接受的，吓人的，令人震惊的</p><p><em>radical</em> 激进的，极端的，根本的，彻底的</p><p><em>grand jury</em> 美国大陪审团</p><p><em>verdict</em> 判决，意见，结论</p><p><em>binding</em> 有约束力的</p><p><em>typically</em> 通常来说</p><p><em>defendant</em> 被告</p><p><em>surrender</em> 投降，放弃</p><p><em>felony</em> 重罪</p><p><em>handcuff</em> 給…戴手铐</p><p><em>arraignment</em> 传讯</p><p><em>reimburse</em> 偿还，补偿</p><p><em>falsify</em> 伪造，篡改</p><p><em>amount to sth</em> 等于，意味着，达到，总计</p><p><em>misdemeanour</em> 不端行为，不检点的举止，轻罪</p><p><em>practicalities</em> 可行性</p><p><em>narrow</em> 狭窄，微小的，勉强的</p></blockquote><h2 id="文章概述"><a href="#文章概述" class="headerlink" title="文章概述"></a>文章概述</h2><blockquote><p>特朗普发文声称自己即将被捕，呼吁他的支持者发起抗议。文章介绍了事件的来龙去脉以及之后可能的走向。</p></blockquote><h2 id="个人感悟"><a href="#个人感悟" class="headerlink" title="个人感悟"></a>个人感悟</h2><blockquote><p><del>难道是川建国卧底的事件败露了？</del>（滑稽😂）</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 每日阅读分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 英语提升 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>物理提醒作用大</title>
      <link href="/2023/06/01/wu-li-ti-xing-zuo-yong-da/"/>
      <url>/2023/06/01/wu-li-ti-xing-zuo-yong-da/</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文地址：</p><p><a href="https://aliabdaal.com/newsletter/the-power-of-physical-reminders/">https://aliabdaal.com/newsletter/the-power-of-physical-reminders/</a></p></blockquote><h1 id="The-Power-of-Physical-Reminders"><a href="#The-Power-of-Physical-Reminders" class="headerlink" title="The Power of Physical Reminders"></a>The Power of Physical Reminders</h1><hr><p>Hey friends,</p><p>This week’s message is pretty simple: never underestimate the power of physical reminders.</p><p>For the past weeks my team and I have used four big <a href="https://geni.us/WzbaaSB">Magic Whiteboards</a> (stuck to the studio wall) to plan all our YouTube content. It’s honestly been a huge productivity hack.</p><p>We do have a detailed production calendar in Notion. But having our guiding goals and principles on the wall keeps everyone focused and working in sync on big goals that matter.</p><p>(Btw I’m using <a href="https://geni.us/6UXes">these OG Magic Whiteboards</a>.)</p><p><img src="https://aliabdaalltd.wpengine.com/wp-content/uploads/2023/01/email-11.jpg" alt="img"></p><p>Here’s what’s on the 4 whiteboards:</p><ol><li><strong>YouTube Clubs</strong><br>A list of the 12 ‘types’ of video that I tend to make, including Tech Club, Health Club, Business Club, etc. If I ever get stuck thinking of a video idea, I glance at the list and ask myself ‘which of these have I not covered recently?’</li><li><strong>Rules of the Game</strong><br>It’s hugely helpful to have these guiding principles on the wall – it reminds everyone (especially me) of what makes a good video, and of our high production standards. It’s so easy to technically <strong>know</strong> something (like ‘always have a snappy video hook’) but still forget to <strong>apply</strong> that knowledge. I try to run through the whole list before filming&#x2F;uploading any video.</li><li><strong>Project Blow Up the Channel With Shorts</strong><br><strong>​</strong>YouTube Shorts can drive a lot of extra views, netting more subscribers who’ll get value from my long-form videos. So I’m trying to consistently publish a lot of them, using this content board as inspiration. This is similar to the <a href="https://jamesclear.com/stop-procrastinating-seinfeld-strategy">Seinfeld Strategy</a> – build up a streak for long enough and you won’t want to break it. Filming a big batch of Shorts <strong>can</strong> feel a bit tedious, but this chart helps me internalise that it’s all part of a grand plan rather than being pointless grunt work.</li><li><strong>Project Long Form</strong><br>Similar concept to the Shorts board. I’m aiming to publish roughly x2 long-form videos per week, and this chart reminds me + the team of that commitment every day. I write down what videos we’re aiming to release that week, and we all get a little kick of satisfaction when they’re uploaded and crossed off.</li></ol><p><img src="https://aliabdaalltd.wpengine.com/wp-content/uploads/2023/01/email-1-4.jpg" alt="img"></p><p>If you find yourself getting lost in the nitty-gritty of everyday life, I highly recommend giving yourself some physical reminders. Streak charts, wall calendars, Post-It notes – they’re all a good, constant reminder of your priorities.</p><p>I’ll report back in a few weeks on how this experiment plays out.</p><p>Most ‘productivity hacks’ feel game-changing for the first week or so, then get less effective as the novelty wears off… But that’s a topic for another issue 😛</p><p>Have a great week!</p><p>Ali xx</p><hr><h2 id="生词记录"><a href="#生词记录" class="headerlink" title="生词记录"></a>生词记录</h2><blockquote><p><em>physical</em> 物理，身体，生理，实物，实际，肉体</p><p><em>technically</em> 严格来说，理论上，技术性</p><p><em>snappy</em> 生动，活泼</p><p><em><strong>Blow Up</strong></em> 爆炸，炸毁</p><p><em>streak</em> 连胜，条纹，斑纹，气质</p><p><em>tedious</em> 繁琐，单调乏味，冗长，枯燥</p><p><em>internalise</em> 内化</p><p><em>grand</em> 盛大，隆重，豪华</p><p><em>pointless</em> 无意义，无谓，不得要领</p><p><em>grunt</em> 咕噜，繁重</p><p><em>commitment</em> 承诺，致力于，决心</p><p><em>satisfaction</em> 满足，满意</p><p><em>cross off</em> 划掉</p><p><em>novelty</em> 新鲜感，新奇</p></blockquote><h2 id="文章概述"><a href="#文章概述" class="headerlink" title="文章概述"></a>文章概述</h2><blockquote><p>作者和他的团队在白板上列出他们的任务，目标以及指导方案，提醒自己每天应该做什么，怎样做，不至于在每天繁琐的业务之中迷失而忘记初心，这对他们生产力提升有十分大的帮助。</p></blockquote><h2 id="个人感悟"><a href="#个人感悟" class="headerlink" title="个人感悟"></a>个人感悟</h2><blockquote><p>列 TODO-List，将每天的任务按一定的优先级列出，然后执行。</p><p>这种方法确实有一定的帮助，但需要高度的自制力，自制力不足难以坚持。</p><p>其次，很多人看见别人列的计划详细，排版精致（譬如手账，计划本等诸如此类的），因此也会有跃跃欲试的冲动，但新鲜感一过就抛之脑后，列的什么计划早忘得一干二净，先玩为敬。</p><p>个人认为当你每天都被很多琐事烦恼时，可以用此方法梳理一下任务，避免手忙脚乱。若要每天都列计划，恐怕还是适合自制力非凡的优秀人才，这或许也就是别人为何持续优秀的原因之一。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 每日阅读分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 英语提升 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爱读书的孩子越来越少</title>
      <link href="/2023/06/01/ai-du-shu-de-hai-zi-yue-lai-yue-shao/"/>
      <url>/2023/06/01/ai-du-shu-de-hai-zi-yue-lai-yue-shao/</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文地址：<a href="https://mp.weixin.qq.com/s/gd8MNhn4DQezDYM1QuwwVA">https://mp.weixin.qq.com/s/gd8MNhn4DQezDYM1QuwwVA</a></p></blockquote><h1 id="Study-Finds-Reading-to-Children-of-All-Ages-Grooms-Them-to-Read-More-on-Their-Own"><a href="#Study-Finds-Reading-to-Children-of-All-Ages-Grooms-Them-to-Read-More-on-Their-Own" class="headerlink" title="Study Finds Reading to Children of All Ages Grooms Them to Read More on Their Own"></a><strong>Study Finds Reading to Children of All Ages Grooms Them to Read More on Their Own</strong></h1><hr><p>Cue the hand-wringing about digital distraction: Fewer children are reading books frequently for fun, according to a new report released Thursday by Scholastic, the children’s book publisher.</p><p>In a 2014 survey of just over 1,000 children ages 6 to 17, only 31 percent said they read a book for fun almost daily, down from 37 percent four years ago.</p><p>There were some consistent patterns among the heavier readers: For the younger children — ages 6 to 11 — being read aloud to regularly and having restricted online time were correlated with frequent reading; for the older children — ages 12 to 17 — one of the largest predictors was whether they had time to read on their own during the school day.</p><p>The finding about reading aloud to children long after toddlerhood may come as a surprise to some parents who read books to children at bedtime when they were very young but then tapered off. Last summer, the American Academy of Pediatrics announced a new policy recommending that all parents read to their children from birth.</p><p>“A lot of parents assume that once kids begin to read independently, that now that is the best thing for them to do,” said Maggie McGuire, the vice president for a website for parents operated by Scholastic.</p><p>But reading aloud through elementary school seemed to be connected to a love of reading generally. According to the report, 41 percent of frequent readers ages 6 to 10 were read aloud to at home, while only 13 percent of infrequent readers were being read to.</p><p>Scholastic, which operates book fairs in schools and publishes popular children’s books including the Harry Potter and Captain Underpants series, has been commissioning the “Kids and Family Reading Report” since 2006. For the first time this year, the report, conducted by YouGov, a market research firm, looked at predictors that children of different ages would be frequent readers, defined as children who read books for fun five or more days a week.</p><p>Kristen Harmeling, a partner at YouGov who worked on the report, said that children in the survey frequently cited reading aloud as a special bonding time with their parents. As children age, “I don’t think that parents know how important that time and the role that it plays in children’s lives,” she said.</p><p>Of course, children who love to read are generally immersed in households with lots of books and parents who like to read. So while parents who read to their children later in elementary school may encourage those children to become frequent readers on their own, such behavior can also result from “a whole constellation of other things that goes on in those families,” said Timothy Shanahan, professor emeritus of urban education at the University of Illinois at Chicago and a past president of the International Reading Association.</p><p>There is not yet strong research that connects reading aloud at older ages to improved reading comprehension. But some literacy experts said that when parents or teachers read aloud to children even after they can read themselves, the children can hear more complex words or stories than they might tackle themselves.</p><p>“It’s this idea of marinating children in higher-level vocabulary,” said Pam Allyn, founder of LitWorld.Org, a nonprofit group that works to increase literacy among young people. “The read-aloud can really lift the child.”</p><p>Other literacy experts say the real value of reading to children is helping to develop background knowledge in all kinds of topics as well as exposure to sophisticated language.</p><p>“It wouldn’t have to be reading” to accomplish that, said Catherine Snow, a professor at the Harvard Graduate School of Education. “A two-minute conversation about something on television or something in a magazine or something that you’re reading yourself can also have some of the same positive effects as reading aloud.”</p><p>Although the Scholastic report found that teenagers were more likely to read frequently for fun if they had dedicated independent reading time in school, only 17 percent of all children surveyed reported having time to read a book of their choice at school daily. Just 10 percent of 12- to 14-year-olds and 4 percent of 15- to 17-year-olds reported having that time in class. Such reading time at school may be particularly important for low-income children, who reported that they were more likely to read for fun at school than at home.</p><p>While previous studies have shown little connection between independent reading time at school and better reading habits or comprehension, some large school districts, including Boston and Chicago, encourage teachers to include time in the day for students to pick books and read.</p><p>Parents also see a connection. Emily Skelding, a mother of four in New Orleans and a former middle school teacher, said that her eldest son, Sumner, 15, used to devour books as a child. But now that he has no time at school to read on his own — or perhaps more significant, to choose the books he wants to read — “he stopped reading for pleasure,” Ms. Skelding said.</p><hr><h2 id="生词记录"><a href="#生词记录" class="headerlink" title="生词记录"></a>生词记录</h2><blockquote><p><em>hand-writing</em> 绝望</p><p><em>distraction</em> 分心的事，分散注意力的东西</p><p><em>pattern</em> 模式，方式，形式；图案，花样</p><p><em>predictor</em> 预测因子，预测器</p><p><em>toddlerhood</em> 学步期</p><p><em>taper off</em> 逐渐减小，逐步减弱</p><p><em>pediatrics</em> 儿科学</p><p><em>assume</em> 假设，假定，认为；承担，担任，夺取</p><p><em>elementary school</em> 小学</p><p><em>fair</em> 园游会，游乐会；集市；商品展销会；白皙的，浅黄的，金色的</p><p><em>commission</em> 委员会；委任···军官；安排···做；（机器，军舰）在服役的，在使用中的</p><p><em>bonding</em> 人与人之间的关系，亲密关系的形成</p><p><em>immerse</em> 深陷于，沉浸于</p><p><em>constellation</em> 星座；群英荟萃，人才济济</p><p><em>emeritus</em> 荣誉退休的</p><p><em>literacy</em> 识字，读写能力；知识，能力</p><p><em>marinate</em> 腌，浸泡</p><p><em>devour</em> 狼吞虎咽，吞食；如饥似渴地阅读</p></blockquote><h2 id="个人感悟"><a href="#个人感悟" class="headerlink" title="个人感悟"></a>个人感悟</h2><blockquote><p>现在生活中的诱惑太多，确实是很少能够静下心来阅读一本书了。</p><p>突然想起我最近阅读还是上个月的事情，我发现只有开始阅读自己喜欢的书时就会沉浸其中直到读完为止，但一旦停下来就很难再找到开始阅读的机会，至少我自己是这样的。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 每日阅读分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 英语提升 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浪费了生命中的5天</title>
      <link href="/2023/06/01/lang-fei-liao-sheng-ming-zhong-de-5-tian/"/>
      <url>/2023/06/01/lang-fei-liao-sheng-ming-zhong-de-5-tian/</url>
      
        <content type="html"><![CDATA[<blockquote><p> 原文地址：</p><p><a href="https://aliabdaal.com/newsletter/i-wasted-5-days-of-my-life/">https://aliabdaal.com/newsletter/i-wasted-5-days-of-my-life/</a></p></blockquote><h1 id="I-Wasted-5-Days-of-My-Life"><a href="#I-Wasted-5-Days-of-My-Life" class="headerlink" title="I Wasted 5 Days of My Life"></a>I Wasted 5 Days of My Life</h1><hr><p>Hey friends,</p><p>Something unusual happened to me this December.</p><p>One Sunday I woke up and just… didn’t feel like doing anything.</p><p>Not working on my business, not filming YouTube videos. Not even something actively recharging (like going for a walk).</p><p>I’m usually pumped for the day ahead. But this time my brain just said: <em>Meh, why bother getting up?</em></p><p>If you’re a long-term Sunday Snippets reader, you know I like to apply the <a href="https://aliabdaal.com/the-reitoff-principle-for-productivity/">Reitoff Principle</a> in these situations:<em>If there’s a day where I get home from work a little late and I’m feeling pretty tired, I’ll just write-off the evening and lounge on the sofa reading a book or getting through my backlog of Peter McKinnon and Matt D’Avella videos, completely guilt-free.</em><br><em>​</em><br><em>–</em> <a href="https://aliabdaal.com/the-reitoff-principle-for-productivity/">Sunday Snippets, May 2019</a>​</p><p>But this time I made <strong>a crucial mistake</strong>.</p><p>Instead of accepting the situation and devoting the next few days to Netflix, takeout, and light reading, I talked myself into ‘being productive’. <em>I have a book to write. Videos to film. This business won’t run itself.</em></p><p>What that <strong>actually</strong> looked like was me slumped at my desk, wrapped in a blanket with a mug of tea, doing a bunch of pseudo work + watching random video essays. Which lasted for about 5 days, until I woke up on Thursday feeling back to normal and ready to take on the world.</p><p>But if I’d applied the Reitoff Principle <strong>from the beginning</strong> I’d probably have recovered in ~2 days, and had a much better time.</p><p>Moral of the story: give yourself a break on days when you know you won’t be productive.</p><p>Have a great week!</p><p>Ali xx</p><h2 id="生词记录"><a href="#生词记录" class="headerlink" title="生词记录"></a>生词记录</h2><blockquote><p><em>film</em> 电影，拍摄</p><p><em>actively</em> 积极，活跃</p><p><em>recharge</em> 充电，补给</p><p><em>pump</em> 泵，水泵</p><p><em>bother</em> 打扰，费心，懒得，麻烦</p><p><em>snippet</em> 片段，代码片段</p><p><em>write-off</em>  报销，抹杀</p><p><em>backlog</em> 积压，待定，积累</p><p><em>guilt-free</em> 无负罪感</p><p><em>crucial</em> 重要，关键，决定性</p><p><em>Instead of</em> 替代，而不是</p><p><em>takeout</em> 输出，发泄，外卖</p><p><em>light</em> 光，轻型，浅</p><p><em>slump</em> 低迷，不景气，萧条，滑坡，经济衰退</p><p><em>pseudo</em> 假</p><p><em>moral</em> 道德，精神，寓意</p></blockquote><h2 id="文章概述"><a href="#文章概述" class="headerlink" title="文章概述"></a>文章概述</h2><blockquote><p>作者在某天突然感觉到自己很颓废，什么都不想做，只想躺在床上。以往这种情况他都会选择休息放松自己一段时间后再重归工作，但此次他选择了继续工作，结果状态低迷，效率低下，虚度了5天时间，最后幡然醒悟。</p></blockquote><h2 id="个人感悟"><a href="#个人感悟" class="headerlink" title="个人感悟"></a>个人感悟</h2><blockquote><p>学有学样，玩有玩样。该学的时候认真学，该玩的时候放肆玩。不要学习时想着玩，导致学不进去；也不要玩时想着学，导致玩的不开心。最重要的是学会劳逸结合，这样效率才会最大化。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 每日阅读分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 英语提升 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>洪都拉斯与中国建交</title>
      <link href="/2023/06/01/hong-du-la-si-yu-zhong-guo-jian-jiao/"/>
      <url>/2023/06/01/hong-du-la-si-yu-zhong-guo-jian-jiao/</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文地址：</p><p><a href="https://mp.weixin.qq.com/s/Gx5-X2NOfp9wC8l8eCauyg">https://mp.weixin.qq.com/s/Gx5-X2NOfp9wC8l8eCauyg</a></p></blockquote><h1 id="Honduras-says-there-is-‘only-one-China’-as-it-officially-cuts-ties-with-Taiwan"><a href="#Honduras-says-there-is-‘only-one-China’-as-it-officially-cuts-ties-with-Taiwan" class="headerlink" title="Honduras says there is ‘only one China’ as it officially cuts ties with Taiwan"></a>Honduras says there is ‘only one China’ as it officially cuts ties with Taiwan</h1><hr><p>Honduras has cut diplomatic ties with Taiwan, the Latin American country announced on Saturday, saying it recognises “only one China in the world”.</p><p>The move leaves Taiwan recognised by only 13 sovereign states .</p><p>“The government of the Republic of Honduras recognises the existence of only one China in the world and that the government of the People’s Republic of China is the only legitimate government that represents all of China,” the ministry statement said .</p><p>It added that: “Taiwan is an inalienable part of Chinese territory , and as of today, the Honduran government has informed Taiwan the severance of diplomatic relations , pledging not to have any official relationship or contact with Taiwan.”</p><p>China said its foreign minister , Qin Gang , and Honduran foreign minister Eduardo Enrique Reina signed the deal on diplomatic recognition in Beijing, ending relations with Taiwan dating back to the 1940s.</p><p>Taiwan’s foreign minister , Joseph Wu, accused Honduran president Xiomara Castro of being misled by Chinese promises of financial aid . Honduras’s move followed negotiations with China on building a hydroelectric dam in the country.</p><p>The announcement by Honduras’s foreign ministry comes amid rising tensions between Beijing and the United States .</p><p>Taiwan retains robust informal ties with more than 100 other countries, most importantly the US. The US doesn’t have diplomatic relations with Taiwan but has maintained that Taipei is an important partner in the Indo-Pacific.</p><p>Taiwan still has formal ties with 13 nations including Belize, Paraguay and Guatemala in Latin America, and Vatican City. Most of its remaining partners are island nations in the Caribbean and South Pacific, along with Eswatini in southern Africa.</p><p>Many of the allies receive financial assistance from Taiwan, or have access to Taiwan’s medical system or scholarships at Taiwanese universities. The ministry of foreign affairs confirmed on Sunday that with the ending of ties with Honduras, 170 students would lose their scholarships at the end of the current semester.</p><p><strong>The People’s Republic of China and the Republic of Honduras Establish Diplomatic Relations</strong></p><p>On 26 March 2023, State Councilor and Foreign Minister Qin Gang held talks with Foreign Minister of Honduras Eduardo Reina in Beijing, and they signed the Joint Communiqué on the Establishment of Diplomatic Relations Between the People’s Republic of China and the Republic of Honduras. The main points of the communiqué are as follows :</p><p>The People’s Republic of China and the Republic of Honduras, in keeping with the interests and desire of the two peoples, have decided to recognize each other and establish diplomatic relations at the ambassadorial level, effective from the date of signature of this communiqué.</p><p>The two Governments agree to develop friendly relations between the two countries on the basis of the principles of mutual respect for sovereignty and territorial integrity , mutual non-aggression, non-interference in each other’s internal affairs , equality , mutual benefit and peaceful coexistence.</p><p>The Government of the Republic of Honduras recognizes that there is but one China in the world, the Government of the People’s Republic of China is the sole legal Government representing the whole of China, and Taiwan is an inalienable part of China’s territory . The Government of the Republic of Honduras shall sever “ diplomatic relations ” with Taiwan as of this day and undertakes that it shall no longer develop any official relations or official exchanges with Taiwan. The Government of the People’s Republic of China appreciates this position of the Government of the Republic of Honduras.</p><hr><h2 id="生词记录"><a href="#生词记录" class="headerlink" title="生词记录"></a>生词记录</h2><blockquote><p><em>diplomatic</em> 外交的</p><p><em>cut ties with sb.</em> 与…切断联系&#x2F;关系</p><p><em>sovereignty</em> 主权，统治权</p><p><em>inalienable</em> 不可分割的</p><p><em>severance</em> 解雇费，遣散费；断绝，中断，分离</p><p><em>pledge</em> 承诺，保证；抵押；誓言，诺言</p><p><em>ministry</em> 外交部</p><p><em>minister</em> 部长</p><p><em>negotiation</em> 谈判，协商</p><p><em>hydroelectric</em> 水电的</p><p><em>dam</em> 大坝</p><p><em>retain</em> 保留，保持，保有</p><p><em>robust</em> 坚固的，耐用的，强壮的</p><p><em>ally</em> 盟友，结盟</p><p><em>semester</em> 学期</p><p><em>communique</em> 公报</p><p><em>ambassadorial</em> 大使的</p><p><em>mutual respect for sovereignty and territorial integrity , mutual non- aggression , non- interference in each other’s internal affairs , equality , mutual benefit and peaceful coexistence</em> </p><p>尊重主权，领土完整，互不侵犯，互不干涉内政，平等互利，和平共处</p><p><em>server</em> 切断，中断</p><p><em>undertake</em> 承诺，承担</p></blockquote><h2 id="个人感悟"><a href="#个人感悟" class="headerlink" title="个人感悟"></a>个人感悟</h2><blockquote><p>没有永远的朋友，也没有永远的敌人，只有永远的利益。只有自身足够强大，才能让他人信服。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 每日阅读分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 英语提升 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>汶川地震15年了</title>
      <link href="/2023/06/01/wen-chuan-di-zhen-15-nian-liao/"/>
      <url>/2023/06/01/wen-chuan-di-zhen-15-nian-liao/</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文地址</p></blockquote><h1 id="China’s-quake-Why-did-so-many-schools-collapse"><a href="#China’s-quake-Why-did-so-many-schools-collapse" class="headerlink" title="China’s quake: Why did so many schools collapse?"></a><strong>China’s quake: Why did so many schools collapse?</strong></h1><hr><p>In the wake of Monday’s 7.9-magnitude earthquake in China’s southwestern province of Sichuan, some international experts are questioning the adequacy of the region’s building codes and construction practices.</p><p>Juyuan Middle School, about 60 miles from the epicenter, was one of several schools that collapsed Monday. So far rescuers have recovered more than 60 bodies from the school, the official Xinhua News Agency said. But there was little word on the rest of the nearly 900 teenagers who were believed to be trapped under their collapsed school building.</p><p>Some students managed to escape, while at least one was pulled out of the wreckage alive Tuesday morning. At least 1,000 students and teachers were killed or missing after another school collapsed in Mianyang city, about 100 miles northeast of the epicenter, Xinhua reported.</p><p>Other schools closer to the epicenter also toppled, although specifics were not available because the area was generally inaccessible.</p><p>Earthquake engineers say that constructing a building to resist a quake of magnitude 7 or 8 is possible, but is often considered cost prohibitive, adding 7 to 8 percent in costs.</p><p>“Earthquake resistance is really more workmanship, than material,” Amr Elnashai, director of the Mid-America Earthquake Center at the University of Illinois at Urbana-Champaign, says.</p><p>Most seismologists interviewed say that China’s quake code is adequate, if not the most up-to-date. “It is well-defined and has all the right features,” says Mr. Elnashai.</p><p>Earthquake resistance, he notes, does not mean buildings don’t sustain damage; they do, but don’t collapse.</p><p>Schools, he says, are particularly vulnerable because they are often mid-sized buildings, smaller projects for contractors that are paid for the a government bureaucracies. Two recent earthquakes in Indonesia and in Kashmir also resulted in a disproportionate student deaths. “Often school buildings suffer quite a bit,” Elnashnai says.</p><p>China has “fairly rigorous building codes that have been in place. The problem is implementation of the codes,” says Andrew Smeall, an associate with the Asia Society’s US-China Center in New York.</p><p>Roger Musson, a seismologist at the British Geological Survey in Edinburgh, Scotland, notes that China has good earthquake engineers, but “you can never tell what’s going to happen on the spot.”</p><p>In Turkey’s devastating 1999 earthquake, building codes were excellent, but “fly by night builders” had erected buildings using “extremely poor” materials, Mr. Musson says.</p><p>“You can buy the building inspector,” he says, but “you can’t buy off the earthquake.”</p><p>China has a history of massive earthquakes. About 200 of its cities with a population of over a million are located at risk of magnitude 7 earthquake.</p><p>“In this case, where the earthquake occurred, there are a magnitude 4 earthquakes every couple of months,” says Lupei Zhu, an associate professor of geophysics, at St. Louis University in Missouri, and a former employee of the China Earthquake Administration, which oversees public awareness and the collection of seismic data for the country.</p><p>Bill Murphy, an engineering geologist at the University of Leeds in England, notes that magnitude of the quake is only one measure. “It’s not so much the magnitude, but the amount of shaking,” he says. “Some of these aftershocks [in Sichuan] have been earthquakes in their own right. That might cause some additional buildings to collapse, especially those that have been weakened by the main earthquake.”</p><p>A civil engineer at the University of Western Australia in Perth told New Scientist magazine that the buildings in Sichuan weren’t built to withstand an earthquake as large as the one that hit.</p><p>“The seismic code for the area substantially underestimated the earthquake strength,” said Hong Hao. He said that China’s earthquake regulations class this province as equivalent to a 7 on the Mercalli intensity scale, which uses historical information to assess risk of damage from earthquakes. That means there’s a 10 percent risk of an earthquake occurring every 50 years of an intensity that would cause negligible damaged. Monday’s quake was a 10 or 11 on the Mercalli scale.</p><p>Xinhua said more than 12,000 had died in Sichuan province alone, but the total number of casualties remained uncertain. In a massive government relief operation, some 20,000 soldiers and police have arrived in the area, with 30,000 more on the way.</p><p>“Survivors can hold on for some time. Now it’s not time to give up,” said Wang Zhenyao, disaster relief official at the Ministry of Civil Affairs in Beijing.</p><hr><h2 id="生词记录"><a href="#生词记录" class="headerlink" title="生词记录"></a>生词记录</h2><blockquote><p><em>in the wake of</em> 作为···的后果，随···之后而来</p><p><em>magnitude</em> 大的程度，巨大，重大，重要性；震级</p><p><em>adequacy</em> 足够，合格，合乎需要</p><p><em>epicenter</em> 震中</p><p><em>wreckage</em> 废墟，残骸；剩余物，残余物</p><p><em>topple</em> 打倒，推翻，颠覆；倒下，倒塌</p><p><em>specifics</em> 详情，细节</p><p><em>prohibitive</em> 费用高的负担不起的，价格令人望而却步的</p><p><em>workmanship</em> 工艺，技艺，手艺</p><p><em>seismologist</em> 地震学家</p><p><em>code</em>  法典法规，行为准则，道德规范；编码</p><p><em>well-defined</em> 表达清楚的，明确的</p><p><em>sustain</em> 维持，保持，使持续；经历，遭受</p><p><em>contractor</em> 承包人，承包商</p><p><em>bureaucracy</em> 官僚作风，官僚主义</p><p><em>disproportionate</em> 不成比例的，不相称的</p><p><em>rigorous</em> 严格的，细致的，谨慎的，彻底的</p><p><em>geological</em> 地质的，地质学的</p><p><em>devastating</em> 破坏性极强的；令人震惊的</p><p><em>fly-by-night</em> 不可靠的，无信用的</p><p><em>inspector</em> 检查员，视察员</p><p><em>buy sb off</em> 收买，买通，贿赂</p><p><em>oversee</em> 监督，监管</p><p><em>seismic</em> 地震的，地震引起的；突然的，造成严重破坏的</p><p><em>aftershock</em> 地震后的余震</p><p><em>civil engineer</em> 土木工程师</p><p><em>substantially</em> 基本上，大体上；很大程度上</p><p><em>equivalent</em> 相等的，相同的；相等的东西，等量</p><p><em>intensity</em> 强烈，剧烈；认真，全情投入</p><p><em>scale</em> 规模，大小，范围；标度，刻度，等级；比例</p><p><em>negligible</em> 微不足道的，不重要的</p></blockquote><h2 id="个人感悟"><a href="#个人感悟" class="headerlink" title="个人感悟"></a>个人感悟</h2><p>时间过得真快，这就已经15年了。犹记得当时我还在读小学，那时还小，尚不清楚地震是什么，只记得那天回家打开电视，电视里所有的频道都是播放着地震的救援以及伤亡情况…</p>]]></content>
      
      
      <categories>
          
          <category> 每日阅读分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 英语提升 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每天三分钟，生活大不同</title>
      <link href="/2023/06/01/mei-tian-san-fen-zhong-sheng-huo-da-bu-tong/"/>
      <url>/2023/06/01/mei-tian-san-fen-zhong-sheng-huo-da-bu-tong/</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文地址：</p><p><a href="https://aliabdaal.com/newsletter/three-minutes-a-day-to-change-your-life/">https://aliabdaal.com/newsletter/three-minutes-a-day-to-change-your-life/</a></p></blockquote><h1 id="Three-Minutes-a-Day-to-Change-Your-Life"><a href="#Three-Minutes-a-Day-to-Change-Your-Life" class="headerlink" title="Three Minutes a Day to Change Your Life"></a>Three Minutes a Day to Change Your Life</h1><hr><p>Hey friends,</p><p>This week the team and I flew out to Portugal for a mini team retreat, where we stayed at this huge 9-bedroom villa in Lisbon.</p><p>Most days were just spent chatting in the sun about work stuff, but we also found time to explore the city and eat dinner together every evening. It was a lot of of fun and good vibes.</p><p>One of the highlights of the week was when my CEO coach, <a href="https://www.ericpartaker.com/">Eric Partaker</a>, came to the villa to kick-off his bespoke coaching and mentoring program called the K2 Academy with the team. For context: Eric has advised fortune 50 CEOs, helped build Skype’s multi-billion dollar exit, and also wrote one of my favourite books from 2022 – <a href="https://www.ericpartaker.com/the-3-alarms">‘The Three Alarms’</a> (which I’ve talked about in <a href="https://aliabdaal.com/newsletter/the-three-alarms/">a previous newsletter</a>). So it was a super valuable and helpful day.</p><p><em>Oh, btw, Eric’s also kindly offering everyone a free download of his book which you can check out here:</em> <a href="https://www.ericpartaker.com/the-3-alarms"><strong>download ‘The Three Alarms’</strong></a><em>.</em></p><p>Something that particularly stuck with me from the session and book was his idea that behaviour follows identity. Basically, if we want to change our behaviour and build healthy habits, the best thing we can do is to assume a new identity i.e. start behaving like the heroic version of ourself.</p><p>Importantly, we need to figure out what our new identity looks like in three key areas of our life – health, wealth, and happiness – as these are the 20% of things that can create 80% of the improvements to our life.</p><p>In practice, the exercise involves creating a table that looks like this:</p><p><img src="https://aliabdaal.com/wp-content/uploads/2023/03/email-1024x179.webp"></p><p>So, for each of those three areas we write down an identity, some values, a goal, and a daily #1:</p><ol><li><strong>Identity</strong> – what is the inspiring identity you want to possess? E.g. ‘world fitness champion’ for health or maybe something like ‘David Goggins’ or ‘hawkeye’ if you want to attach the identity to a person &#x2F; character.</li><li><strong>Values</strong> – what 3 words guide the behaviour of that identity? E.g. a ‘world fitness champion’ would be strong, relentless, and disciplined.</li><li><strong>Goal</strong> – if a person with that identity set a goal for the next 3 months, what specific thing would that person achieve? E.g. a ‘world fitness champion’ would consistently hit the gym at least 4 times a week.</li><li><strong>Daily #1</strong> – what is one thing you will do <em>today</em> that will bring you closer to achieving that goal? E.g. going for a run, eating max 2000 calories, etc.</li></ol><p>For example, here’s what my table looks like:</p><p><img src="https://aliabdaal.com/wp-content/uploads/2023/03/email-1-1024x659.webp"><br>This table, then, basically acts as a blueprint for how we should live our life.</p><p>So, if I’m working, the idea is that I’d adopt the identity of (young) Charles Xavier and fully embrace the values of being honest, inspiring, and sharing without fear. It’s a super simple exercise, but it’s really helped me to switch gears and get into the right frame of mind whenever I sit down to get stuff done.</p><p>It literally takes 2-3 minutes to fill in, but it’s a genuinely incredibly helpful exercise with asymmetrical upside. In fact, everyone on my team is going to commit to spending 180 seconds a day doing this for the next few months, so I’d honestly recommend everyone give it a go too.</p><p>If you want, feel free to tag me on Twitter (<a href="https://twitter.com/AliAbdaal">@AliAbdaal</a>) with your own completed tables – I’d love to see them !😜</p><p>Have a great week!</p><p>Ali xx</p><h2 id="生词记录"><a href="#生词记录" class="headerlink" title="生词记录"></a>生词记录</h2><blockquote><p>Portugal 葡萄牙</p><p>retreat 撤退，静修期间</p><p>villa 别墅</p><p>vibes 气氛，氛围</p><p>highlight 亮点，强调</p><p>kick-off 启动</p><p>bespoke 定制</p><p>fortune 财富</p><p>for context 背景</p><p>stuck 坚持，粘，棍子</p><p>session 会议</p><p>relentless 无情，坚持不懈，冷酷无情</p><p>asymmetrical 非对称</p><p>upside 上行，好处，上部</p><p>commit to 承诺</p></blockquote><h2 id="文章概述"><a href="#文章概述" class="headerlink" title="文章概述"></a>文章概述</h2><blockquote><p>作者和他的团队去葡萄牙静修期间，有个号称是CEO教练的人（Eric）前往其所在的别墅授课，作者对会议和Eric书中一些观点印象深刻，然后对此发表的一些看法以及给我们示范应该如何去实践</p></blockquote><h2 id="个人感悟"><a href="#个人感悟" class="headerlink" title="个人感悟"></a>个人感悟</h2><blockquote><p>个人感觉就是对应我们常说的：</p><p>你想成为怎样的一个人，然后设定短期、中期、长期目标，同时为了达到这些目标，每天应花3分钟定好当天的计划，提升效率，早日圆梦。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 每日阅读分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 英语提升 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>欢迎大熊猫丫丫回家</title>
      <link href="/2023/06/01/huan-ying-da-xiong-mao-ya-ya-hui-jia/"/>
      <url>/2023/06/01/huan-ying-da-xiong-mao-ya-ya-hui-jia/</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文地址：<a href="https://mp.weixin.qq.com/s/Xes1mV3q4MQxHsfdTkP_Ig">https://mp.weixin.qq.com/s/Xes1mV3q4MQxHsfdTkP_Ig</a></p></blockquote><h1 id="Giant-panda-Ya-Ya-leaves-Memphis-Zoo-to-head-home-to-China-after-20-years"><a href="#Giant-panda-Ya-Ya-leaves-Memphis-Zoo-to-head-home-to-China-after-20-years" class="headerlink" title="Giant panda Ya Ya leaves Memphis Zoo to head home to China after 20 years"></a><strong>Giant panda Ya Ya leaves Memphis Zoo to head home to China after 20 years</strong></h1><hr><p>A giant panda who has lived at a US zoo for 20 years has embarked on her journey back home to China today, with millions of Chinese eagerly awaiting her return.</p><p>In a statement, Memphis Zoo confirmed Ya Ya “began her journey back to China” today, leaving the zoo to take a flight expected at noon bound for Shanghai.</p><p>The zoo said she’s being accompanied by the zoo’s senior veterinarian and Chief Zoological Officer - who have a combined total of more than 25 years of giant panda experience.</p><p>The statement said: “Memphis Zoo’s panda loan agreement ended this spring and Ya Ya is returning to China to live our her golden years.</p><p>“After 20 years, Ya Ya has become like family, and she will be sorely missed by the Memphis Zoo staff and the local community. We wish her all the best of luck in her new home.”</p><p>Ya Ya reportedly left the Tennessee zoo at around 8.45am local time, and is expected to be on a flight at noon for Shanghai.</p><p>At the top of popular social media network Weibo’s news section is ‘#Welcome Yaya Home Together#’ - showing how people are eagerly awaiting the return of the panda to her homeland.</p><p>As concerns grew for the panda’s treatment, some Chinese-Americans voluntarily flew to Memphis to visit and “guard for Ya Ya”.</p><p>Now, posts are spreading across Weibo with instructions on how to add panda icons to usernames, asking people to “forward and guard Ya Ya”.</p><p>Many people took to social media to wish the panda “safe travels”, saying she will “be missed”.</p><p>Other posted messages saying they were “honoured to have grown up” with the panda, and expressed gratitude at having been to see her before she left.</p><p>However, there have been some more aggressive messages left by social media users. One said: “Stop faking your affection, you make me sick” in Chinese.</p><p>Another said: “Ya Ya [has] suffered such a hard time. Come back home - we’re all waiting for you.”</p><p>One user took to Weibo to say: “The pain that has lingered in the heart of Chinese people for more than two months is finally relieved.</p><p>“How many days and nights, it looked at the sky and missed the clouds and moon in its hometown. How many seasons it has tasted bamboo and missed the flowers and grass of its hometown.”</p><p>Others said: “Ya Ya, welcome home, the dark days are over”.</p><p>People across China have been watching Ya Ya closely after questions were raised over the treatment of her and male mate Le Le who died in February.</p><p>The zoo has previously denied allegations of mistreatment, accusing activists of spreading misinformation.</p><p>The zoo said Ya Ya has a chronic skin and fur condition, which causes her fur to “occasionally” look “thin and patchy.”</p><p>Critics have been posting in the zoo’s comment section calling the zoo “nasty” saying children “will see animals being mistreated” if they visit in regards to allegations of mistreatment of the giant pandas.</p><p>Other users have responded to the latest news on Twitter saying: “Your family are always hungry as yaya? How dare your statement state that yaya [sic] has become like family?”</p><p>A video shared by animal advocacy groups In Defense of Animals and Panda Voices last year showed the pair pacing in circles. Groups said the animals seemed to have lost fur and weight, calling on them to be “returned to China before it’s too late.”</p><p>Anger was renewed in February after 25-year-old Le Le died.</p><p>Giant pandas live anywhere from 25 to 30 years in captivity, though many questioned whether the animals were being neglected by US zookeepers when relations between the US and China deteriorated due to diplomatic disputes and trade barriers.</p><p>People began pushing for Ya Ya’s return to China earlier following Le Le’s death - with people putting up slogans and pictures on advertisement locations across China.</p><p>Chinese experts flew to the US following Le Le’s death, and along with US counterparts, came to an initial conclusion he had died of heart disease.</p><p>Ya Ya was given a check up where it was determined she had a good appetite and stable weight, and was healthy apart from the skin issue.</p><p>Before she left, 22-year-old giant panda Ya Ya even had a farewell party at Memphis Zoo on Saturday, April 22, ahead of her return to China.</p><p>It’s thought around 500 people attended the event, which featured cultural Chinese performances.</p><p>Ya Ya and Le Le arrived in Memphis on loan in 2003 as part of what’s been called ‘panda diplomacy’ tactics used by China to help foster relationships with other countries.</p><hr><h2 id="生词记录"><a href="#生词记录" class="headerlink" title="生词记录"></a>生词记录</h2><blockquote><p><em>embark on</em> 开始，着手做</p><p><em>bound</em> 跳跃，跳动；前往&#x2F;开往···的；受束缚的，受约束的，在法律或道德上有义务的</p><p><em>veterinarian</em> 兽医</p><p><em>sorely</em> 极其，非常</p><p><em>icon</em> 图标；象征物，偶像</p><p><em>aggressive</em> 好斗的，挑衅的，侵略的；来势汹汹的，声势浩大的</p><p><em>linger</em> 继续存留，逗留，徘徊</p><p><em>allegation</em> 指控</p><p><em>mistreatment</em> 虐待</p><p><em>misinformation</em> 错误的消息，假消息</p><p><em>chronic</em> 慢性的，长期的</p><p><em>patchy</em> 零散的，散落的，分布不均衡的；时好时坏的</p><p><em>nasty</em> 令人厌恶的，极差的；不友好的，严重的，危险的；下流的，无礼的</p><p><em>advocacy</em> 拥护，主张，提倡</p><p><em>pace</em> 来回踱步，走来走去</p><p><em>fur</em> 皮毛</p><p><em>renew</em> 延长···期限；更新，更换；重新开始</p><p><em>captivity</em> 监禁，关押，圈养</p><p><em>deteriorate</em> 恶化</p><p><em>diplomatic</em> 外交的</p><p><em>slogan</em> 口号，广告语</p><p><em>counterpart</em>  职位相当的人，作用相当的事物</p><p><em>farewell</em> 告别</p><p><em>tactic</em> 策略，手法</p></blockquote><h2 id="个人感悟"><a href="#个人感悟" class="headerlink" title="个人感悟"></a>个人感悟</h2><blockquote><p>阔别20年，欢迎回家。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 每日阅读分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 英语提升 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>本周学到的重要一课</title>
      <link href="/2023/06/01/ben-zhou-xue-dao-de-chong-yao-yi-ke/"/>
      <url>/2023/06/01/ben-zhou-xue-dao-de-chong-yao-yi-ke/</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文地址：</p><p><a href="https://aliabdaal.com/newsletter/an-important-lesson-i-learned-this-week/">https://aliabdaal.com/newsletter/an-important-lesson-i-learned-this-week/</a></p></blockquote><h1 id="An-important-lesson-I-learned-this-week"><a href="#An-important-lesson-I-learned-this-week" class="headerlink" title="An important lesson I learned this week"></a>An important lesson I learned this week</h1><hr><p>Hey friends,</p><p>My team and I recently had a whole 2-day planning session. We bounced ideas around, and everyone had their say on the long-term business strategy.</p><p><img src="https://embed.filekitcdn.com/e/dHG4aSRazwrs3LA9HPR1C/pWfZ9qScrUJbasWX1CLteq/email"></p><p>Taking time off from ‘business as usual’ reminded me of this great point (roughly paraphrased from Steven Covey’s <a href="https://geni.us/highlyeffectivepeople"><em>The 7 Habits of Highly Effective People</em></a><em>):When it comes to Things, effectiveness and efficiency are usually broadly similar. But when it comes to People, effectiveness often</em> <em><strong>looks</strong></em> <em>like inefficiency.</em></p><p>As you probably know, I focus a lot on efficiency. I like to get things done ASAP, using the bare minimum of resources.</p><p><a href="https://www.youtube.com/watch?v=1ArVtCQqQRE"><img src="https://functions-js.convertkit.com/playbutton?play=%23FFFFFF&accent=%231677BE&thumbnailof=https://www.youtube.com/watch?v=1ArVtCQqQRE&width=480&height=270&fit=contain"></a></p><p>And that approach works great when I’m dealing with inanimate <strong>Things</strong> like studying, coding, cleaning the house.</p><p>But human relationships don’t work like that.</p><p>For example, I used to think that the faster we could get through a team meeting, the better. If a 1-hour meeting took 20 minutes I’d say ‘great, that was super efficient. Let’s get back to work.’</p><p>But what I realised during our planning session is that people need time and space to speak their mind. With two whole days set aside, everyone loosened up and a whole bunch of minor (and occasionally major) issues came to light that we’d have missed under normal circumstances.</p><p>Potentially mission-critical stuff.</p><p>And if you want to run a happy, profitable, <strong>effective</strong> business (rather than one that just <strong>looks</strong> efficient) you have to make time for that to happen.</p><p>In short: human beings aren’t machines. If you want to be effective in your collaborations and relationships, you can’t focus exclusively on ‘getting things done ASAP’. You need to account for the human factor, even if it <strong>feels</strong> inefficient.</p><p>Have a great week!</p><p>Ali xx</p><h2 id="生词记录"><a href="#生词记录" class="headerlink" title="生词记录"></a>生词记录</h2><blockquote><p>bounce 弹跳，反弹，跳动</p><p>roughly 大致，大概</p><p>paraphrase 意译，释义</p><p>effectiveness 有效性，效率</p><p>broadly 大体上</p><p>similar 类似，相似</p><p>approach 接近（v.） 方法，途径（n.）</p><p>inanimate 无生命的</p><p>loosened up 放松了</p><p>a whole bunch of minor(and occasionally major) issues</p><p>一堆微小的，有时是主要的问题</p><p>circumstances 形势，情况，环境</p><p>critical 批判，关键性，临界，危急，挑剔</p><p>collaborations 合作，协作</p><p>exclusively 专门，独家，独占</p><p>account 账号，账户，考虑，解释</p></blockquote><h2 id="文章概述"><a href="#文章概述" class="headerlink" title="文章概述"></a>文章概述</h2><blockquote><p>作者对高效的思考，他认为人类不是机器，不能仅仅专注在尽可能快地完成任务，还应充分考虑其他一些可能看起来浪费时间（低效率）的因素，这样才能更全面考虑，以免错过细节。</p></blockquote><h2 id="个人感悟"><a href="#个人感悟" class="headerlink" title="个人感悟"></a>个人感悟</h2><blockquote><p>个人感觉就是说单纯的快不能算效率高，注重效率的同时更应注重质量，高质高效完成任务才是最佳选择，因此应给予人们充足的思考时间与空间。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 每日阅读分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 英语提升 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>月薪1万的同事一年存了11万</title>
      <link href="/2023/06/01/yue-xin-1-wan-de-tong-shi-yi-nian-cun-liao-11-wan/"/>
      <url>/2023/06/01/yue-xin-1-wan-de-tong-shi-yi-nian-cun-liao-11-wan/</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文地址：<a href="https://mp.weixin.qq.com/s/vkv6z-osx1osKas47DQY5g">https://mp.weixin.qq.com/s/vkv6z-osx1osKas47DQY5g</a></p></blockquote><h1 id="Is-it-better-to-spend-or-save-The-surprising-answer"><a href="#Is-it-better-to-spend-or-save-The-surprising-answer" class="headerlink" title="Is it better to spend or save? The surprising answer"></a><strong>Is it better to spend or save? The surprising answer</strong></h1><hr><p>We all have our own money personality that represents our beliefs and behaviours around our cashola, and part of that is our identity as a spender or a saver.</p><p>Like many things, when it comes to being a spender or a saver, there’s often said to be a spectrum or a scale on which we all sit. Despite this, research has shown that generally we can all self-categorise as one or the other.</p><p>So which are you?</p><p>I’ll start. Hi, I’m Emma and I’m a natural spender.</p><p>I’ve always been a spender. It’s just the way I am. I was also the kid that would eat all my allocated lollies in one go and get jealous of the ones who saved theirs.</p><p>My natural spender tendencies meant I spent most of my life wishing I was a saver. Just like I envied the kids that saved their Skittles, I envied those that seemed to have this miraculous ability to hold onto their money.</p><p>“Life as a saver must be so great”, I’d think to myself. Never wondering where all your money went. Never feeling that wrath of getting to payday and having to dip into yet another attempt at saving.</p><p>But is being a saver actually better? Recently, I’ve come to question exactly that.</p><p>Traits of a natural saver</p><p>Research in the financial psychology field has established that our life experiences create a set of financial beliefs that inform the way we think and feel about money. Commonalities in beliefs and their correlating behaviours have led experts to develop four different ‘scripts’ or narratives for individuals to identify with – one of which is known as money vigilance.</p><p>Money vigilance is most strongly associated with the traits of a natural saver. Things like frugality, fears of not having enough, need for security, and a greater desire to retain money than to spend it.</p><p>On paper, a money vigilance narrative often makes for “better” financial outcomes. Natural savers tend to have more money in the bank, less trouble holding onto their income, and even an ability to disconnect with the idea of spending on enjoyment.</p><p>Your bank balance isn’t the only marker of financial wellbeing</p><p>While natural savers might have a higher savings rate (the percentage of their income sent to savings) or more money in the bank, natural spenders may actually be better positioned to achieve financial wellbeing.</p><p>That’s because a savvy saver’s juicy savings balance can actually be a sign of fear and anxiety around money. When we have fear around money running out or obsess over saving, our overall levels of wellbeing can decrease. These types of savers often find it hard to enjoy life as a result of their obsessive saving behaviours.</p><p>Saving all your money sounds great in theory – but what’s the point if you never use it for anything?</p><p>Savers carry a lower risk tolerance</p><p>Natural savers may also experience a lower risk tolerance than that of a spender. Being extremely fearful of risk can hold savers back from wealth creation behaviours like investing, or even things like mortgage debt.</p><p>Resistance around investing in assets that have the potential to outperform inflation can actually leave a savvy saver worse off in the long run.</p><p>While everyone has a varying risk appetite, spenders may be more able to see the value of buying things like shares or property, because they’re used to parting with their money in exchange for a benefit.</p><p>Are spenders better able to optimise their behaviour?</p><p>Now don’t get me wrong. Me and my fellow spendy Susans aren’t immune from limitations of our natural tendency to splurge.</p><p>The writing is on the wall. Overspending and overconsumption is common in the modern world of e-commerce and buy-now-pay-later. Every dollar spent is one less dollar that can be saved.</p><p>But as a reformed overspender myself, I have a theory. I reckon spenders have a greater appetite for behaviour change in their finances.</p><p>We know we can be a bit splurgey. We know we have to work that little bit harder to save for a rainy day.</p><p>But we’re more aware of the need to modify our behaviour to better our financial reality.</p><p>Savers are so used to being celebrated as embodying the ultimate financial ideal that it can actually be harder to recognise the benefit of modifying their financial beliefs and behaviours.</p><p>Ultimately, being too much of either spender or saver is a bad thing. But when we unpack the beliefs and behaviours of a spender, it can actually be easier to modify your spending behaviours than to get a saver to get comfortable parting with their money.</p><hr><h2 id="生词记录"><a href="#生词记录" class="headerlink" title="生词记录"></a>生词记录</h2><blockquote><p><em>personality</em> 个性，性格；名人，名流</p><p><em>cashola</em> 现金，货币</p><p><em>spectrum</em> 范围，各层次，系列，幅度；光谱</p><p><em>scale</em> 标度，刻度，等级；比例，比例尺；大小，规模，范围</p><p><em>categorise</em> 将…归类，对…进行分类</p><p><em>lolly</em> 棒棒糖</p><p><em>tendency</em> 倾向</p><p><em>miraculous</em> 奇迹般的，不可思议的</p><p><em>wrath</em> 愤怒，愤慨</p><p><em>payday</em> 发薪日</p><p><em>trait</em> 特征，特性，品质</p><p><em>commonality</em> 共通性</p><p><em>narrative</em> 叙事，陈述</p><p><em>vigilance</em> 警觉，警惕</p><p><em>frugality</em> 节俭</p><p><em>retain</em> 保持，保留</p><p><em>on paper</em> 理论上</p><p><em>savvy</em> 常识，实际能力；有见识的</p><p><em>juicy</em> 多汁的；生动有趣的，有吸引力的，富有刺激性的</p><p><em>obsessive</em> 着迷的，迷恋的，难以释怀的</p><p><em>outperform</em> 超过，胜过，比···做得好</p><p><em>worse off</em> 变得更糟</p><p><em>part with sth</em> 不情愿放弃，舍弃</p><p><em>immune</em> 有免疫力，不受影响，受保护，免除</p><p><em>splurge</em> 挥霍，乱花钱；大量的东西</p><p><em>the writing is on the wall</em> 某个事情即将发生或已不可避免</p><p><em>reform</em> 改过自新的，悔改的</p><p><em>save for a rainy day</em> 有备无患，以备不时之需</p><p><em>unpack</em> 解释，说明；打开箱包</p></blockquote><h2 id="个人感悟"><a href="#个人感悟" class="headerlink" title="个人感悟"></a>个人感悟</h2><blockquote><p>不应过度消费，不要冲动消费，但也不要过度节俭，该花的钱还是得花，不要亏待了自己。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 每日阅读分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 英语提升 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>暂告一段落</title>
      <link href="/2023/06/01/zan-gao-yi-duan-luo/"/>
      <url>/2023/06/01/zan-gao-yi-duan-luo/</url>
      
        <content type="html"><![CDATA[<p>​2020年毕业，疫情肆虐，经历一番挣扎过后，转型成功，来到广州成为一名程序猿（广漂），并在11月10日正式入职。</p><p>​转眼间，加入公司已528天，我也选择了在2022年4月22日这天离职了（还有一个好消息是广州在这天也摘星了，广州速度！）。</p><p><img src="https://s3.bmp.ovh/imgs/2022/04/26/4a9cb0a343cc60b3.png"></p><p>​在职期间，学会了很多，认识了很多朋友，其实还是很感谢提供了这样的一个平台，经历了很多的第一次，第一次租房，第一次万元工资（加上了所有绩效），第一次做分享…对我这种转型而来的程序猿来说，这些都是十分宝贵的经历。</p><p><img src="https://s3.bmp.ovh/imgs/2022/04/26/1664f8b3ad03ba7f.png"></p><p>​不过经历了一年多的漂泊生活后，每次放假回去待几天又要回来上班了，家就像是旅馆一样，最终还是选择回到家乡就近发展，毕竟钱多事少离家近至少都要占一个的。这一年多也有许多美好的回忆，和丁总，黄总每月一次的聚餐，和同事们一起为项目熬的夜，周五一起喝的奶茶…</p><p>​其实与深圳相比，我还是挺喜欢广州的，节奏不快，也足够包容，不过长远考虑还是先这样暂告一段落吧，广州，再见！</p><p><img src="https://s3.bmp.ovh/imgs/2022/04/26/fc2cb8e0c2fe3067.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 关于生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活随谈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>时间快与慢</title>
      <link href="/2023/06/01/shi-jian-kuai-yu-man/"/>
      <url>/2023/06/01/shi-jian-kuai-yu-man/</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文地址：<a href="https://mp.weixin.qq.com/s/cRSxwnpEet6d9PidgCgJeA">https://mp.weixin.qq.com/s/cRSxwnpEet6d9PidgCgJeA</a></p></blockquote><h1 id="Why-does-time-fly-…-or-not-It’s-all-in-your-mind"><a href="#Why-does-time-fly-…-or-not-It’s-all-in-your-mind" class="headerlink" title="Why does time fly … or not? It’s all in your mind"></a><strong>Why does time fly … or not? It’s all in your mind</strong></h1><hr><p>How many times have you felt the time fly on a busy day or felt it drag when you least wanted it to? Why does time seem to go faster or slower depending on what else is going on?</p><p>Most of us will be familiar with the experience of time passing excruciatingly slowly when we’re waiting for something to happen.</p><p>Studies have shown this is especially the case when we are looking forward to something, said cognitive neuroscientist Muireann Irish from the University of Sydney.</p><p>Think about a child who repeatedly asks, “Are we there yet?” or, “How long before I can open my Christmas presents?”</p><p>“If we’re waiting for something to happen … time can dilate and actually feel it has been a lot longer in duration,” Dr Irish said.</p><p>And time can appear to drag even more slowly if you’re the impulsive type, who gets restless or even angry when you don’t get what you want immediately.</p><p>In a study by German psychologist Marc Wittmann, people forced to sit in a room without doing anything for seven-and-a-half minutes felt the time passed differently, depending on who they were. Some said the duration was just two-and-a-half minutes, while for the most impulsive it felt like 20.</p><p>So it’s not just external factors, but who we are that influences our perception of time. But how does that work?</p><p>Fast v slow: How does our brain sense time?</p><p>There’s no real consensus on where and how in the brain time is processed, said Dr Wittman, who is from the Institute for Frontier Areas of Psychology and Mental Health in Freiburg.</p><p>But, he said evidence suggest our brain’s motor regions are important at timescales relevant to activities like talking, playing music, driving or playing sport — a matter of a few seconds at most.</p><p>When it comes to durations longer than five seconds, Dr Wittmann’s experiments indicate our judgments are not that accurate.</p><p>At this “fuzzy” level of sensing time, a different part of the brain is involved.</p><p>In another set of experiments carried out by Dr Wittman, people in an fMRI scanner were asked to judge the duration of intervals lasting up to 18 seconds.</p><p>He found more accurate judgements of duration were made by those who had more activity in a part of the brain called the insular cortex.</p><p>This is responsible for integrating signals from all over the body, and enables us to “sense our self” — and the passing of time, Dr Wittmann said.</p><p>“Through the feeling of our body over time we sense duration,” he said.</p><p>When we’re not doing anything, we’re less distracted and are more sensitive to how we feel and to the passing of time.</p><p>“In boredom, because we are overly sensing our own bodily feelings, time expands a lot.”</p><p>While time sometimes can drag — it can also fly, and when you least want it to. Like when you’re having fun.</p><p>This is because we only have a finite amount of attention to give the world, Dr Irish said.</p><p>So, if we are focusing on something fun then we pay less attention to the passing of time, and it appears to move more quickly. The same applies when you’re busy.</p><p>“If we are multitasking and we are extremely busy, then we can have this time contraction affect where the day seems to go by extremely quickly and we can’t figure out where all those hours went,” Dr Irish said.</p><p>Sometimes running on “autopilot” can make time seem to speed up so much we get stressed, Dr Wittmann said.</p><p>He said mindfulness was one way to cope with this.</p><p>“Leave the room, go out of the office building, even if it is just five minutes … you then feel yourself again … and suddenly time passes very slowly again.”</p><hr><h2 id="生词记录"><a href="#生词记录" class="headerlink" title="生词记录"></a>生词记录</h2><blockquote><p><em>drag</em> 拖沓，过得很慢</p><p><em>excruciatingly</em> 极其痛苦地，难以忍受地</p><p><em>neuroscientist</em> 神经学家</p><p><em>dilate</em> 扩大，扩张，展开</p><p><em>impulsive</em> 冲动的</p><p><em>restless</em> 坐立不安的，焦躁的，不耐烦的</p><p><em>perception</em> 认识，观念，看法；知觉，感知</p><p><em>consensus</em> 共识，一致的意见</p><p><em>timescale</em> 一段时间，起止时间，时段</p><p><em>fuzzy</em> 模糊的，杂乱的，有干扰的</p><p><em>insular</em> 思想狭隘的，保守的</p><p><em>cortex</em> 皮层，皮质</p><p><em>integrate</em> 结合，使合并</p><p><em>multitask</em> 同时做多件事</p><p><em>contraction</em> 收缩，缩小，缩短</p><p><em>mindfulness</em>  正念认知</p></blockquote><h2 id="个人感悟"><a href="#个人感悟" class="headerlink" title="个人感悟"></a>个人感悟</h2><blockquote><p>等待中的时间永远觉得是最漫长的。就像面试一样，在候考室等待真是煎熬，但一旦进入考场后，又会觉得时间飞快，感觉还没开始就结束了😄</p><p>那其实对应学习应该也可以这样，尤其是学习些比较难的知识时，找个安静的环境让自己进入心流状态，这样就不会觉得时间漫长，反而还会觉得时间不够用。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 每日阅读分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 英语提升 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>日本首相演讲现场传出爆炸声</title>
      <link href="/2023/06/01/ri-ben-shou-xiang-yan-jiang-xian-chang-chuan-chu-bao-zha-sheng/"/>
      <url>/2023/06/01/ri-ben-shou-xiang-yan-jiang-xian-chang-chuan-chu-bao-zha-sheng/</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文地址：<a href="https://mp.weixin.qq.com/s/c_yUrGKcWEbT311pRJm52g">https://mp.weixin.qq.com/s/c_yUrGKcWEbT311pRJm52g</a></p></blockquote><h1 id="Japanese-Prime-Minister-Fumio-Kishida-Unhurt-Resumes-Campaigning-After-Bomb-Scare"><a href="#Japanese-Prime-Minister-Fumio-Kishida-Unhurt-Resumes-Campaigning-After-Bomb-Scare" class="headerlink" title="Japanese Prime Minister Fumio Kishida Unhurt, Resumes Campaigning After Bomb Scare"></a><strong>Japanese Prime Minister Fumio Kishida Unhurt, Resumes Campaigning After Bomb Scare</strong></h1><hr><p>Japanese Prime Minister Fumio Kishida resumed election campaigning on Saturday after a smoke bomb was allegedly thrown at an event he attended in central Japan, weeks before he hosts the Group of Seven world leaders for a summit.</p><p>A 24-year-old man has been arrested for obstruction on suspicion he threw a pipe-like object at a venue in the western prefecture of Wakayama where Kishida had been about to give a speech at around 11:30 a.m., Kyodo News said, citing sources close to the investigation. Kishida was evacuated unharmed from the site, and later resumed his schedule of speeches for the day. One police officer was slightly injured, Kyodo said.</p><p>The event has chilling echoes of the fatal shooting of former Prime Minister Shinzo Abe during a stump speech ahead of last year’s upper house elections. Five by-elections are set to be held next weekend, including in the constituency left vacant by Abe’s death.</p><p>The incident also calls into question security arrangements for the G-7 summit to be held in May in Kishida’s home town of Hiroshima, as well as related ministerial meetings all over the country.</p><p>“We are now holding elections, which are the most important thing for our country,” Kishida said in a speech broadcast by NHK following the incident. “With your help, I want to push through with this important election to the end.”</p><p>Support for the premier has been buoyed in recent weeks by his visit to Ukraine, as well as progress toward reconciliation in a long-running feud with South Korea. That’s renewed speculation that he might call a general election in the coming months if the by-elections and summit both go smoothly.</p><p>Showing fortitude in the face of the latest incident could bolster Kishida and his party in the by-elections, an analyst said.</p><p>“Continuing with his campaign speeches will be well received by voters,” said Shigenobu Tamura, a political analyst who previously worked for Kishida’s main ruling Liberal Democratic Party. “They will appreciate him continuing with his duties regardless of what might happen to him.”</p><p>The premier was touring a fishing port in support of an LDP candidate and was about to address a crowd when the incident occurred. Video shown by broadcaster TBS on its website showed a young man with a backpack being tackled and held down by a group of people, followed by the sound of an explosion and screams, while smoke spread across the area.</p><p>Chief Cabinet Secretary Hirokazu Matsuno told reporters that police were looking into the motive and background of the suspected perpetrator. He added that he had instructed them to be thorough in protecting VIPs ahead of the summit.</p><p>Security had already been a high priority for the G-7 summit set for May 19-21 following the shock of last year’s assassination. G-7 ministers are also having meetings on the northern island of Hokkaido and in the resort town of Karuizawa this weekend.</p><p>A representative of the Wakayama police department declined to comment to Bloomberg News.</p><p>Ruling and opposition politicians condemned the incident. Hiroshi Moriyama, the election chair of Japan’s ruling Liberal Democratic Party, said on NHK that it was deplorable for such a thing to happen during elections, the foundation of democracy. “It’s an unforgivable act of violence,” he said.</p><hr><h2 id="生词记录"><a href="#生词记录" class="headerlink" title="生词记录"></a>生词记录</h2><blockquote><p><em>resume</em> （中断后）继续，重新开始；恢复，重新回到，重返某个位置</p><p><em>campaign</em> 从事活动，开展运动，发起运动</p><p><em>allegedly</em> 据称，据说</p><p><em>suspicion</em> 嫌疑，怀疑</p><p><em>prefecture</em> （法意日等国的）地方行政区，省，县，辖区</p><p><em>evacuate</em> 疏散，使撤离</p><p><em>chilling</em> 令人恐惧的，令人不寒而栗的</p><p><em>echo</em> 重复，附和；回声，回响；表示十分相似的东西，仿效</p><p><em>stump speech</em> 巡回政治演讲，竞选演讲</p><p><em>by-election</em> 补选</p><p><em>constituency</em> 选区的选民</p><p><em>vacant</em> 空缺的</p><p><em>call into question</em> 引起对···的怀疑</p><p><em>primer</em> 首相，总理</p><p><em>buoy</em> 支持，使更成功；鼓励，鼓舞</p><p><em>reconciliation</em> 和解，和好</p><p><em>feud</em> 世仇，长期争斗</p><p><em>renew</em> 更新，更换，延长···期限；重新开始</p><p><em>speculation</em> 推测，猜测；投机买卖</p><p><em>fortitude</em> 勇敢，坚韧，刚毅</p><p><em>bolster</em> 加固，提高，改善</p><p><em>tackle</em> 阻截，铲球</p><p><em>hold sb&#x2F;sth down</em>  把···按住，使无法动弹</p><p><em>perpetrator</em> 犯罪者，作恶者</p><p><em>thorough</em> 彻底的，完全的；仔细的</p><p><em>assassination</em> 刺杀，暗杀</p><p><em>resort</em> 旅游胜地，度假胜地</p><p><em>condemn</em> 谴责，指责</p><p><em>deplorable</em> 极其恶劣的，非常糟糕的</p></blockquote><h2 id="个人感悟"><a href="#个人感悟" class="headerlink" title="个人感悟"></a>个人感悟</h2><blockquote><p> 🍉吃瓜，不予置评，毕竟是小日子过的不错的事</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 每日阅读分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 英语提升 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>新冠不再构成国际关注的突发公共卫生事件</title>
      <link href="/2023/06/01/xin-guan-bu-zai-gou-cheng-guo-ji-guan-zhu-de-tu-fa-gong-gong-wei-sheng-shi-jian/"/>
      <url>/2023/06/01/xin-guan-bu-zai-gou-cheng-guo-ji-guan-zhu-de-tu-fa-gong-gong-wei-sheng-shi-jian/</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文地址：<a href="https://mp.weixin.qq.com/s/-7tgjCbOGpT6rIFisHOJMQ">https://mp.weixin.qq.com/s/-7tgjCbOGpT6rIFisHOJMQ</a></p></blockquote><h1 id="Covid-19-is-no-longer-a-global-health-emergency-says-WHO"><a href="#Covid-19-is-no-longer-a-global-health-emergency-says-WHO" class="headerlink" title="Covid-19 is no longer a global health emergency, says WHO"></a><strong>Covid-19 is no longer a global health emergency, says WHO</strong></h1><hr><p>The Covid-19 pandemic, which has sickened or killed almost 800 million people over three years, no longer constitutes a global health emergency, the head of the World Health Organization has said.</p><p>The WHO first gave Covid its highest level of alert on 30 January 2020, and its panel has continued to apply the label at meetings held every three months.</p><p>While the WHO director general, Tedros Adhanom Ghebreyesus, announced on Friday the UN health agency was downgrading Covid’s alert status, he also delivered a stark warning about its persistent threat. The disease still killed someone every three minutes, he said.</p><p>“Yesterday, the emergency committee met for the 15th time and recommended to me that I declare an end to the public health emergency of international concern,” said Tedros. “I’ve accepted that advice.”</p><p>He added: “It’s therefore with great hope that I declare Covid-19 over as a global health emergency. However, that does not mean Covid-19 is over as a global health threat. Last week, Covid-19 claimed a life every three minutes – and that’s just the deaths we know about.”</p><p>The global health emergency status helped focus international attention on the Covid threat, as well as bolstering collaboration on vaccines and treatments. Lifting it is a sign of the progress the world has made in these areas, but Covid-19 is here to stay, health officials believe, even if it no longer represents an emergency.</p><p>The WHO does not declare the beginning or end of pandemics, although it did start using the term for Covid in March 2020. Tedros said the decision to downgrade the alert status did not mean the danger was over, cautioning that the emergency status could be reinstated if the situation changed.</p><p>“The worst thing any country could do now is to use this news as a reason to let down its guard, to dismantle the systems it has built, or to send the message to its people that Covid-19 is nothing to worry about,” he said.</p><p>Covid has officially claimed more than 6.9 million lives, and affected the health of more than 765 million others, according to the WHO. It said the true figures were likely to be much higher. Covid deaths globally have plunged by 95% since January, but the disease still killed 16,000 people worldwide last month alone.</p><p>Despite the lingering danger, the pandemic has faded from mind in many if not most countries. This week, Tedros said testing and tracing efforts had “declined significantly around the world, making it more difficult to track known variants and detect new ones”.</p><p>He has also warned of the ongoing impact of long Covid, which provokes a long line of often severe and debilitating symptoms that can drag on for months or years. The condition is estimated to affect one in 10 people who contract Covid, suggesting hundreds of millions of people could need longer-term care, he has said.</p><p>Long Covid was devastating lives and livelihoods and wreaking havoc on health systems and economies, Tedros told the Guardian last year as he urged countries to launch immediate and sustained efforts to tackle the “very serious” crisis.</p><p>“While the pandemic has changed dramatically due to the introduction of many lifesaving tools, and there is light at the end of the tunnel, the impact of long Covid for all countries is very serious and needs immediate and sustained action equivalent to its scale,” he said.</p><p>He added: “Early in the pandemic, it was important for overwhelmed health systems to focus all of their life saving efforts on Covid-19 patients presenting with acute infection. However, it is critical for governments to invest long-term in their health system and workers and make a plan now for dealing with long Covid.”</p><hr><h2 id="生词记录"><a href="#生词记录" class="headerlink" title="生词记录"></a>生词记录</h2><blockquote><p><em>constitute</em> 组成，构成，被视作，被算作</p><p><em>panel</em> 专家小组，讨论小组</p><p><em>director general</em> 大型机构的总裁，主席，局长</p><p><em>downgrade</em> 降级，降职，贬低，轻视</p><p><em>stark</em> 明显的，鲜明的；严酷的，赤裸裸的</p><p><em>persistent</em> 持续的，存留的，顽强存在的；坚持不懈的，执意的</p><p><em>claim</em> 获得，赢得；声称，断言，主张；夺走生命</p><p><em>bolster</em> 加固，提高，改善，加强</p><p><em>lift</em> 举起，提起，吊起；解除，撤销；偷盗，剽窃</p><p><em>caution</em> 小心，谨慎；告诫，提醒</p><p><em>reinstate</em> 使重返岗位，使恢复原职；把···放回原处；使恢复原状</p><p><em>dismantle</em> 拆除，逐步废除</p><p><em>plunge</em> 暴跌</p><p><em>lingering</em> 持续的，长时间的，拖延的，缠绵的，迟迟不去的</p><p><em>variant</em> 变体，变种，变形</p><p><em>ongoing</em> 持续存在的，不断发展的，进行中的，持续进行的</p><p><em>debilitating</em> 使虚弱的，使软弱的</p><p><em>devastate</em> 严重破坏，彻底摧毁</p><p><em>wreak havoc</em> 肆虐，造成严重破坏</p><p><em>sustained</em> 持续的，持久的，坚定的，坚持不懈的</p><p><em>overwhelmed</em> 被压倒的，被淹没的，受宠若惊的，不知所措的；彻底征服，击败</p><p><em>acute</em> 严峻的；（疾病）急性的</p></blockquote><h2 id="个人感悟"><a href="#个人感悟" class="headerlink" title="个人感悟"></a>个人感悟</h2><p>“三年了，你知道我这三年怎么过的吗！“</p><p>三年疫情改变了很多，生活中的方方面面基本都受到了不同程度的影响，还记得那时很多人的愿望就是活下来 😷，三年时间如此的快…</p><p>其实按照世卫的说法，只是警戒的等级降低了，但新冠的威胁并未解除，所以大家还是要做好防护。</p>]]></content>
      
      
      <categories>
          
          <category> 每日阅读分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 英语提升 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构与算法-线性结构篇（二）（C语言版）</title>
      <link href="/2023/06/01/shu-ju-jie-gou-yu-suan-fa-xian-xing-jie-gou-pian-er-c-yu-yan-ban/"/>
      <url>/2023/06/01/shu-ju-jie-gou-yu-suan-fa-xian-xing-jie-gou-pian-er-c-yu-yan-ban/</url>
      
        <content type="html"><![CDATA[<h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><h3 id="顺序表实现"><a href="#顺序表实现" class="headerlink" title="顺序表实现"></a>顺序表实现</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token comment">/** * 顺序表实现栈 */</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">Stack</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> <span class="token operator">*</span> arr<span class="token punctuation">;</span>    <span class="token keyword">int</span> capacity<span class="token punctuation">;</span>    <span class="token comment">// 表示栈顶位置</span>    <span class="token keyword">int</span> top<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token operator">*</span> StackArr<span class="token punctuation">;</span><span class="token comment">/** * 初始化栈 * @param stack */</span><span class="token keyword">void</span> <span class="token function">initStackArr</span><span class="token punctuation">(</span>StackArr stack<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 分配内存</span>    stack<span class="token operator">-></span>arr <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span> <span class="token punctuation">(</span>StackArr<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    stack<span class="token operator">-></span>capacity <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token comment">// 栈为空时，默认为-1</span>    stack<span class="token operator">-></span>top <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 入栈 */</span><span class="token keyword">_Bool</span> <span class="token function">push</span><span class="token punctuation">(</span>StackArr stack<span class="token punctuation">,</span> <span class="token keyword">int</span> data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 满栈，需扩容</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>stack<span class="token operator">-></span>top <span class="token operator">==</span> stack<span class="token operator">-></span>capacity <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> newCapacity <span class="token operator">=</span> stack<span class="token operator">-></span>capacity <span class="token operator">+</span> <span class="token punctuation">(</span>stack<span class="token operator">-></span>capacity<span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> <span class="token operator">*</span> newArr <span class="token operator">=</span> <span class="token function">realloc</span><span class="token punctuation">(</span>stack<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>StackArr<span class="token punctuation">)</span> <span class="token operator">*</span> newCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>        stack<span class="token operator">-></span>arr <span class="token operator">=</span> newArr<span class="token punctuation">;</span>        stack<span class="token operator">-></span>capacity <span class="token operator">=</span> newCapacity<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    stack<span class="token operator">-></span>arr<span class="token punctuation">[</span><span class="token operator">++</span>stack<span class="token operator">-></span>top<span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 出栈 */</span><span class="token keyword">int</span> <span class="token function">pop</span><span class="token punctuation">(</span>StackArr stack<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 栈为空</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>stack<span class="token operator">-></span>top <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> INT_MAX<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> stack<span class="token operator">-></span>arr<span class="token punctuation">[</span>stack<span class="token operator">-></span>top<span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">printStack</span><span class="token punctuation">(</span>StackArr stack<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>stack<span class="token operator">-></span>top <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\t"</span><span class="token punctuation">,</span> <span class="token function">pop</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">Stack</span> stack<span class="token punctuation">;</span>    <span class="token function">initStackArr</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>stack<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>stack<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>stack<span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>stack<span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printStack</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>stack<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="链表实现"><a href="#链表实现" class="headerlink" title="链表实现"></a>链表实现</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token comment">/** * 链表实现栈 */</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">StackNode</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> data<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">StackNode</span> <span class="token operator">*</span> next<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token operator">*</span> StackLinkList<span class="token punctuation">;</span><span class="token comment">/** * 初始化栈 * @param stack */</span><span class="token keyword">void</span> <span class="token function">initStackLinkList</span><span class="token punctuation">(</span>StackLinkList stackHead<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    stackHead<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 入栈（头插法） */</span><span class="token keyword">_Bool</span> <span class="token function">push</span><span class="token punctuation">(</span>StackLinkList stackHead<span class="token punctuation">,</span> <span class="token keyword">int</span> data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">StackNode</span> <span class="token operator">*</span> newNode <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span> <span class="token punctuation">(</span>StackLinkList<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    newNode<span class="token operator">-></span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>    newNode<span class="token operator">-></span>next <span class="token operator">=</span> stackHead<span class="token operator">-></span>next<span class="token punctuation">;</span>    stackHead<span class="token operator">-></span>next <span class="token operator">=</span> newNode<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 出栈 */</span><span class="token keyword">int</span> <span class="token function">pop</span><span class="token punctuation">(</span>StackLinkList stackHead<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">StackNode</span> <span class="token operator">*</span> temp <span class="token operator">=</span> stackHead<span class="token operator">-></span>next<span class="token punctuation">;</span>    stackHead<span class="token operator">-></span>next <span class="token operator">=</span> temp<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token keyword">int</span> data <span class="token operator">=</span> temp<span class="token operator">-></span>data<span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> data<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">printStack</span><span class="token punctuation">(</span>StackLinkList stackHead<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>stackHead<span class="token operator">-></span>next<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        stackHead <span class="token operator">=</span> stackHead<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\t"</span><span class="token punctuation">,</span> stackHead<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">StackNode</span> stack<span class="token punctuation">;</span>    <span class="token function">initStackLinkList</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>stack<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>stack<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>stack<span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>stack<span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">pop</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>stack<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printStack</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>stack<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h2><h3 id="顺序表实现-1"><a href="#顺序表实现-1" class="headerlink" title="顺序表实现"></a>顺序表实现</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token comment">/** * 顺序表实现循环队列 */</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">Queue</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> <span class="token operator">*</span> arr<span class="token punctuation">;</span>    <span class="token comment">// 队列的最大容量</span>    <span class="token keyword">int</span> capacity<span class="token punctuation">;</span>    <span class="token comment">// 队头，队尾</span>    <span class="token keyword">int</span> front<span class="token punctuation">,</span> rear<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token operator">*</span> QueueArr<span class="token punctuation">;</span><span class="token comment">/** * 初始化队列 */</span><span class="token keyword">void</span> <span class="token function">initQueue</span><span class="token punctuation">(</span>QueueArr queueArr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    queueArr<span class="token operator">-></span>arr <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    queueArr<span class="token operator">-></span>capacity <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token comment">// 牺牲一个存储单元</span>    queueArr<span class="token operator">-></span>front <span class="token operator">=</span> queueArr<span class="token operator">-></span>rear <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 入队 */</span><span class="token keyword">_Bool</span> <span class="token function">offerQueue</span><span class="token punctuation">(</span>QueueArr queueArr<span class="token punctuation">,</span> <span class="token keyword">int</span> data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> currentRear <span class="token operator">=</span> <span class="token punctuation">(</span>queueArr<span class="token operator">-></span>rear <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> queueArr<span class="token operator">-></span>capacity<span class="token punctuation">;</span>    <span class="token comment">// 队列满</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>currentRear <span class="token operator">==</span> queueArr<span class="token operator">-></span>front<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    queueArr<span class="token operator">-></span>arr<span class="token punctuation">[</span>currentRear<span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">;</span>    queueArr<span class="token operator">-></span>rear<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 出队 */</span><span class="token keyword">int</span> <span class="token function">pollQueue</span><span class="token punctuation">(</span>QueueArr queueArr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 队列空</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>queueArr<span class="token operator">-></span>front <span class="token operator">==</span> queueArr<span class="token operator">-></span>rear<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> INT_MAX<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    queueArr<span class="token operator">-></span>front <span class="token operator">=</span> <span class="token punctuation">(</span>queueArr<span class="token operator">-></span>front <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> queueArr<span class="token operator">-></span>capacity<span class="token punctuation">;</span>    <span class="token keyword">return</span> queueArr<span class="token operator">-></span>arr<span class="token punctuation">[</span>queueArr<span class="token operator">-></span>front<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">printQueue</span><span class="token punctuation">(</span>QueueArr queueArr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"&lt;&lt;&lt; "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> queueArr<span class="token operator">-></span>front<span class="token punctuation">;</span>   <span class="token comment">//遍历队列需要从队首开始</span>    <span class="token keyword">do</span> <span class="token punctuation">&#123;</span>        i <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> queueArr<span class="token operator">-></span>capacity<span class="token punctuation">;</span>   <span class="token comment">//先向后循环移动</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> queueArr<span class="token operator">-></span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//然后打印当前位置上的元素</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> queueArr<span class="token operator">-></span>rear<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//当到达队尾时，结束</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"&lt;&lt;&lt;\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">_Bool</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span>QueueArr queueArr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> queueArr<span class="token operator">-></span>front <span class="token operator">==</span> queueArr<span class="token operator">-></span>rear<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">Queue</span> queue<span class="token punctuation">;</span>    <span class="token function">initQueue</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>queue<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">offerQueue</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>queue<span class="token punctuation">,</span> i <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printQueue</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>queue<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>queue<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> <span class="token function">pollQueue</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>queue<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="链表实现-1"><a href="#链表实现-1" class="headerlink" title="链表实现"></a>链表实现</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token comment">/** * 链表实现循环队列 */</span> <span class="token comment">// 节点</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">Node</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> data<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">Node</span> <span class="token operator">*</span> next<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token operator">*</span> LNode<span class="token punctuation">;</span><span class="token comment">// 队列的头尾指针</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">Queue</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">Node</span> <span class="token operator">*</span> front<span class="token punctuation">,</span> <span class="token operator">*</span> rear<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token operator">*</span> LQueue<span class="token punctuation">;</span><span class="token comment">/** * 初始化队列 */</span><span class="token keyword">void</span> <span class="token function">initQueue</span><span class="token punctuation">(</span>LQueue queue<span class="token punctuation">,</span> LNode lNode<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 头节点</span>    lNode <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span> <span class="token punctuation">(</span>LNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 队头和队尾指针都指向该头节点</span>    queue<span class="token operator">-></span>front <span class="token operator">=</span> queue<span class="token operator">-></span>rear <span class="token operator">=</span> lNode<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 入队 */</span><span class="token keyword">_Bool</span> <span class="token function">offerQueue</span><span class="token punctuation">(</span>LQueue queue<span class="token punctuation">,</span> <span class="token keyword">int</span> data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    LNode newNode <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span> <span class="token punctuation">(</span>LNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>newNode <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    newNode<span class="token operator">-></span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>    newNode<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    queue<span class="token operator">-></span>rear<span class="token operator">-></span>next <span class="token operator">=</span> newNode<span class="token punctuation">;</span>    queue<span class="token operator">-></span>rear <span class="token operator">=</span> newNode<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 出队 */</span><span class="token keyword">int</span> <span class="token function">pollQueue</span><span class="token punctuation">(</span>LQueue queue<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 队列空</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>queue<span class="token operator">-></span>front <span class="token operator">==</span> queue<span class="token operator">-></span>rear<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> INT_MAX<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    LNode tempNode <span class="token operator">=</span> queue<span class="token operator">-></span>front<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token keyword">int</span> data <span class="token operator">=</span> tempNode<span class="token operator">-></span>data<span class="token punctuation">;</span>    <span class="token comment">// 队列中只有一个元素，队尾需回到头节点</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>tempNode<span class="token operator">-></span>next <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        queue<span class="token operator">-></span>rear <span class="token operator">=</span> queue<span class="token operator">-></span>front<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    queue<span class="token operator">-></span>front<span class="token operator">-></span>next <span class="token operator">=</span> tempNode<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>tempNode<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> data<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">printQueue</span><span class="token punctuation">(</span>LQueue queue<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"&lt;&lt;&lt; "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    LNode node <span class="token operator">=</span> queue<span class="token operator">-></span>front<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>node<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> node<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>node <span class="token operator">==</span> queue<span class="token operator">-></span>rear<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token comment">//当已经打印最后一个元素后，再结束</span>        <span class="token keyword">else</span> node <span class="token operator">=</span> node<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"&lt;&lt;&lt;\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">_Bool</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span>LQueue lQueue<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> lQueue<span class="token operator">-></span>front <span class="token operator">==</span> lQueue<span class="token operator">-></span>rear<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">Queue</span> queue<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">Node</span> node<span class="token punctuation">;</span>    <span class="token function">initQueue</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>queue<span class="token punctuation">,</span> <span class="token operator">&amp;</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">offerQueue</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>queue<span class="token punctuation">,</span> i <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printQueue</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>queue<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>queue<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> <span class="token function">pollQueue</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>queue<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 关于学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构与算法-树篇（C语言版）</title>
      <link href="/2023/06/01/shu-ju-jie-gou-yu-suan-fa-shu-pian-c-yu-yan-ban/"/>
      <url>/2023/06/01/shu-ju-jie-gou-yu-suan-fa-shu-pian-c-yu-yan-ban/</url>
      
        <content type="html"><![CDATA[<h1 id="树"><a href="#树" class="headerlink" title="树"></a>树</h1><h2 id="二叉树遍历"><a href="#二叉树遍历" class="headerlink" title="二叉树遍历"></a>二叉树遍历</h2><ol><li>构建</li></ol><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">TreeNode</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> data<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">TreeNode</span> <span class="token operator">*</span> left<span class="token punctuation">,</span> <span class="token operator">*</span> right<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token operator">*</span> Tree<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">TreeNode</span> <span class="token operator">*</span> A <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span> <span class="token punctuation">(</span>Tree<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">TreeNode</span> <span class="token operator">*</span> B <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span> <span class="token punctuation">(</span>Tree<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">TreeNode</span> <span class="token operator">*</span> C <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span> <span class="token punctuation">(</span>Tree<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    A<span class="token operator">-></span>data <span class="token operator">=</span> <span class="token char">'A'</span><span class="token punctuation">;</span>    B<span class="token operator">-></span>data <span class="token operator">=</span> <span class="token char">'B'</span><span class="token punctuation">;</span>    C<span class="token operator">-></span>data <span class="token operator">=</span> <span class="token char">'C'</span><span class="token punctuation">;</span>    A<span class="token operator">-></span>left <span class="token operator">=</span> B<span class="token punctuation">;</span>    A<span class="token operator">-></span>right <span class="token operator">=</span> C<span class="token punctuation">;</span>    B<span class="token operator">-></span>left <span class="token operator">=</span> B<span class="token operator">-></span>right <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    C<span class="token operator">-></span>left <span class="token operator">=</span> C<span class="token operator">-></span>right <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li><strong>递归遍历</strong></li></ol><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">TreeNode</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> data<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">TreeNode</span> <span class="token operator">*</span> left<span class="token punctuation">,</span> <span class="token operator">*</span> right<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token operator">*</span> Tree<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">visit</span><span class="token punctuation">(</span>Tree root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span> root<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 前序遍历</span><span class="token keyword">void</span> <span class="token function">preOrder</span><span class="token punctuation">(</span>Tree root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">visit</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">preOrder</span><span class="token punctuation">(</span>root<span class="token operator">-></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">preOrder</span><span class="token punctuation">(</span>root<span class="token operator">-></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 中序遍历</span><span class="token keyword">void</span> <span class="token function">inOrder</span><span class="token punctuation">(</span>Tree root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">inOrder</span><span class="token punctuation">(</span>root<span class="token operator">-></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">visit</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">inOrder</span><span class="token punctuation">(</span>root<span class="token operator">-></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 后序遍历</span><span class="token keyword">void</span> <span class="token function">postOrder</span><span class="token punctuation">(</span>Tree root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">postOrder</span><span class="token punctuation">(</span>root<span class="token operator">-></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">postOrder</span><span class="token punctuation">(</span>root<span class="token operator">-></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">visit</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>非递归遍历</li></ol><p>前序中序后序均利用了栈</p><p>层序利用了队列</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token comment">/** * 二叉树节点 */</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">TreeNode</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> data<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">TreeNode</span> <span class="token operator">*</span> left<span class="token punctuation">,</span> <span class="token operator">*</span> right<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token operator">*</span> Tree<span class="token punctuation">;</span><span class="token comment">/** * 栈 */</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">StackNode</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 栈中存储的是二叉树节点</span>    Tree treeNode<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">StackNode</span> <span class="token operator">*</span> next<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token operator">*</span> Stack<span class="token punctuation">;</span><span class="token comment">/** * 栈空判断 */</span><span class="token keyword">_Bool</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span>Stack stack<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> stack<span class="token operator">-></span>next <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 栈初始化 */</span><span class="token keyword">void</span> <span class="token function">initStack</span><span class="token punctuation">(</span>Stack stack<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    stack<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 入栈 */</span><span class="token keyword">void</span> <span class="token function">pushStack</span><span class="token punctuation">(</span>Stack stack<span class="token punctuation">,</span> Tree root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">StackNode</span> <span class="token operator">*</span> newStackNode <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span> <span class="token punctuation">(</span>Stack<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    newStackNode<span class="token operator">-></span>next <span class="token operator">=</span> stack<span class="token operator">-></span>next<span class="token punctuation">;</span>    newStackNode<span class="token operator">-></span>treeNode <span class="token operator">=</span> root<span class="token punctuation">;</span>    stack<span class="token operator">-></span>next <span class="token operator">=</span> newStackNode<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 出栈 */</span>Tree <span class="token function">popStack</span><span class="token punctuation">(</span>Stack stack<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">StackNode</span> <span class="token operator">*</span> topStackNode <span class="token operator">=</span> stack<span class="token operator">-></span>next<span class="token punctuation">;</span>    stack<span class="token operator">-></span>next <span class="token operator">=</span> topStackNode<span class="token operator">-></span>next<span class="token punctuation">;</span>    Tree pNode <span class="token operator">=</span> topStackNode<span class="token operator">-></span>treeNode<span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>topStackNode<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> pNode<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">visit</span><span class="token punctuation">(</span>Tree root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span> root<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 前序遍历</span><span class="token keyword">void</span> <span class="token function">preOrder</span><span class="token punctuation">(</span>Tree root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">StackNode</span> stack<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">TreeNode</span> <span class="token operator">*</span> p <span class="token operator">=</span> root<span class="token punctuation">;</span>    <span class="token function">initStack</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>stack<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>stack<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">visit</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">pushStack</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>stack<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>            p <span class="token operator">=</span> p<span class="token operator">-></span>left<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            p <span class="token operator">=</span> <span class="token function">popStack</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>stack<span class="token punctuation">)</span><span class="token punctuation">;</span>            p <span class="token operator">=</span> p<span class="token operator">-></span>right<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 中序遍历</span><span class="token keyword">void</span> <span class="token function">inOrder</span><span class="token punctuation">(</span>Tree root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">StackNode</span> stack<span class="token punctuation">;</span>    <span class="token function">initStack</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>stack<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">TreeNode</span> <span class="token operator">*</span> p <span class="token operator">=</span> root<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>stack<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">pushStack</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>stack<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>            p <span class="token operator">=</span> p<span class="token operator">-></span>left<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            p <span class="token operator">=</span> <span class="token function">popStack</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>stack<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">visit</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>            p <span class="token operator">=</span> p<span class="token operator">-></span>right<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 仅获取栈顶元素（并不出栈）</span>Tree <span class="token function">getTopTreeNode</span><span class="token punctuation">(</span>Stack stack<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> stack<span class="token operator">-></span>next<span class="token operator">-></span>treeNode<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 后序遍历</span><span class="token keyword">void</span> <span class="token function">postOrder</span><span class="token punctuation">(</span>Tree root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">StackNode</span> stack<span class="token punctuation">;</span>    <span class="token function">initStack</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>stack<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">TreeNode</span> <span class="token operator">*</span> p <span class="token operator">=</span> root<span class="token punctuation">;</span>    <span class="token comment">// 用于标记右孩子是否已被访问</span>    <span class="token keyword">struct</span> <span class="token class-name">TreeNode</span> <span class="token operator">*</span> rightFlag <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>stack<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">pushStack</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>stack<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>            p <span class="token operator">=</span> p<span class="token operator">-></span>left<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 仅获取栈顶元素</span>            p <span class="token operator">=</span> <span class="token function">getTopTreeNode</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>stack<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 有右孩子且未被访问过</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">-></span>right <span class="token operator">&amp;&amp;</span> p<span class="token operator">-></span>right <span class="token operator">!=</span> rightFlag<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                p <span class="token operator">=</span> p<span class="token operator">-></span>right<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                p <span class="token operator">=</span> <span class="token function">popStack</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>stack<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">visit</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 标记访问过的节点并重置p指针</span>                rightFlag <span class="token operator">=</span> p<span class="token punctuation">;</span>                p <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/** * 队列 */</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">QueueNode</span> <span class="token punctuation">&#123;</span>    Tree treeNode<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">QueueNode</span> <span class="token operator">*</span> next<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token operator">*</span> QueueNode<span class="token punctuation">;</span><span class="token comment">// 队列的头尾指针</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">Queue</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">QueueNode</span> <span class="token operator">*</span> front<span class="token punctuation">,</span> <span class="token operator">*</span> rear<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token operator">*</span> Queue<span class="token punctuation">;</span><span class="token comment">/** * 初始化队列 */</span><span class="token keyword">void</span> <span class="token function">initQueue</span><span class="token punctuation">(</span>Queue queue<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    QueueNode qNode <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span> <span class="token punctuation">(</span>QueueNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    queue<span class="token operator">-></span>front <span class="token operator">=</span> queue<span class="token operator">-></span>rear <span class="token operator">=</span> qNode<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 入队 */</span><span class="token keyword">void</span> <span class="token function">enQueue</span><span class="token punctuation">(</span>Queue queue<span class="token punctuation">,</span> Tree root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    QueueNode newQNode <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span> <span class="token punctuation">(</span>QueueNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    newQNode<span class="token operator">-></span>next <span class="token operator">=</span> queue<span class="token operator">-></span>rear<span class="token operator">-></span>next<span class="token punctuation">;</span>    newQNode<span class="token operator">-></span>treeNode <span class="token operator">=</span> root<span class="token punctuation">;</span>    queue<span class="token operator">-></span>rear<span class="token operator">-></span>next <span class="token operator">=</span> newQNode<span class="token punctuation">;</span>    queue<span class="token operator">-></span>rear <span class="token operator">=</span> newQNode<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 出队 */</span>Tree <span class="token function">deQueue</span><span class="token punctuation">(</span>Queue queue<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">QueueNode</span> <span class="token operator">*</span> tempNode <span class="token operator">=</span> queue<span class="token operator">-></span>front<span class="token operator">-></span>next<span class="token punctuation">;</span>    Tree pNode <span class="token operator">=</span> tempNode<span class="token operator">-></span>treeNode<span class="token punctuation">;</span>    queue<span class="token operator">-></span>front<span class="token operator">-></span>next <span class="token operator">=</span> tempNode<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token comment">// 队列只剩一个元素的情况</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>tempNode <span class="token operator">==</span> queue<span class="token operator">-></span>rear<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        queue<span class="token operator">-></span>rear <span class="token operator">=</span> queue<span class="token operator">-></span>front<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">free</span><span class="token punctuation">(</span>tempNode<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> pNode<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 队列判空操作 */</span><span class="token keyword">_Bool</span> <span class="token function">isEmptyQueue</span><span class="token punctuation">(</span>Queue queue<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> queue<span class="token operator">-></span>front <span class="token operator">==</span> queue<span class="token operator">-></span>rear<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 层次遍历 */</span><span class="token keyword">void</span> <span class="token function">levelOrder</span><span class="token punctuation">(</span>Tree root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">Queue</span> queue<span class="token punctuation">;</span>    <span class="token function">initQueue</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>queue<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">enQueue</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>queue<span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isEmptyQueue</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>queue<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        root <span class="token operator">=</span> <span class="token function">deQueue</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>queue<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">visit</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 看当前节点是否有左右孩子，有就全部入队</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">-></span>left<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">enQueue</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>queue<span class="token punctuation">,</span> root<span class="token operator">-></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">-></span>right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">enQueue</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>queue<span class="token punctuation">,</span> root<span class="token operator">-></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="线索二叉树"><a href="#线索二叉树" class="headerlink" title="线索二叉树"></a>线索二叉树</h2><p>线索化的过程就是在遍历的过程中<strong>修改空指针的过程</strong></p><ol><li>前序线索化</li></ol><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> data<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">TreeNode</span> <span class="token operator">*</span> left<span class="token punctuation">,</span> <span class="token operator">*</span> right<span class="token punctuation">;</span>    <span class="token comment">// 0表示孩子，1表示线索</span>    <span class="token keyword">int</span> leftTag<span class="token punctuation">,</span> rightTag<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token operator">*</span> ClueTree<span class="token punctuation">;</span><span class="token comment">// 始终指向刚刚访问过的结点</span>ClueTree pre <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token comment">// 前序线索化</span><span class="token keyword">void</span> <span class="token function">preOrder</span><span class="token punctuation">(</span>ClueTree root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">-></span>left <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            root<span class="token operator">-></span>left <span class="token operator">=</span> pre<span class="token punctuation">;</span>            root<span class="token operator">-></span>leftTag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>pre <span class="token operator">&amp;&amp;</span> pre<span class="token operator">-></span>right <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            pre<span class="token operator">-></span>right <span class="token operator">=</span> root<span class="token punctuation">;</span>            pre<span class="token operator">-></span>rightTag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        pre <span class="token operator">=</span> root<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">-></span>leftTag <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">preOrder</span><span class="token punctuation">(</span>root<span class="token operator">-></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">-></span>rightTag <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">preOrder</span><span class="token punctuation">(</span>root<span class="token operator">-></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>前序线索化后遍历：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">preTraverse</span><span class="token punctuation">(</span>ClueTree root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span> root<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 左边是孩子，先走左边</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">-></span>leftTag <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            root <span class="token operator">=</span> root<span class="token operator">-></span>left<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token comment">// 左边不是孩子，无论右边是线索还是孩子都要走了</span>            root <span class="token operator">=</span> root<span class="token operator">-></span>right<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>中序线索化</li></ol><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// 中序线索化</span><span class="token keyword">void</span> <span class="token function">inOrder</span><span class="token punctuation">(</span>ClueTree root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 递归左孩子</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>leftTag <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">inOrder</span><span class="token punctuation">(</span>root<span class="token operator">-></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>                <span class="token comment">// 没有左孩子时</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">-></span>left <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 前驱线索</span>            root<span class="token operator">-></span>left <span class="token operator">=</span> pre<span class="token punctuation">;</span>            root<span class="token operator">-></span>leftTag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 没有右孩子时</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>pre <span class="token operator">&amp;&amp;</span> pre<span class="token operator">-></span>right <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 后继线索</span>            pre<span class="token operator">-></span>right <span class="token operator">=</span> root<span class="token punctuation">;</span>            pre<span class="token operator">-></span>rightTag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 记录刚访问的结点</span>        pre <span class="token operator">=</span> root<span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>rightTag <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>             <span class="token comment">// 递归右孩子</span>        <span class="token function">inOrder</span><span class="token punctuation">(</span>root<span class="token operator">-></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>中序线索化后遍历：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// 中序线索后遍历</span><span class="token keyword">void</span> <span class="token function">inTraverse</span><span class="token punctuation">(</span>ClueTree root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 中序遍历需先去到最左边，若是非线索则持续往左边走</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>root <span class="token operator">&amp;&amp;</span> root<span class="token operator">-></span>leftTag <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            root <span class="token operator">=</span> root<span class="token operator">-></span>left<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 去到最左边，打印中序遍历第一个结点</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span> root<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 有后继线索，沿着线索往后即可</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>root <span class="token operator">&amp;&amp;</span> root<span class="token operator">-></span>rightTag <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            root <span class="token operator">=</span> root<span class="token operator">-></span>right<span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span> root<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 否则继续正常处理右孩子</span>        root <span class="token operator">=</span> root<span class="token operator">-></span>right<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>后序线索化</li></ol><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">postOrder</span><span class="token punctuation">(</span>ClueTree root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>leftTag <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">postOrder</span><span class="token punctuation">(</span>root<span class="token operator">-></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>rightTag <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">postOrder</span><span class="token punctuation">(</span>root<span class="token operator">-></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>                <span class="token comment">// 线索化</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">-></span>left <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            root<span class="token operator">-></span>left <span class="token operator">=</span> pre<span class="token punctuation">;</span>            root<span class="token operator">-></span>leftTag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>pre <span class="token operator">&amp;&amp;</span> pre<span class="token operator">-></span>right <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            pre<span class="token operator">-></span>right <span class="token operator">=</span> root<span class="token punctuation">;</span>            pre<span class="token operator">-></span>rightTag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        pre <span class="token operator">=</span> root<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>后序线索化后遍历：</p><ul><li>首先需要修改结点结构，添加一个指向双亲结点的指针域</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> data<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">TreeNode</span> <span class="token operator">*</span> left<span class="token punctuation">,</span> <span class="token operator">*</span> right， <span class="token operator">*</span> parent<span class="token punctuation">;</span>    <span class="token comment">// 0表示孩子，1表示线索</span>    <span class="token keyword">int</span> leftTag<span class="token punctuation">,</span> rightTag<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token operator">*</span> ClueTree<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>线索化操作同时建立父子关系</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">postOrder</span><span class="token punctuation">(</span>ClueTree root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>leftTag <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">postOrder</span><span class="token punctuation">(</span>root<span class="token operator">-></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 建立父子关系</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">-></span>left<span class="token punctuation">)</span>                root<span class="token operator">-></span>left<span class="token operator">-></span>parent <span class="token operator">=</span> root<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>rightTag <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">postOrder</span><span class="token punctuation">(</span>root<span class="token operator">-></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 建立父子关系</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">-></span>right<span class="token punctuation">)</span>                root<span class="token operator">-></span>right<span class="token operator">-></span>parent <span class="token operator">=</span> root<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>                <span class="token comment">// 线索化</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">-></span>left <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            root<span class="token operator">-></span>left <span class="token operator">=</span> pre<span class="token punctuation">;</span>            root<span class="token operator">-></span>leftTag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>pre <span class="token operator">&amp;&amp;</span> pre<span class="token operator">-></span>right <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            pre<span class="token operator">-></span>right <span class="token operator">=</span> root<span class="token punctuation">;</span>            pre<span class="token operator">-></span>rightTag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        pre <span class="token operator">=</span> root<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>后序线索后遍历</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">postTraverse</span><span class="token punctuation">(</span>ClueTree root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 记录上一个访问节点和当前节点</span>    ClueTree lastNode <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    ClueTree currentNode <span class="token operator">=</span> root<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>currentNode<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 一直往最左边走</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>currentNode<span class="token operator">-></span>left <span class="token operator">!=</span> lastNode <span class="token operator">&amp;&amp;</span> currentNode<span class="token operator">-></span>leftTag <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            currentNode <span class="token operator">=</span>  currentNode<span class="token operator">-></span>left<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 往右若有线索则跟随线索一直走</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>currentNode <span class="token operator">&amp;&amp;</span> currentNode<span class="token operator">-></span>rightTag  <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span>  currentNode<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>            lastNode <span class="token operator">=</span> currentNode<span class="token punctuation">;</span>            currentNode <span class="token operator">=</span> currentNode<span class="token operator">-></span>right<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 上面情况（左右节点情况已结束），此时需要处理的是兄弟节点</span>        <span class="token comment">// 特殊情况处理：若此时的节点就是根节点且其右孩子也已经被访问过，说明此时就是最后一个节点了</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>currentNode <span class="token operator">==</span> root <span class="token operator">&amp;&amp;</span> currentNode<span class="token operator">-></span>right <span class="token operator">==</span> lastNode<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span> currentNode<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 若不是特殊情况，则表示需要通过父节点寻找兄弟节点了（如图中去到了B结点，需要寻找兄弟结点C）</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>currentNode <span class="token operator">&amp;&amp;</span> currentNode<span class="token operator">-></span>right <span class="token operator">==</span> lastNode<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span> currentNode<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>            lastNode <span class="token operator">=</span> currentNode<span class="token punctuation">;</span>            currentNode <span class="token operator">=</span>  currentNode<span class="token operator">-></span>parent<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 若右边不是线索，则直接往右找孩子，若是线索则等下一轮循环解决</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>currentNode <span class="token operator">&amp;&amp;</span> currentNode<span class="token operator">-></span>rightTag <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            currentNode <span class="token operator">=</span> currentNode<span class="token operator">-></span>right<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s3.bmp.ovh/imgs/2023/05/24/0829e3f93d12e1af.png" alt="后序示例"></p><h2 id="二叉查找树"><a href="#二叉查找树" class="headerlink" title="二叉查找树"></a>二叉查找树</h2><p>又可以叫二叉排序树</p><ul><li>所有左孩子均比根节点小</li><li>所有右孩子均比根节点大</li></ul><ol><li>创建</li></ol><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;malloc.h></span></span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> data<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">TreeNode</span> <span class="token operator">*</span> left<span class="token punctuation">,</span> <span class="token operator">*</span> right<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token operator">*</span> Node<span class="token punctuation">;</span>Node <span class="token function">createNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    Node root <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    root<span class="token operator">-></span>left <span class="token operator">=</span> root<span class="token operator">-></span>right <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    root<span class="token operator">-></span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>    <span class="token keyword">return</span> root<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 一边比较一边插入</span>Node <span class="token function">insert</span><span class="token punctuation">(</span>Node root<span class="token punctuation">,</span> <span class="token keyword">int</span> data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 插入的元素比根节点小，往左走</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">-></span>data <span class="token operator">></span> data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            root<span class="token operator">-></span>left <span class="token operator">=</span> <span class="token function">insert</span><span class="token punctuation">(</span>root<span class="token operator">-></span>left<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 插入元素比根节点大，往右走</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">-></span>data <span class="token operator">&lt;</span> data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            root<span class="token operator">-></span>right <span class="token operator">=</span> <span class="token function">insert</span><span class="token punctuation">(</span>root<span class="token operator">-></span>right<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 遇到空节点，代表可以插入了，创建新节点占位</span>        root <span class="token operator">=</span> <span class="token function">createNode</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> root<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">inOrder</span><span class="token punctuation">(</span>Node root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">inOrder</span><span class="token punctuation">(</span>root<span class="token operator">-></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\t"</span><span class="token punctuation">,</span> root<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">inOrder</span><span class="token punctuation">(</span>root<span class="token operator">-></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    Node root <span class="token operator">=</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//插入后，得到根结点</span>    <span class="token function">insert</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token function">insert</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token function">inOrder</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//用中序遍历查看一下结果</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>查找</li></ol><pre class="line-numbers language-c" data-language="c"><code class="language-c">Node <span class="token function">find</span><span class="token punctuation">(</span>Node root<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 目标值大的往右找</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">-></span>data <span class="token operator">&lt;</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            root <span class="token operator">=</span> root<span class="token operator">-></span>right<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>         <span class="token comment">// 小的往左找</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">-></span>data <span class="token operator">></span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            root <span class="token operator">=</span> root<span class="token operator">-></span>left<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>         <span class="token comment">// 找到了</span>        <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> root<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 遍历完都未找到</span>    <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>查找最大值</li></ol><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">findMax</span><span class="token punctuation">(</span>Node root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>root <span class="token operator">&amp;&amp;</span> root<span class="token operator">-></span>right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        root <span class="token operator">=</span> root<span class="token operator">-></span>right<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> root<span class="token operator">-></span>data<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>删除</li></ol><ul><li>删除的是叶子结点</li><li>删除的结点还带有一个孩子</li><li>删除的结点带有两个孩子<ul><li>让左子树中最大值结点上位</li><li>让右子树中最小值结点上位</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 关于学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构与算法-图篇（C语言版）</title>
      <link href="/2023/06/01/shu-ju-jie-gou-yu-suan-fa-tu-pian-c-yu-yan-ban/"/>
      <url>/2023/06/01/shu-ju-jie-gou-yu-suan-fa-tu-pian-c-yu-yan-ban/</url>
      
        <content type="html"><![CDATA[<h1 id="图"><a href="#图" class="headerlink" title="图"></a>图</h1><h2 id="邻接矩阵"><a href="#邻接矩阵" class="headerlink" title="邻接矩阵"></a>邻接矩阵</h2><p>一个一维数组存放顶点，一个二维数组存放边，以无向图为例</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;malloc.h></span></span><span class="token keyword">typedef</span> <span class="token keyword">char</span> VertexType<span class="token punctuation">;</span> <span class="token comment">// 顶点类型用户可自定义</span><span class="token keyword">typedef</span> <span class="token keyword">int</span> EdgeType<span class="token punctuation">;</span> <span class="token comment">// 边上的权值类型用户可自定义</span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">define</span> <span class="token macro-name">MAXVEX</span> <span class="token expression"><span class="token number">100</span> </span><span class="token comment">// 最大顶点数，可自定义</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">define</span> <span class="token macro-name">INFINITY</span> <span class="token expression"><span class="token number">65535</span> </span><span class="token comment">// 用65535表示无穷</span></span><span class="token comment">// 图的邻接矩阵结构</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>    VertexType vex<span class="token punctuation">[</span>MAXVEX<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 一维数组存放顶点集</span>    EdgeType arc<span class="token punctuation">[</span>MAXVEX<span class="token punctuation">]</span><span class="token punctuation">[</span>MAXVEX<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 二维数组存放边，邻接矩阵</span>    <span class="token keyword">int</span> numNodes<span class="token punctuation">,</span> numEdges<span class="token punctuation">;</span> <span class="token comment">// 图中当前顶点数和边数</span><span class="token punctuation">&#125;</span>MGraph<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">createMGraph</span><span class="token punctuation">(</span>MGraph <span class="token operator">*</span>G<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> k<span class="token punctuation">,</span> w<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"输入顶点数和边数：\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d,%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>G<span class="token operator">-></span>numNodes<span class="token punctuation">,</span> <span class="token operator">&amp;</span>G<span class="token operator">-></span>numEdges<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 初始化顶点，建立顶点表</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> G<span class="token operator">-></span>numNodes<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>G<span class="token operator">-></span>vex<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 邻接矩阵初始化</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> G<span class="token operator">-></span>numNodes<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> G<span class="token operator">-></span>numNodes<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 默认所有均为无穷值</span>            G<span class="token operator">-></span>arc<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> INFINITY<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 读取边数，建立边表</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> G<span class="token operator">-></span>numEdges<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"输入边（vi, vj）上的下标i，下标j，和权w\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d,%d,%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>i<span class="token punctuation">,</span> <span class="token operator">&amp;</span>j<span class="token punctuation">,</span> <span class="token operator">&amp;</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 无向图对称</span>        G<span class="token operator">-></span>arc<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> w<span class="token punctuation">;</span>        G<span class="token operator">-></span>arc<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> w<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="邻接表"><a href="#邻接表" class="headerlink" title="邻接表"></a>邻接表</h2><p>一个一维数组存储顶点，再利用一个单链表存储对应的邻接点，同样以无向图为例</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">char</span> VertexType<span class="token punctuation">;</span> <span class="token comment">// 顶点类型用户可自定义</span><span class="token keyword">typedef</span> <span class="token keyword">int</span> EdgeType<span class="token punctuation">;</span> <span class="token comment">// 边上的权值类型用户可自定义</span><span class="token comment">// 边表结点</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">EdgeNode</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 邻接点域，存储该顶点对应的下标</span>    <span class="token keyword">int</span> adjvex<span class="token punctuation">;</span>    <span class="token comment">// 用于存储权值，对于非网图可不需要</span>    EdgeType info<span class="token punctuation">;</span>    <span class="token comment">// 链域，指向下一个邻接点</span>    <span class="token keyword">struct</span> <span class="token class-name">EdgeNode</span> <span class="token operator">*</span>next<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>EdgeNode<span class="token punctuation">;</span><span class="token comment">// 顶点表结点</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">VertexNode</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 顶点域，存储顶点信息</span>    VertexType data<span class="token punctuation">;</span>    <span class="token comment">// 边表头指针</span>    EdgeNode <span class="token operator">*</span>firstEdge<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>VertexNode<span class="token punctuation">,</span> AdjList<span class="token punctuation">[</span>MAXVEX<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 图的邻接表结构</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>    AdjList adjList<span class="token punctuation">;</span>    <span class="token comment">// 当前顶点数和边数</span>    <span class="token keyword">int</span> numNodes<span class="token punctuation">,</span> numEdges<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>GraphAdjList<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">createGraphAdjList</span><span class="token punctuation">(</span>GraphAdjList <span class="token operator">*</span>G<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>k<span class="token punctuation">;</span>    EdgeNode <span class="token operator">*</span>e<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"输入顶点数和边数：\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d,%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>G<span class="token operator">-></span>numNodes<span class="token punctuation">,</span> <span class="token operator">&amp;</span>G<span class="token operator">-></span>numEdges<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 读取顶点信息，建立顶点表</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> G<span class="token operator">-></span>numNodes<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 顶点信息输入</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>G<span class="token operator">-></span>adjList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 边表初始化置为空</span>        G<span class="token operator">-></span>adjList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>firstEdge <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 建立边表</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> G<span class="token operator">-></span>numEdges<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"输入边（vi,vj）上的顶点序号：\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d,%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>i<span class="token punctuation">,</span><span class="token operator">&amp;</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 申请内存空间，生成边结点</span>        e <span class="token operator">=</span> <span class="token punctuation">(</span>EdgeNode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span> <span class="token punctuation">(</span>EdgeNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 邻接点序号信息</span>        e<span class="token operator">-></span>adjvex <span class="token operator">=</span> j<span class="token punctuation">;</span>        <span class="token comment">// 将新建结点的指针指向当前顶点指向的结点（类似头插法）</span>        e<span class="token operator">-></span>next <span class="token operator">=</span> G<span class="token operator">-></span>adjList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>firstEdge<span class="token punctuation">;</span>        <span class="token comment">// 将当前顶点指向新建的结点</span>        G<span class="token operator">-></span>adjList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>firstEdge <span class="token operator">=</span> e<span class="token punctuation">;</span>        <span class="token comment">// 因为是无向图，所以一条边对应的是两个顶点，故操作与上述基本类似</span>        e <span class="token operator">=</span> <span class="token punctuation">(</span>EdgeNode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span> <span class="token punctuation">(</span>EdgeNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        e<span class="token operator">-></span>adjvex <span class="token operator">=</span> i<span class="token punctuation">;</span>        e<span class="token operator">-></span>next <span class="token operator">=</span> G<span class="token operator">-></span>adjList<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>firstEdge<span class="token punctuation">;</span>        G<span class="token operator">-></span>adjList<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>firstEdge <span class="token operator">=</span> e<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="图的遍历"><a href="#图的遍历" class="headerlink" title="图的遍历"></a>图的遍历</h2><p>为避免某些结点被访问多次或无人问津，故设置访问数组visited[n]，初始值为0，访问过后设置为1</p><h3 id="深度优先遍历"><a href="#深度优先遍历" class="headerlink" title="深度优先遍历"></a>深度优先遍历</h3><p>有点类似于树的前序遍历</p><ul><li><p>邻接矩阵</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;malloc.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;mqoai.h></span></span><span class="token keyword">typedef</span> <span class="token keyword">char</span> VertexType<span class="token punctuation">;</span> <span class="token comment">// 顶点类型用户可自定义</span><span class="token keyword">typedef</span> <span class="token keyword">int</span> EdgeType<span class="token punctuation">;</span> <span class="token comment">// 边上的权值类型用户可自定义</span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">define</span> <span class="token macro-name">MAXVEX</span> <span class="token expression"><span class="token number">9</span> </span><span class="token comment">// 最大顶点数，可自定义</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">define</span> <span class="token macro-name">INFINITY</span> <span class="token expression"><span class="token number">65535</span> </span><span class="token comment">// 用65535表示无穷</span></span>Boolean visited<span class="token punctuation">[</span>MAXVEX<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 访问标志的数组</span><span class="token comment">// 邻接矩阵的定义</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">Vertex</span><span class="token punctuation">&#123;</span>    VertexType vex<span class="token punctuation">[</span>MAXVEX<span class="token punctuation">]</span><span class="token punctuation">;</span>    EdgeType arc<span class="token punctuation">[</span>MAXVEX<span class="token punctuation">]</span><span class="token punctuation">[</span>MAXVEX<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> numNodes<span class="token punctuation">,</span> numEdges<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>MGragh<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">DFS</span><span class="token punctuation">(</span>MGragh G<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> j<span class="token punctuation">;</span>    visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> TRUE<span class="token punctuation">;</span> <span class="token comment">// 访问过的设置为 TRUE</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span> G<span class="token punctuation">.</span>vex<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 打印出来，表示访问到了</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> G<span class="token punctuation">.</span>numNodes<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 对未访问过的邻接点递归调用</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>G<span class="token punctuation">.</span>arc<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">DFS</span><span class="token punctuation">(</span>G<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 深度遍历</span><span class="token keyword">void</span> <span class="token function">DFSTraverse</span><span class="token punctuation">(</span>MGragh G<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token comment">// 初始化访问数组，默认均为FALSE，即未被访问过</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> G<span class="token punctuation">.</span>numNodes<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> FALSE<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 未访问过的顶点就调用DFS，若为连通图仅执行一次</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> G<span class="token punctuation">.</span>numNodes<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">DFS</span><span class="token punctuation">(</span>G<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>邻接表</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;malloc.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;mqoai.h></span></span><span class="token keyword">typedef</span> <span class="token keyword">char</span> VertexType<span class="token punctuation">;</span> <span class="token comment">// 顶点类型用户可自定义</span><span class="token keyword">typedef</span> <span class="token keyword">int</span> EdgeType<span class="token punctuation">;</span> <span class="token comment">// 边上的权值类型用户可自定义</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAXVEX</span> <span class="token expression"><span class="token number">9</span></span></span>Boolean visited<span class="token punctuation">[</span>MAXVEX<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">EdgeNode</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> adjVex<span class="token punctuation">;</span>    EdgeType info<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">EdgeNode</span> <span class="token operator">*</span>next<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>EdgeNode<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">VertexNode</span><span class="token punctuation">&#123;</span>    VertexType data<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">EdgeNode</span> <span class="token operator">*</span>firstEdge<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>VertexNode<span class="token punctuation">,</span> AdjList<span class="token punctuation">[</span>MAXVEX<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>    AdjList adjList<span class="token punctuation">;</span>    <span class="token keyword">int</span> numNodes<span class="token punctuation">,</span> numEdges<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>GraphAdjList<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">DFS</span><span class="token punctuation">(</span>GraphAdjList GL<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 用于遍历边表结点的指针</span>    EdgeNode <span class="token operator">*</span>p<span class="token punctuation">;</span>    visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> TRUE<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span> GL<span class="token punctuation">.</span>adjList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// p指向当前顶点指向的下一个结点</span>    p <span class="token operator">=</span> GL<span class="token punctuation">.</span>adjList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>firstEdge<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 对未被访问过的结点递归调用</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>visited<span class="token punctuation">[</span>p<span class="token operator">-></span>adjVex<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">DFS</span><span class="token punctuation">(</span>GL<span class="token punctuation">,</span> p<span class="token operator">-></span>adjVex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 访问过的就沿边表往后走</span>        p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">DFSTraverse</span><span class="token punctuation">(</span>GraphAdjList GL<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> GL<span class="token punctuation">.</span>numNodes<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> FALSE<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> GL<span class="token punctuation">.</span>numNodes <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">DFS</span><span class="token punctuation">(</span>GL<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="广度优先遍历"><a href="#广度优先遍历" class="headerlink" title="广度优先遍历"></a>广度优先遍历</h3><p>有点类似树的层序遍历，利用到辅助队列</p><ul><li><p>邻接矩阵</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"stdio.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;mqoai.h></span></span><span class="token keyword">typedef</span> <span class="token keyword">char</span> VertexType<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">int</span> EdgeType<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAXVEX</span> <span class="token expression"><span class="token number">9</span></span></span>Boolean visited<span class="token punctuation">[</span>MAXVEX<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">VerTex</span><span class="token punctuation">&#123;</span>    VertexType vertex<span class="token punctuation">[</span>MAXVEX<span class="token punctuation">]</span><span class="token punctuation">;</span>    EdgeType arc<span class="token punctuation">[</span>MAXVEX<span class="token punctuation">]</span><span class="token punctuation">[</span>MAXVEX<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> numVexs<span class="token punctuation">,</span> numEdges<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>MGraph<span class="token punctuation">;</span><span class="token comment">// 队列的结构（顺序表和链表的实现不一样，可查看之前线性结构部分）</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">Queue</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token operator">*</span>Queue<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">initQueue</span><span class="token punctuation">(</span>Queue <span class="token operator">*</span>Q<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">EnQueue</span><span class="token punctuation">(</span>Queue <span class="token operator">*</span>Q<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">DeQueue</span><span class="token punctuation">(</span>Queue <span class="token operator">*</span>Q<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>Boolean <span class="token function">QueueEmpty</span><span class="token punctuation">(</span>Queue <span class="token operator">*</span>Q<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">BFSTraverse</span><span class="token punctuation">(</span>MGraph G<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span>    Queue Q<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> G<span class="token punctuation">.</span>numVexs<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> FALSE<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 初始化辅助队列</span>    <span class="token function">initQueue</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Q<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> G<span class="token punctuation">.</span>numVexs<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 未被访问过的先访问后入队</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> TRUE<span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span> G<span class="token punctuation">.</span>vertex<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">EnQueue</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Q<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 队列非空则出队，然后寻找出队结点的邻接点</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">QueueEmpty</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Q<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">DeQueue</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Q<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 邻接点边存在且未被访问过，则也访问后入队（必须判断边存在，若只判断visited数组可能会判断错误）</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> G<span class="token punctuation">.</span>numVexs<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>G<span class="token punctuation">.</span>arc<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>visited<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        visited<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> TRUE<span class="token punctuation">;</span>                        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span> G<span class="token punctuation">.</span>vertex<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token function">EnQueue</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Q<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>邻接表</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// 队列的结构（顺序表和链表的实现不一样，可查看之前线性结构部分）</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">Queue</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token operator">*</span>Queue<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">initQueue</span><span class="token punctuation">(</span>Queue <span class="token operator">*</span>Q<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">EnQueue</span><span class="token punctuation">(</span>Queue <span class="token operator">*</span>Q<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">DeQueue</span><span class="token punctuation">(</span>Queue <span class="token operator">*</span>Q<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>Boolean <span class="token function">QueueEmpty</span><span class="token punctuation">(</span>Queue <span class="token operator">*</span>Q<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">BFSTraverse</span><span class="token punctuation">(</span>GraphAdjList GL<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    EdgeNode <span class="token operator">*</span>p<span class="token punctuation">;</span>    Queue Q<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i  <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> GL<span class="token punctuation">.</span>numNodes<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> FALSE<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 初始化辅助队列</span>    <span class="token function">initQueue</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Q<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> GL<span class="token punctuation">.</span>numNodes<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 访问结点</span>        visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> TRUE<span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span> GL<span class="token punctuation">.</span>adjList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 访问过后的就入队</span>        <span class="token function">EnQueue</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Q<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 当队列非空时，就出队</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">QueueEmpty</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Q<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">DeQueue</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Q<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 寻找出队节点的邻接节点</span>            p <span class="token operator">=</span> GL<span class="token punctuation">.</span>adjList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>firstEdge<span class="token punctuation">;</span>            <span class="token comment">// 当邻接点未被访问过就访问后入队</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>visited<span class="token punctuation">[</span>p<span class="token operator">-></span>adjVex<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    visited<span class="token punctuation">[</span>p<span class="token operator">-></span>adjVex<span class="token punctuation">]</span> <span class="token operator">=</span>  TRUE<span class="token punctuation">;</span>                    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span> GL<span class="token punctuation">.</span>adjList<span class="token punctuation">[</span>p<span class="token operator">-></span>adjVex<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">EnQueue</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Q<span class="token punctuation">,</span> p<span class="token operator">-></span>adjVex<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="最小生成树"><a href="#最小生成树" class="headerlink" title="最小生成树"></a>最小生成树</h2><p>构成连通网的最小代价生成树成为最小生成树</p><h3 id="普利姆（Prim）算法"><a href="#普利姆（Prim）算法" class="headerlink" title="普利姆（Prim）算法"></a>普利姆（Prim）算法</h3><p>从顶点触发，挑选两个顶点之间权值最小的边</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"stdio.h"</span></span><span class="token keyword">typedef</span> <span class="token keyword">char</span> VerTexType<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">int</span> EdgeType<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAXVEX</span> <span class="token expression"><span class="token number">9</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">INFINITY</span> <span class="token expression"><span class="token number">65535</span></span></span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">VerTex</span><span class="token punctuation">&#123;</span>    VerTexType vex<span class="token punctuation">[</span>MAXVEX<span class="token punctuation">]</span><span class="token punctuation">;</span>    EdgeType arc<span class="token punctuation">[</span>MAXVEX<span class="token punctuation">]</span><span class="token punctuation">[</span>MAXVEX<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> numNodes<span class="token punctuation">,</span> numEdges<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>MGraph<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">MiniSpanTree_Prim</span><span class="token punctuation">(</span>MGraph G<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> min<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> k<span class="token punctuation">;</span>    <span class="token comment">// 保存相关顶点间边的权值点下标</span>    <span class="token keyword">int</span> adjvex<span class="token punctuation">[</span>MAXVEX<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// 保存相关顶点边的权值</span>    <span class="token keyword">int</span> lowcost<span class="token punctuation">[</span>MAXVEX<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// 此处初始化权值为0，即从v0开始</span>    lowcost<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">// v0顶点下标为0</span>    adjvex<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">//循环除下标0之外的所有顶点，即v1,v2...</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> G<span class="token punctuation">.</span>numNodes<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 所有与v0相关的边的权值存入数组</span>        lowcost<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> G<span class="token punctuation">.</span>arc<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">// 初始化为全都是v0的下标</span>        adjvex<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 最小生成树操作</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> G<span class="token punctuation">.</span>numNodes<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 初始化最小权值为65535</span>        min <span class="token operator">=</span> INFINITY<span class="token punctuation">;</span>        <span class="token comment">// 顶点下标循环变量</span>        j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment">// 存储最小权值的顶点下标</span>        k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment">// 循环全部顶点</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> G<span class="token punctuation">.</span>numNodes<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 权值不为0且权值小于min，则当前的就是最小权值，赋给min（类似寻找最小值操作）</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>lowcost<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> lowcost<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> min<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                min <span class="token operator">=</span> lowcost<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token comment">// 存储最小权值的顶点下标</span>                k <span class="token operator">=</span> j<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            j<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 打印当前顶点边中权值最小的边</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"(%d,%d)\n"</span><span class="token punctuation">,</span> adjvex<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 将当前顶点的权值更改为0，表示此顶点已加入最小生成树，该顶点的任务完成</span>        lowcost<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment">// 循环所有顶点</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> G<span class="token punctuation">.</span>numNodes<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 若下标为k的顶点各边权值小于此前这些未被加入生成树的顶点的权值</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>lowcost<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> G<span class="token punctuation">.</span>arc<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> lowcost<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 将较小的权值存入lowcost对应的下标位置</span>                lowcost<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> G<span class="token punctuation">.</span>arc<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token comment">// 将下标为k的顶点存入adjvex</span>                adjvex<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> k<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="克鲁斯卡尔（Kruskal）算法"><a href="#克鲁斯卡尔（Kruskal）算法" class="headerlink" title="克鲁斯卡尔（Kruskal）算法"></a>克鲁斯卡尔（Kruskal）算法</h3><p>从边出发，从上帝视觉挑选边权值最小的组成最小生成树，注意不要成环</p><p><img src="https://s3.bmp.ovh/imgs/2023/05/29/199825b1405a1edb.png" alt="Edge边集数组示例"></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"stdio.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAXVEX</span> <span class="token expression"><span class="token number">9</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAXEDGE</span> <span class="token expression"><span class="token number">15</span></span></span><span class="token keyword">typedef</span> <span class="token keyword">char</span> VerTexType<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">int</span> EdgeType<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">VerTex</span><span class="token punctuation">&#123;</span>    VerTexType vex<span class="token punctuation">[</span>MAXVEX<span class="token punctuation">]</span><span class="token punctuation">;</span>    EdgeType arc<span class="token punctuation">[</span>MAXVEX<span class="token punctuation">]</span><span class="token punctuation">[</span>MAXVEX<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> numNodes<span class="token punctuation">,</span> numEdges<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>MGraph<span class="token punctuation">;</span><span class="token comment">// 对边集数组Edge结构的定义</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> begin<span class="token punctuation">;</span>    <span class="token keyword">int</span> end<span class="token punctuation">;</span>    <span class="token keyword">int</span> weight<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>Edge<span class="token punctuation">;</span><span class="token comment">// 查找连线顶点的尾部下标</span><span class="token keyword">int</span> <span class="token function">Find</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>parent<span class="token punctuation">,</span> <span class="token keyword">int</span> f<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>parent<span class="token punctuation">[</span>f<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        f <span class="token operator">=</span> parent<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> f<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">MiniSpanTree_Kruskal</span><span class="token punctuation">(</span>MGraph G<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span>n<span class="token punctuation">,</span>m<span class="token punctuation">;</span>    <span class="token comment">// 定义边集数组，edge的结构为begin，end和weight</span>    Edge edges<span class="token punctuation">[</span>MAXEDGE<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// 用于判断边与边是否形成了环路（此处太妙了）</span>    <span class="token keyword">int</span> parent<span class="token punctuation">[</span>MAXVEX<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// 此处省略将邻接矩阵G转化为边集数组Edges并按权由小到大排序的代码（形成的边表如上图）</span>    <span class="token comment">// 初始化数组值为0</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> G<span class="token punctuation">.</span>numNodes<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        parent<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 循环每一条边</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> G<span class="token punctuation">.</span>numEdges<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        n <span class="token operator">=</span> <span class="token function">Find</span><span class="token punctuation">(</span>parent<span class="token punctuation">,</span> edges<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>begin<span class="token punctuation">)</span><span class="token punctuation">;</span>        m <span class="token operator">=</span> <span class="token function">Find</span><span class="token punctuation">(</span>parent<span class="token punctuation">,</span> edges<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>end<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 若n!=m说明此此边没有与现有的生成树形成环路</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">!=</span> m<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 将此边的结尾顶点放入以起点为下标的parent中，表示此顶点已经在生成树的集合中</span>            parent<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> m<span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"(%d,%d) %d\n"</span><span class="token punctuation">,</span> edges<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>begin<span class="token punctuation">,</span> edges<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>end<span class="token punctuation">,</span> edges<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>weight<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="最短路径"><a href="#最短路径" class="headerlink" title="最短路径"></a>最短路径</h2><h3 id="迪杰斯塔拉（Dijkstra）算法"><a href="#迪杰斯塔拉（Dijkstra）算法" class="headerlink" title="迪杰斯塔拉（Dijkstra）算法"></a>迪杰斯塔拉（Dijkstra）算法</h3><p>一步步求出顶点之间的最短路径，每一步都是基于前面已求出的最短路径基础上进行的，最终求得最远顶点的最短路径（以下算法只能实现无孤立点的图）</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"stdio.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAXVEX</span> <span class="token expression"><span class="token number">20</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAXEDGE</span> <span class="token expression"><span class="token number">20</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">INFINITY</span> <span class="token expression"><span class="token number">65535</span></span></span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> vexs<span class="token punctuation">[</span>MAXVEX<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> arc<span class="token punctuation">[</span>MAXVEX<span class="token punctuation">]</span><span class="token punctuation">[</span>MAXVEX<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> numNodes<span class="token punctuation">,</span> numEdges<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>MGraph<span class="token punctuation">;</span><span class="token comment">// 用于存储最短路径下标的数组</span><span class="token keyword">typedef</span> <span class="token keyword">int</span> Patharc<span class="token punctuation">[</span>MAXVEX<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 用于存储到各点最短路径的权值和</span><span class="token keyword">typedef</span> <span class="token keyword">int</span> ShortPathTable<span class="token punctuation">[</span>MAXVEX<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// P[v]的值为前驱顶点v的下标，D[v]表示v0到v的最短路径权值和</span><span class="token keyword">void</span> <span class="token function">ShortestPath_Dijkstra</span><span class="token punctuation">(</span>MGraph G<span class="token punctuation">,</span> <span class="token keyword">int</span> v0<span class="token punctuation">,</span> Patharc <span class="token operator">*</span>P<span class="token punctuation">,</span> ShortPathTable <span class="token operator">*</span>D<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> v<span class="token punctuation">,</span>w<span class="token punctuation">,</span>k<span class="token punctuation">,</span>min<span class="token punctuation">;</span>    <span class="token comment">// final数组的作用类似最小生成树中的lowcost，当值为0时表示顶点还没加入最短路径，当值为1时表明顶点已经加入最短路径</span>    <span class="token keyword">int</span> final<span class="token punctuation">[</span>MAXVEX<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// 初始化数据</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>v<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>v<span class="token operator">&lt;</span>G<span class="token punctuation">.</span>numNodes<span class="token punctuation">;</span>v<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 默认都未加入最短路径</span>        final<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment">// 从顶点v0开始，将与v0有连线的顶点权值存入数组</span>        <span class="token punctuation">(</span><span class="token operator">*</span>D<span class="token punctuation">)</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> G<span class="token punctuation">.</span>arc<span class="token punctuation">[</span>v0<span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">// 默认全为-1，即目前还没有路径</span>        <span class="token punctuation">(</span><span class="token operator">*</span>P<span class="token punctuation">)</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 从v0开始，故v0到v0自身权值为0</span>    <span class="token punctuation">(</span><span class="token operator">*</span>D<span class="token punctuation">)</span><span class="token punctuation">[</span>v0<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">// v0默认加入最短路径</span>    final<span class="token punctuation">[</span>v0<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment">// 开始求最短路径，每次求得v0到某个顶点v的最短路径</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>v <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> v <span class="token operator">&lt;</span> G<span class="token punctuation">.</span>numNodes<span class="token punctuation">;</span> v<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        min <span class="token operator">=</span> INFINITY<span class="token punctuation">;</span>        <span class="token comment">// 寻找离v0顶点最近的顶点</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>w <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> w <span class="token operator">&lt;</span> G<span class="token punctuation">.</span>numNodes<span class="token punctuation">;</span> w<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 未加入最短路径且其离v0最近（即权值最小），就交换并记录</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>final<span class="token punctuation">[</span>w<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token operator">*</span>D<span class="token punctuation">)</span><span class="token punctuation">[</span>w<span class="token punctuation">]</span> <span class="token operator">&lt;</span> min<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                k <span class="token operator">=</span> w<span class="token punctuation">;</span>                min <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>D<span class="token punctuation">)</span><span class="token punctuation">[</span>w<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 找到后加入最短路径</span>        final<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment">// 从找到的顶点再次出发，继续寻找权值和最小的顶点</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>w <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> w <span class="token operator">&lt;</span> G<span class="token punctuation">.</span>numNodes<span class="token punctuation">;</span> w<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 未加入最短路径且从上面已加入最短路径的顶点再出发，找权值和最小的顶点</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>final<span class="token punctuation">[</span>w<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> min <span class="token operator">+</span> G<span class="token punctuation">.</span>arc<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>w<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token operator">*</span>D<span class="token punctuation">)</span><span class="token punctuation">[</span>w<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 若有更小的，更新数组里的权值</span>                <span class="token punctuation">(</span><span class="token operator">*</span>D<span class="token punctuation">)</span><span class="token punctuation">[</span>w<span class="token punctuation">]</span> <span class="token operator">=</span> min <span class="token operator">+</span> G<span class="token punctuation">.</span>arc<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>w<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token comment">// 记录顶点vw的前驱顶点的下标k</span>                <span class="token punctuation">(</span><span class="token operator">*</span>P<span class="token punctuation">)</span><span class="token punctuation">[</span>w<span class="token punctuation">]</span> <span class="token operator">=</span> k<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="弗洛伊德（Floyd）算法"><a href="#弗洛伊德（Floyd）算法" class="headerlink" title="弗洛伊德（Floyd）算法"></a>弗洛伊德（Floyd）算法</h3><p>所有顶点到所有顶点的最短路径</p><p><img src="https://s3.bmp.ovh/imgs/2023/05/30/e475a4ebaee89ba7.png" alt="D数组和P数组示例"></p><p><img src="https://s3.bmp.ovh/imgs/2023/05/30/b1c12f5947bdd770.png" alt="以v1为中转结点示例"></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"stdio.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAXVEX</span> <span class="token expression"><span class="token number">20</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAXEDGE</span> <span class="token expression"><span class="token number">20</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">INFINITY</span> <span class="token expression"><span class="token number">65535</span></span></span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> vexs<span class="token punctuation">[</span>MAXVEX<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> arc<span class="token punctuation">[</span>MAXVEX<span class="token punctuation">]</span><span class="token punctuation">[</span>MAXVEX<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> numNodes<span class="token punctuation">,</span> numEdges<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>MGraph<span class="token punctuation">;</span><span class="token comment">// 用于存储最短路径下标的数组</span><span class="token keyword">typedef</span> <span class="token keyword">int</span> Patharc<span class="token punctuation">[</span>MAXVEX<span class="token punctuation">]</span><span class="token punctuation">[</span>MAXVEX<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 用于存储到各点最短路径的权值和</span><span class="token keyword">typedef</span> <span class="token keyword">int</span> ShortPathTable<span class="token punctuation">[</span>MAXVEX<span class="token punctuation">]</span><span class="token punctuation">[</span>MAXVEX<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// Floyd算法，求网图G中各顶点v到其余顶点w的最短路径P[v][w]及带权长度D[v][w]</span><span class="token keyword">void</span> <span class="token function">ShortestPath_Floyd</span><span class="token punctuation">(</span>MGraph G<span class="token punctuation">,</span> Patharc <span class="token operator">*</span>P<span class="token punctuation">,</span> ShortPathTable <span class="token operator">*</span>D<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> v<span class="token punctuation">,</span> w<span class="token punctuation">,</span> k<span class="token punctuation">;</span>    <span class="token comment">// 初始化</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>v <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> v <span class="token operator">&lt;</span> G<span class="token punctuation">.</span>numNodes<span class="token punctuation">;</span> v<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 将邻接矩阵中的权值赋给D数组，初始化P数组</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>w <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> w <span class="token operator">&lt;</span> G<span class="token punctuation">.</span>numNodes<span class="token punctuation">;</span> w<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token punctuation">(</span><span class="token operator">*</span>D<span class="token punctuation">)</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>w<span class="token punctuation">]</span> <span class="token operator">=</span> G<span class="token punctuation">.</span>arc<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>w<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">(</span><span class="token operator">*</span>P<span class="token punctuation">)</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>w<span class="token punctuation">]</span> <span class="token operator">=</span> w<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 核心算法，k代表的是中转顶点的下标, v为起始顶点, w为终止顶点</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> G<span class="token punctuation">.</span>numNodes<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>v <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> v <span class="token operator">&lt;</span> G<span class="token punctuation">.</span>numNodes<span class="token punctuation">;</span> v<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span>w <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> w <span class="token operator">&lt;</span> G<span class="token punctuation">.</span>numNodes<span class="token punctuation">;</span> w<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 若通过中转顶点k到达的路径长度要比直接到达的要小，则将当前的权值设置为更小的一个</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>D<span class="token punctuation">)</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>w<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token punctuation">(</span><span class="token operator">*</span>D<span class="token punctuation">)</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token operator">*</span>D<span class="token punctuation">)</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>w<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token punctuation">(</span><span class="token operator">*</span>D<span class="token punctuation">)</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>w<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>D<span class="token punctuation">)</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token operator">*</span>D<span class="token punctuation">)</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>w<span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token comment">// 路径设置为经过下标为k的顶点</span>                    <span class="token punctuation">(</span><span class="token operator">*</span>P<span class="token punctuation">)</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>w<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>P<span class="token punctuation">)</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s3.bmp.ovh/imgs/2023/05/30/f45084249c4a08b8.png" alt="最终矩阵形成示例(结合下述代码理解)"></p><p>通过P数组得出最短路径（此段代码还没有弄懂…）：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"各顶点间最短路径如下：\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>v <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> v <span class="token operator">&lt;</span> G<span class="token punctuation">.</span>numNodes<span class="token punctuation">;</span> v<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>w <span class="token operator">=</span> v<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> w <span class="token operator">&lt;</span> G<span class="token punctuation">.</span>numNodes<span class="token punctuation">;</span> w<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"v%d-v%d  weight:%d"</span><span class="token punctuation">,</span> v<span class="token punctuation">,</span> w<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">*</span>D<span class="token punctuation">)</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>w<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 获得第一个路径顶点下标</span>            k <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>P<span class="token punctuation">)</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>w<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment">// 打印源点</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"path:%d"</span><span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 若路径顶点下标不是终点</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>k<span class="token operator">!=</span>w<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 打印路径顶点</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-> %d"</span><span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 获得下一个路径顶点下标</span>                k <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>P<span class="token punctuation">)</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>w<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">// 打印终点</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> w<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="拓扑排序"><a href="#拓扑排序" class="headerlink" title="拓扑排序"></a>拓扑排序</h2><p>在一个表示工程的有向图中，用顶点表示活动，用弧表示活动之间的优先关系，这样的有向图为顶点表示活动的网，我们称为<code>AOV网</code></p><p>若有满足从顶点vi到顶点vj有一条路径，则在顶点序列中顶点vi必在vj之前，我们称这样的顶点序列为一个拓扑序列</p><p>所谓的拓扑排序，其实就是对一个有向图构造拓扑序列的过程</p><p>基本思路：从AOV网中选择一个入度为0的顶点输出，然后删去此顶点及以此顶点为尾的弧，重复上述步骤直至输出全部顶点或AOV网中不再存在入度为0的顶点</p><p>利用栈进行操作：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//</span><span class="token comment">// Created by zhou on 2023/6/4.</span><span class="token comment">// 拓扑排序</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"stdio.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"stdlib.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAXVEX</span> <span class="token expression"><span class="token number">20</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ERROR</span> <span class="token expression"><span class="token number">0</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">OK</span> <span class="token expression"><span class="token number">1</span></span></span><span class="token comment">// 边表节点</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">EdgeNode</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 邻接点域，存储该顶点对应的下标</span>    <span class="token keyword">int</span> adjvex<span class="token punctuation">;</span>    <span class="token comment">// 权值</span>    <span class="token keyword">int</span> weight<span class="token punctuation">;</span>    <span class="token comment">// 链域，指向下一个邻接点</span>    <span class="token keyword">struct</span> <span class="token class-name">EdgeNode</span> <span class="token operator">*</span>next<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>EdgeNode<span class="token punctuation">;</span><span class="token comment">// 顶点表结点</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">VertexNode</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 入度</span>    <span class="token keyword">int</span> in<span class="token punctuation">;</span>    <span class="token comment">// 顶点信息</span>    <span class="token keyword">int</span> data<span class="token punctuation">;</span>    <span class="token comment">// 边表头指针</span>    <span class="token keyword">struct</span> <span class="token class-name">EdgeNode</span> <span class="token operator">*</span>firstEdge<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>VertexNode<span class="token punctuation">,</span> AdjList<span class="token punctuation">[</span>MAXVEX<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>    AdjList adjList<span class="token punctuation">;</span>    <span class="token keyword">int</span> numNodes<span class="token punctuation">,</span> numEdges<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>graphAdjList<span class="token punctuation">,</span> <span class="token operator">*</span>GraphAdjList<span class="token punctuation">;</span><span class="token comment">/** * 拓扑排序 * @param GL 邻接表 * @return 若GL无回路，返回1，否则返回0 */</span><span class="token keyword">int</span> <span class="token function">TopologicalSort</span><span class="token punctuation">(</span>GraphAdjList GL<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 用于遍历邻接表的指针</span>    EdgeNode <span class="token operator">*</span>e<span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span>k<span class="token punctuation">,</span>gettop<span class="token punctuation">;</span>    <span class="token comment">// 栈指针域下标</span>    <span class="token keyword">int</span> top <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">// 统计输出的顶点个数</span>    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">// 建栈用于将入度为0的顶点入栈</span>    <span class="token keyword">int</span> <span class="token operator">*</span>stack<span class="token punctuation">;</span>    <span class="token comment">// 分配栈空间</span>    stack <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>GL<span class="token operator">-></span>numNodes <span class="token operator">*</span> <span class="token keyword">sizeof</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 遍历所有顶点，将顶点入度为0的入栈</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> GL<span class="token operator">-></span>numNodes<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">==</span> GL<span class="token operator">-></span>adjList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            stack<span class="token punctuation">[</span><span class="token operator">++</span>top<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 当栈指针下标不为0时，代表栈中有顶点</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>top <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 栈顶的顶点出栈</span>        gettop <span class="token operator">=</span> stack<span class="token punctuation">[</span>top<span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d->"</span><span class="token punctuation">,</span> GL<span class="token operator">-></span>adjList<span class="token punctuation">[</span>gettop<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 记录下出栈的顶点数</span>        count<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token comment">// 遍历此顶点的所有邻接点</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>e <span class="token operator">=</span> GL<span class="token operator">-></span>adjList<span class="token punctuation">[</span>gettop<span class="token punctuation">]</span><span class="token punctuation">.</span>firstEdge<span class="token punctuation">;</span> e<span class="token punctuation">;</span> e <span class="token operator">=</span> e<span class="token operator">-></span>next<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 将这些邻接点的入度减1（实际上就是断掉边）</span>            k <span class="token operator">=</span> e<span class="token operator">-></span>adjvex<span class="token punctuation">;</span>            <span class="token comment">// 若入度减少后刚好为0，则再将该顶点入栈</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token operator">--</span>GL<span class="token operator">-></span>adjList<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                stack<span class="token punctuation">[</span><span class="token operator">++</span>top<span class="token punctuation">]</span> <span class="token operator">=</span> k<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 输出顶点数与总顶点数不一致，说明有环</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>count <span class="token operator">&lt;</span> GL<span class="token operator">-></span>numNodes<span class="token punctuation">)</span> <span class="token keyword">return</span> ERROR<span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="关键路径"><a href="#关键路径" class="headerlink" title="关键路径"></a>关键路径</h2><p>在一个表示工程的带权有向图中，用<strong>顶点表示事件</strong>，用有向<strong>边表示活动</strong>，用边上的权值表示活动的持续时间，这样的有向图边表示活动的网，我们称为<code>AOE网</code></p><p>路径上各个活动所持续的时间之和称为路径长度，从源点到终点具有最大长度的路径叫关键路径，在关键路径上的活动叫做关键活动</p><p>相关术语：</p><ul><li>事件最早发生时间etv</li><li>事件最晚发生时间ltv</li><li>活动最早开工时间ete</li><li>活动最晚开工时间lte</li></ul><p>技巧：</p><ul><li>对顶点事件：从前往后取较大，从后往前取较小</li><li>对弧活动：早头(头顶点的最早发生时间)晚尾(晚尾减权值)</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//</span><span class="token comment">// Created by zhou on 2023/6/6.</span><span class="token comment">// 关键路径</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"stdlib.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"stdio.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAXVEX</span> <span class="token expression"><span class="token number">20</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ERROR</span> <span class="token expression"><span class="token number">0</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">OK</span> <span class="token expression"><span class="token number">1</span></span></span><span class="token comment">// 边表节点</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">EdgeNode</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 邻接点域，存储该顶点对应的下标</span>    <span class="token keyword">int</span> adjvex<span class="token punctuation">;</span>    <span class="token comment">// 权值</span>    <span class="token keyword">int</span> weight<span class="token punctuation">;</span>    <span class="token comment">// 链域，指向下一个邻接点</span>    <span class="token keyword">struct</span> <span class="token class-name">EdgeNode</span> <span class="token operator">*</span>next<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>EdgeNode<span class="token punctuation">;</span><span class="token comment">// 顶点表结点</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">VertexNode</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 入度</span>    <span class="token keyword">int</span> in<span class="token punctuation">;</span>    <span class="token comment">// 顶点信息</span>    <span class="token keyword">int</span> data<span class="token punctuation">;</span>    <span class="token comment">// 边表头指针</span>    <span class="token keyword">struct</span> <span class="token class-name">EdgeNode</span> <span class="token operator">*</span>firstEdge<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>VertexNode<span class="token punctuation">,</span> AdjList<span class="token punctuation">[</span>MAXVEX<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>    AdjList adjList<span class="token punctuation">;</span>    <span class="token keyword">int</span> numNodes<span class="token punctuation">,</span> numEdges<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>graphAdjList<span class="token punctuation">,</span> <span class="token operator">*</span>GraphAdjList<span class="token punctuation">;</span><span class="token comment">// 顶点事件最早和最晚发生时间数组</span><span class="token keyword">int</span> <span class="token operator">*</span>etv<span class="token punctuation">,</span> <span class="token operator">*</span>ltv<span class="token punctuation">;</span><span class="token comment">// 拓扑序列栈</span><span class="token keyword">int</span> <span class="token operator">*</span>stack2<span class="token punctuation">;</span><span class="token comment">// 遍历拓扑序列栈指针</span><span class="token keyword">int</span> top2<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">TopologicalSort</span><span class="token punctuation">(</span>GraphAdjList GL<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 用于遍历邻接表的指针</span>    EdgeNode <span class="token operator">*</span>e<span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span>k<span class="token punctuation">,</span>gettop<span class="token punctuation">;</span>    <span class="token comment">// 栈指针域下标</span>    <span class="token keyword">int</span> top <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">// 统计输出的顶点个数</span>    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">// 建栈用于将入度为0的顶点入栈</span>    <span class="token keyword">int</span> <span class="token operator">*</span>stack<span class="token punctuation">;</span>    <span class="token comment">// 分配栈空间</span>    stack <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>GL<span class="token operator">-></span>numNodes <span class="token operator">*</span> <span class="token keyword">sizeof</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 遍历所有顶点，将顶点入度为0的入栈</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> GL<span class="token operator">-></span>numNodes<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">==</span> GL<span class="token operator">-></span>adjList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            stack<span class="token punctuation">[</span><span class="token operator">++</span>top<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 初始化</span>    top2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    etv <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span>GL<span class="token operator">-></span>numNodes <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> GL<span class="token operator">-></span>numNodes<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        etv<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    stack2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>GL<span class="token operator">-></span>numNodes <span class="token operator">*</span> <span class="token keyword">sizeof</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 出栈</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>top <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        gettop <span class="token operator">=</span> stack<span class="token punctuation">[</span>top<span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        count<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token comment">// 拓扑序列入栈</span>        stack2<span class="token punctuation">[</span>top2<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> gettop<span class="token punctuation">;</span>        <span class="token comment">// 遍历此顶点的所有邻接点</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>e <span class="token operator">=</span> GL<span class="token operator">-></span>adjList<span class="token punctuation">[</span>gettop<span class="token punctuation">]</span><span class="token punctuation">.</span>firstEdge<span class="token punctuation">;</span> e<span class="token punctuation">;</span> e <span class="token operator">=</span> e<span class="token operator">-></span>next<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 将这些邻接点的入度减1（实际上就是断掉边）</span>            k <span class="token operator">=</span> e<span class="token operator">-></span>adjvex<span class="token punctuation">;</span>            <span class="token comment">// 若入度减少后刚好为0，则再将该顶点入栈</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token operator">--</span>GL<span class="token operator">-></span>adjList<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                stack<span class="token punctuation">[</span><span class="token operator">++</span>top<span class="token punctuation">]</span> <span class="token operator">=</span> k<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">// 从前往后找较大值</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>etv<span class="token punctuation">[</span>gettop<span class="token punctuation">]</span> <span class="token operator">+</span> e<span class="token operator">-></span>weight<span class="token punctuation">)</span> <span class="token operator">></span> etv<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                etv<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> etv<span class="token punctuation">[</span>gettop<span class="token punctuation">]</span> <span class="token operator">+</span> e<span class="token operator">-></span>weight<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 输出顶点数与总顶点数不一致，说明有环</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>count <span class="token operator">&lt;</span> GL<span class="token operator">-></span>numNodes<span class="token punctuation">)</span> <span class="token keyword">return</span> ERROR<span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 求关键路径 * @param GL */</span><span class="token keyword">void</span> <span class="token function">CriticalPath</span><span class="token punctuation">(</span>GraphAdjList GL<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    EdgeNode <span class="token operator">*</span>e<span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> gettop<span class="token punctuation">,</span> k<span class="token punctuation">,</span> j<span class="token punctuation">;</span>    <span class="token comment">// 边活动的最早和最迟发生时间</span>    <span class="token keyword">int</span> ete<span class="token punctuation">,</span> lte<span class="token punctuation">;</span>    <span class="token comment">// 利用拓扑序列求出数组etv和拓扑排序后的栈</span>    <span class="token function">TopologicalSort</span><span class="token punctuation">(</span>GL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 初始化，分配内存给顶点事件最迟发生时间数组</span>    ltv <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>GL<span class="token operator">-></span>numNodes <span class="token operator">*</span> <span class="token keyword">sizeof</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> GL<span class="token operator">-></span>numNodes<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 初始化，最迟事件发生时间数组初始默认值均为最早事件发生时间数组中的最后一个值</span>        ltv<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> etv<span class="token punctuation">[</span>GL<span class="token operator">-></span>numNodes <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>top2 <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        gettop <span class="token operator">=</span> stack2<span class="token punctuation">[</span>top2<span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>e <span class="token operator">=</span> GL<span class="token operator">-></span>adjList<span class="token punctuation">[</span>gettop<span class="token punctuation">]</span><span class="token punctuation">.</span>firstEdge<span class="token punctuation">;</span> e<span class="token punctuation">;</span> e <span class="token operator">=</span> e<span class="token operator">-></span>next<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            k <span class="token operator">=</span> e<span class="token operator">-></span>adjvex<span class="token punctuation">;</span>            <span class="token comment">// 求各顶点事件最晚发生时间ltv（从后往前找较小值）</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>ltv<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">-</span> e<span class="token operator">-></span>weight <span class="token operator">&lt;</span> ltv<span class="token punctuation">[</span>gettop<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                ltv<span class="token punctuation">[</span>gettop<span class="token punctuation">]</span> <span class="token operator">=</span> ltv<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">-</span> e<span class="token operator">-></span>weight<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 求 ete,lte,和关键路径</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> GL<span class="token operator">-></span>numNodes<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        k <span class="token operator">=</span> e<span class="token operator">-></span>adjvex<span class="token punctuation">;</span>        <span class="token comment">// 活动最早发生时间 = 弧头顶点的最早事件发生时间</span>        ete <span class="token operator">=</span> etv<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">// 活动最迟发生时间 = 弧尾顶点的最迟事件发生时间 - 边上的权值</span>        lte <span class="token operator">=</span> ltv<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">-</span> e<span class="token operator">-></span>weight<span class="token punctuation">;</span>        <span class="token comment">// 若两者相等则在关键路径上</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>ete <span class="token operator">==</span> lte<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"&lt;v%d - v%d> length: %d\n"</span><span class="token punctuation">,</span>                   GL<span class="token operator">-></span>adjList<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">,</span> GL<span class="token operator">-></span>adjList<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">,</span> e<span class="token operator">-></span>weight<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 关于学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>操作系统基础（一）</title>
      <link href="/2023/06/01/cao-zuo-xi-tong-ji-chu-yi/"/>
      <url>/2023/06/01/cao-zuo-xi-tong-ji-chu-yi/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>操作系统相关内容学习记录</p><p>参考视频：<a href="https://www.bilibili.com/video/BV1YE411D7nH/?p=2&spm_id_from=..top_right_bar_window_history.content.click&vd_source=92086abe75e9a70dc6ca3658fcbb9b14">王道计算机考研 操作系统</a></p><h2 id="操作系统的概念"><a href="#操作系统的概念" class="headerlink" title="操作系统的概念"></a>操作系统的概念</h2><ul><li><p>系统资源（包括软硬件）的管理者</p></li><li><p>向上层提供方便易用的服务</p></li><li><p>计算机系统中最基本的系统软件</p></li></ul><h2 id="四个特征"><a href="#四个特征" class="headerlink" title="四个特征"></a>四个特征</h2><ol><li><p><strong>并发</strong>（最基本的特性）</p><p>两个或多个事件在同一时间间隔内发生，即事件在宏观上是同时发生的，微观上是交替发生的；而<code>并行</code>则是两个或多个事件同一时刻发生</p><ul><li>单核CPU同一时刻只能执行一个程序，各个程序只能并发地执行</li><li>多核CPU同一时刻可以同时执行多个程序，多个程序可以并行地执行</li></ul></li><li><p>共享</p><p>资源共享，是指系统中的资源可供内存中多个并发执行的进程共同使用</p><ul><li>互斥共享：一个时间段内只允许一个进程访问该资源</li><li>同时共享：允许一个时间段内由多个进程“同时”对它们进行访问（同时多是指宏观上的，即交替进行）</li></ul></li><li><p>虚拟</p><ul><li>空分复用技术</li><li>时分复用技术</li></ul></li><li><p>异步</p><p>由于资源有限，进程的执行过程中走走停停，以不可预知的速度向前推进，这就是异步性</p></li></ol><h2 id="操作系统的发展与分类"><a href="#操作系统的发展与分类" class="headerlink" title="操作系统的发展与分类"></a>操作系统的发展与分类</h2><ol><li>手工操作阶段</li><li>批处理阶段<ul><li>单道批处理系统</li><li>多道批处理系统</li></ul></li><li>分时操作系统：公平分配时间片，缺点不能优先处理紧急任务</li><li>实时操作系统<ul><li>硬实时：必须在绝对严格的规定时间内完成处理</li><li>软实时：能接受偶尔违反时间规定</li></ul></li><li>网络操作系统</li><li>分布式操作系统</li><li>个人计算机操作系统</li></ol><h2 id="运行机制"><a href="#运行机制" class="headerlink" title="运行机制"></a>运行机制</h2><p>两类程序：内核程序和应用程序</p><p>两类指令：特权指令和非特权指令</p><p>两种处理器状态：内核态（核心态&#x2F;管态）和用户态（目态）</p><p>内核：操作系统最重要最核心的部分，很多内核程序组成操作系统内核</p><p>如何判别是何种状态？CPU中有一个<strong>程序状态字寄存器（PSW）</strong>，其中有一个二进制位，1表示内核态，0表示用户态</p><p>如何变态？</p><ul><li>内核态 -&gt; 用户态：一条修改PSW的特权指令</li><li>用户态 -&gt; 内核态：中断引起，硬件自动完成</li></ul><h2 id="中断和异常"><a href="#中断和异常" class="headerlink" title="中断和异常"></a>中断和异常</h2><p><strong>中断是让操作系统内核夺回CPU使用权的唯一途径</strong></p><ol><li>内中断（也叫异常）：与当前执行的指令有关，中断信号来自CPU内部<ul><li>陷阱、陷入（应用程序故意引发的，原因是应用程序想访问内核）</li><li>故障（错误条件引起，可能会被内核修复，修复成功后会把CPU使用权归还给应用程序）</li><li>终止（致命错误引起，内核无法修复，直接终止应用程序）</li></ul></li><li>外中断：与当前执行的指令无关，中断信号来自CPU外部<ul><li>时钟中断</li><li>IO中断请求</li></ul></li></ol><p>中断机制基本原理：检查中断信号类型，通过中断向量表查询找出相应的中断处理程序</p><p><img src="https://s3.bmp.ovh/imgs/2023/06/17/c9a1d0c44000537c.png" alt="示意图"></p><h2 id="系统调用"><a href="#系统调用" class="headerlink" title="系统调用"></a>系统调用</h2><p><img src="https://s3.bmp.ovh/imgs/2023/06/17/db8cdeb0cdb8dec2.png" alt="示意图"></p><p>什么功能用到系统调用？凡是与共享资源有关的操作，都必须通过系统调用的方式向操作系统内核提出服务请求，由内核代为完成，确保系统的稳定性和安全性</p><p><img src="https://s3.bmp.ovh/imgs/2023/06/17/7fe0e52eefd4fc5b.png" alt="与共享资源相关操作"></p><p>系统调用的过程：</p><p>传参-&gt;执行陷入指令（用户态）-&gt; 由操作系统内核程序处理系统调用请求（内核态）-&gt; 返回应用程序</p><h2 id="操作系统体系结构"><a href="#操作系统体系结构" class="headerlink" title="操作系统体系结构"></a>操作系统体系结构</h2>]]></content>
      
      
      <categories>
          
          <category> 关于学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>找到目标，直面欲望</title>
      <link href="/2023/06/01/zhao-dao-ni-zhen-zheng-xiang-yao-de-dong-xi-newsletter-fen-xiang/"/>
      <url>/2023/06/01/zhao-dao-ni-zhen-zheng-xiang-yao-de-dong-xi-newsletter-fen-xiang/</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文地址：</p><p><a href="https://aliabdaal.com/newsletter/the-problem-with-wanting-things/">https://aliabdaal.com/newsletter/the-problem-with-wanting-things/</a></p></blockquote><h1 id="The-Problem-With-Wanting-Things"><a href="#The-Problem-With-Wanting-Things" class="headerlink" title="The Problem With Wanting Things"></a>The Problem With Wanting Things</h1><hr><p>Hey friends,</p><p>Greetings from Miami, where I’m on a flying visit for a 3-day <a href="https://www.levelingup.com/founders/">Leveling Up Founders Mastermind</a> meeting, hosted by <a href="https://twitter.com/ericosiu?ref_src=twsrc%5Egoogle%7Ctwcamp%5Eserp%7Ctwgr%5Eauthor">Eric Siu</a>.</p><p>This is my first time in the US, and Miami is very pristine – not a sprawling metropolis like London.</p><p>Anyway, on the flight over I re-read <a href="https://geni.us/IXbq">Wanting: The Power of Mimetic Desire</a> by Luke Burgis. It’s based on René Girard’s theory of ‘mimetic desire’, the idea that we often want things just because <strong>other</strong> people have those things.</p><p>See lots of other people using AirPods? Suddenly you want a pair. Friends all getting married? Marriage seems more appealing.</p><p>Same goes for all sorts of situations: colleagues going on adventure holidays, acquaintances learning to code, the neighbours buying a fancy BBQ…</p><p>See enough people doing something, and <strong>you’ll</strong> feel like doing it as well.</p><p>Immediate acquaintances have a particularly big influence, because they’re your closest point of comparison. You don’t get jealous of The Rock for having a big mansion or rippling biceps – but if it’s your best friend making millions and getting shredded, you might feel differently.</p><p>This got me thinking about my wariness of business conferences (much like the one I’m currently at)</p><p>When I’m around entrepreneurs in the $10 million+ range, it makes me “want” that too. In that moment, as I’m standing in a conference room talking to <a href="https://www.youtube.com/watch?v=Ck2yqXMofoc&t=3982s">Steven Bartlett</a> or <a href="https://neilpatel.com/">Neil Patel</a>, being a super-rich businessperson with a huge business and huge team seems really cool.</p><p>So I leave the conference fired up with lots of business ideas. But after a few days that feeling fades, and I realise it was probably <strong>mimetic desire.</strong></p><p>So, how do we figure out what we really want?</p><p>Luke uses the concept of ‘thick’ versus ‘thin’ desires. Thick desires are things you want on a deep level. Stuff that makes you feel happy or fulfilled once you have it or are doing it. Thin desires are usually mimetic – stuff you only <strong>think</strong> you want because you see that other people have it.</p><p>He recommends asking: “What’s a time in my life when I took action, and it made me feel genuinely fulfilled?” This brings out the ‘thick’ desires, things that we genuinely value.</p><p>For me, what immediately comes to mind is the Cambridge University hospital pantomime that us medical students took part in. There was so much camaraderie, and performing on stage every night with a bunch of friends made me feel that ‘yes, life is good’.</p><p>Other things that meet that description for me:</p><ul><li>Working with a small team to create videos (that I’m proud of)</li><li>Teaching people</li><li>Reading (and hopefully writing) amazing books</li><li>Spending time with friends + family</li></ul><p>Try thinking about your own thick &#x2F; thin desires – you might surprise yourself.</p><p>Have a great week!</p><p>Ali xx</p><hr><h2 id="生词记录"><a href="#生词记录" class="headerlink" title="生词记录"></a>生词记录</h2><blockquote><p>mastermind 策划，主谋<br>pristine 原始，纯粹<br>sprawl 蔓延，扩张<br>metropolis 大都市<br>mimetic 模拟<br>desire 渴望，欲望<br>comparison 比较，对照<br>mansion 豪宅，别墅<br>ripple 波动<br>biceps 二头肌<br>shred 撕碎<br>wariness 谨慎，戒心<br>fire up 开火<br>thick 浓厚，厚重<br>versus 与<br>stuff 东西，物质<br>genuinely 真心，真正<br>Cambridge University 剑桥大学</p></blockquote><h2 id="文章概述"><a href="#文章概述" class="headerlink" title="文章概述"></a>文章概述</h2><blockquote><p>作者去迈阿密参加一个商业会议的途中，重读了一本关于欲望相关的书籍，然后引发自己的一些思考，并引用书中的内容给出一些建议，让我们直面内心真正的欲望，去实现自己的价值。</p></blockquote><h2 id="个人感悟"><a href="#个人感悟" class="headerlink" title="个人感悟"></a>个人感悟</h2><blockquote><p>我觉得文中这句话：</p><blockquote><p>You don’t get jealous of The Rock for having a big mansion or rippling biceps – but if it’s your best friend making millions and getting shredded, you might feel differently.</p></blockquote><p>与最近网上看到的一个梗所表达的意思挺符合的：“又怕兄弟苦，又怕兄弟开路虎”😂</p><p>回到正题，感觉就是想提醒我们找到自己真正的目标，不要随波逐流吧。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 每日阅读分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 英语提升 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>当代三大合法赌博</title>
      <link href="/2023/06/01/dang-dai-san-da-he-fa-du-bo/"/>
      <url>/2023/06/01/dang-dai-san-da-he-fa-du-bo/</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文地址：<a href="https://mp.weixin.qq.com/s/ULOT_XxKZnebJONdZ-g_CA">https://mp.weixin.qq.com/s/ULOT_XxKZnebJONdZ-g_CA</a></p></blockquote><h1 id="How-to-Talk-To-Your-Barber-and-Get-the-Haircut-You-Really-Want"><a href="#How-to-Talk-To-Your-Barber-and-Get-the-Haircut-You-Really-Want" class="headerlink" title="How to Talk To Your Barber and Get the Haircut You Really Want"></a><strong>How to Talk To Your Barber and Get the Haircut You Really Want</strong></h1><hr><p>Guys: we have a communication problem. It’s not with our families (though, yes, that’s very real). It’s not with our coworkers (we’ll get to Roy in receivables another day). It’s not even with our partners. We have a problem talking to arguably one of the most important people in your life: your barber. Yet, according to nearly every barber I’ve ever spoken to, most men lack the know-how to articulate what they want their hair to look like when they’re in the chair. Or more accurately, a majority of guys don’t have the language to even begin talking to the pros about what to do with their heads.</p><p>It’s a good thing barbers are trained to interpret our babble. Any cutter worth his salt should be able to decode what you want. They might even be able to decipher what you want when you’re not even aware of that is. But when it comes to your hair, a barber’s number one priority is making you happy, so they’re going to take everything you say with a grain of salt until they can decipher what it is you’re actually looking for. It’s easy to cling to clipper settings (“I’m a one up to a three”), or technical terms you don’t entirely understand (“I want a fade”). But those won’t quite get you across the finish line.</p><p>So what do you do? We spoke to Matty Conrad, veteran barber and founder of Victory hair products, about how best to navigate the situation. Whether you’re walking into a new barber shop for the first time or you just want to let your current barber know, in uncertain terms, what you want, we’ve got you covered.</p><ol><li>Don’t Speak With Words</li></ol><p>You know Zayn Malik’s hair? Try to describe it. Tough, right? So when you sit down at the barber, pull out your phone. Have a few pictures ready before you walk in, even if it’s not the full haircut you like. Say you like this guy’s bangs, or this guy’s taper, or this guy’s edges, or all of the above—your barber can bring all those elements together to create the look you’re after. Hallelujah: all that time spent on Instagram was actually building to a purpose..</p><ol start="2"><li>Know Your Hair</li></ol><p>Everyone’s hair is different—not just in color. But in texture, thickness, and moisture. And knowing what kind of hair you have will help you understand what kind of cut will work best, and save you a lot of headaches down the line. Your barber will be able to tell you if the haircut you’re asking for is a good fit—and also give you some real talk if you’re thinking crazy. (Don’t know what kind of hair you have? You guessed it: ask your barber.)</p><ol start="3"><li>Use The Right Terms</li></ol><p>And by that, we mean no terms. Avoid using words you’ve heard from previous barbers or read on the internet: you probably don’t actually know what “texture” means, no matter how many times you’ve asked for it. Conrad suggests talking about how you want the haircut to feel, not look. For instance, if you want movement on top, say that—instead of, like, “layers,” which you probably don’t want. “You have nothing to prove to [your barber],” Conrad says. So quit trying.</p><ol start="4"><li>And Please Don’t Ask For A Fade (Unless You Want A Fade)</li></ol><p>A quick PSA: stop asking for a fade. Not because you shouldn’t want one (it’s a classic haircut that will always look great), but because what you think is a fade and what actually is a fade are not the same thing. A classic fade is when your hair is cut all the way down to the skin at your hairline (also professionally known as a skin fade). You probably don’t want that. If you want a gradient effect—but, y’know, without the skin showing—ask for a taper.</p><ol start="5"><li>Forget The Number System</li></ol><p>You might think that adhering to the number settings on an electric clipper means you can get the exact same haircut, no matter the barber. Sorry to burst your bubble, but it’s impossible to get the same cut from different barbers. The clipper setting numbers (one, two, three, etc.) are good references for the haircut you got last time, but they’re not a good reference for someone you’ve never been to before. Different barbers have different clippers, different eyes and different interpretations. Hair is not a math equation.</p><ol start="6"><li>Know The Difference Between A Cut And A Style</li></ol><p>Think about what kind of hair you want. Now think about what you’re willing to do in order to get that hair. Will you blow dry every morning? Will you use multiple products? Will you use…any products? All of these things are crucial information for a barber, because if you’re not willing to put in the work, you’re not going to like the haircut. Remember this: a haircut is a component of a hairstyle, but not the whole thing.</p><hr><h2 id="生词记录"><a href="#生词记录" class="headerlink" title="生词记录"></a>生词记录</h2><blockquote><p><em>receivables</em> 应收款项或收款部门</p><p><em>arguably</em> 大概，可能，按理</p><p><em>articulate</em> 清楚表达，清晰发音</p><p><em>interpret</em> 说明，诠释；把···理解为，领会；演绎；翻译，口译</p><p><em>babble</em> 乱哄哄的声音</p><p><em>worth your salt</em> 称职的，胜任的</p><p><em>decode</em> 解码，解读；正确理解（外语单词或短语）</p><p><em>decipher</em> 解释，破译，辨认，解释</p><p><em>take sth with a gain of salt</em> 对···半信半疑</p><p><em>cling to sth</em> 坚持，保持，死死抱住（信念或希望）</p><p><em>clipper</em> 剪刀</p><p><em>veteran</em> 老手，在某方面经验丰富的人；老兵，退伍军人</p><p><em>bangs</em> 刘海儿</p><p><em>taper</em> 灯芯，烛芯；在理发术语中指头发长度从一侧逐渐变短到另一侧</p><p><em>hallelujah</em> 哈利路亚</p><p><em>texture</em> 质地，质感；特色，韵味，格调</p><p><em>thickness</em> 厚度</p><p><em>moisture</em> 潮气，湿气，水分</p><p><em>layer</em> 层，涂层</p><p><em>PSA</em> public service announcement的缩写，公益广告，公共服务声明</p><p><em>gradient</em> 坡度，斜率，倾斜度；变化率。梯度变化曲线；渐变</p><p><em>burst someone’s bubble</em> 打破某人幻想</p><p><em>blow dry</em> 吹干头发</p><p><em>component</em> 组成部分</p></blockquote><h2 id="个人感悟"><a href="#个人感悟" class="headerlink" title="个人感悟"></a>个人感悟</h2><p>剪头发就是赌博，剪完后好不好看全看运气😄</p>]]></content>
      
      
      <categories>
          
          <category> 每日阅读分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 英语提升 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>库克出席中国发展高层论坛受到热烈欢迎</title>
      <link href="/2023/06/01/ku-ke-chu-xi-zhong-guo-fa-zhan-gao-ceng-lun-tan-shou-dao-re-lie-huan-ying/"/>
      <url>/2023/06/01/ku-ke-chu-xi-zhong-guo-fa-zhan-gao-ceng-lun-tan-shou-dao-re-lie-huan-ying/</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文地址：</p><p><a href="https://mp.weixin.qq.com/s/R8RXTzpEqmGIsVU2Y1xPzg">https://mp.weixin.qq.com/s/R8RXTzpEqmGIsVU2Y1xPzg</a></p></blockquote><h1 id="Apple’s-Tim-Cook-Takes-Stage-in-China-to-Welcoming-Applause"><a href="#Apple’s-Tim-Cook-Takes-Stage-in-China-to-Welcoming-Applause" class="headerlink" title="Apple’s Tim Cook Takes Stage in China to Welcoming Applause"></a>Apple’s Tim Cook Takes Stage in China to Welcoming Applause</h1><hr><p>Apple Inc.’s Tim Cook took the stage Saturday at an economic conference in Beijing sponsored by the Chinese government, giving an upbeat talk that was welcomed with applause. </p><p>The treatment his counterpart at TikTok received days earlier in Washington couldn’t have been more different: hours of questioning by lawmakers over the short-video platform’s links to Beijing.</p><p>Mr. Cook, making his first known visit to China since the pandemic began, spoke for about half an hour in an exchange with a former official of the forum’s organizer from a TED Talk-style stage set up in Beijing’s historical Diaoyutai State Guesthouse.</p><p>“I am thrilled to be back in China,” the chief executive told the China Development Forum, hosted by a research center of the State Council. “It means the world to me and I feel really privileged to be here.”</p><p>Mr. Cook spoke about how Apple and China have grown together over the three decades since the company entered the country—which it has relied on both as a manufacturing hub as well as a rapidly growing consumer market. “This has been a symbiotic kind of relationship that we have both enjoyed,” he said. </p><p>Like Mr. Cook, TikTok’s Shou Zi Chew runs one of the world’s most high-profile tech services. TikTok is owned by Beijing-based ByteDance Ltd. That puts it at the center of the growing strategic rivalry between Washington and Beijing, with bilateral relations at their lowest point in decades.</p><p>During a House hearing that ran for more than five hours on Thursday, Mr. Chew—a Singaporean national—was subject to withering attacks on TikTok as he tried to make his case that the company would earn lawmakers’ trust. </p><p>In a rare bipartisan display, Democrats and Republicans repeatedly questioned him over similar issues, at times not allowing him to finish sentences. TikTok later said that political grandstanding had dominated the hearing. </p><p>Apple didn’t immediately respond when asked why it was important that Mr. Cook attended the Chinese-government sponsored conference at a time when U.S.-China tensions are on the rise. In 2017, Mr. Cook said it was important not to be a bystander in China if you want to achieve change. This is his fifth time attending the annual forum.</p><p>Mr. Cook is among the dozens of American and other foreign executives attending, or set to attend, the three-day conference that started Saturday.</p><p>For U.S. business leaders, the risk of potential fallout from being seen hobnobbing in Beijing is high, given how senior American government officials have held off from visiting China.</p><p>In some of the sessions Saturday, the geopolitical tensions loomed as the elephant in the room.</p><p>Qualcomm Inc. CEO Cristiano Amon focused his talk on the digital transformation and 5G, and their potential to boost businesses and productivity in society as a whole.</p><p>In a session on rebuilding supply chains, multinational businesses were represented by top executives from Australian and German companies.</p><p>In other sessions, senior advisers to the Chinese government largely stuck to topics deemed by Beijing as essential to the country’s economic future, including carbon neutrality, technology innovation and healthcare.</p><p>Still, some ventured further, pointing to high inflation and the banking crisis as two risks to the global economy emanating from the U.S. At the same time, they touted Beijing’s ability to manage its debt and economic headwinds.</p><p>“Some developed countries sharply tightened their monetary policies, which brought spillover effects such as bank bankruptcy, foreign debt difficulties, and financial market turmoil,” said Han Wenxiu, a deputy head of the General Office of the Central Financial and Economic Affairs Commission.</p><hr><h2 id="生词记录"><a href="#生词记录" class="headerlink" title="生词记录"></a>生词记录</h2><blockquote><p><em>take the stage</em> 登台表演</p><p><em>upbeat</em> 积极向上的，乐观的，快乐的</p><p><em>counterpart</em> 相反的，对立的，相应的</p><p><em>pandemic</em> 流行病，大规模流行的，广泛蔓延的</p><p><em>guesthouse</em> 客房（大型住宅留给客人用的小屋子），小客栈</p><p><em>privilege</em> 特许的，享有特权的，受特别优待的</p><p><em>hub</em> 中心，枢纽，核心</p><p><em>symbiotic</em> 共生的</p><p><em>profile</em> 简介，概况；关注度</p><p><em>rivalry</em> 竞争，较量，竞赛</p><p><em>bilateral</em> 双边的，双方的</p><p><em>withering</em> （目光，话语等）令人难堪的，尖刻的；严厉的，极为挑剔的</p><p><em>bipartisan</em> 为两党派所支持的，包括两个党派的</p><p><em>grandstanding</em> 哗众取宠，炫耀卖弄</p><p><em>dominate</em> 控制，主导，占支配地位的</p><p><em>bystander</em> 旁观者，看热闹的人</p><p><em>fallout</em> 不良影响，恶果</p><p><em>hobnob</em> 亲近，过从甚密</p><p><em>loom</em> 隐约可见，赫然耸现；（不希望&#x2F;不愉快的事情）阴森地逼近</p><p><em>the elephant in the room</em> （人们不愿提及的）棘手问题</p><p><em>multinational</em> 跨国公司的</p><p><em>deem</em> 认为，相信</p><p><em>neutrality</em> 中立，中立状态</p><p><em>venture</em> （尤指有风险的）企业，商业，投机活动，经营项目；敢于去，冒险去</p><p><em>emanate</em> 表现，显示；来自，发源于，产生于</p><p><em>spillover</em> 溢出；（非预期的）影响</p><p><em>turmoil</em> 动乱，混乱</p></blockquote><h2 id="个人感悟"><a href="#个人感悟" class="headerlink" title="个人感悟"></a>个人感悟</h2><blockquote><p>不可否认苹果在科技创新领域是领头羊，值得各大厂商学习，但近几年国产在智能设备上的创新也不算少，结果却有不少的人在冷嘲热讽，反之是苹果经常炒冷饭，很多人都能无脑狂吹，实在想不懂。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 每日阅读分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 英语提升 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>对标ChatGPT？百度正式发布文心一言</title>
      <link href="/2023/06/01/dui-biao-chatgpt-bai-du-zheng-shi-fa-bu-wen-xin-yi-yan/"/>
      <url>/2023/06/01/dui-biao-chatgpt-bai-du-zheng-shi-fa-bu-wen-xin-yi-yan/</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文地址：</p><p><a href="https://mp.weixin.qq.com/s/pubvqC97i3G0yJ8sGfljow">https://mp.weixin.qq.com/s/pubvqC97i3G0yJ8sGfljow</a></p></blockquote><h1 id="China’s-answer-to-ChatGPT-Baidu-shares-tumble-as-it-unveils-Ernie-Bot"><a href="#China’s-answer-to-ChatGPT-Baidu-shares-tumble-as-it-unveils-Ernie-Bot" class="headerlink" title="China’s answer to ChatGPT? Baidu shares tumble as it unveils Ernie Bot"></a>China’s answer to ChatGPT? Baidu shares tumble as it unveils Ernie Bot</h1><h1 id="From-Reuters"><a href="#From-Reuters" class="headerlink" title="From: Reuters"></a>From: Reuters</h1><hr><p>Chinese search engine giant Baidu on Thursday unveiled its much-anticipated artificial intelligence-powered chatbot known as Ernie Bot, giving the world a glimpse of what could be China’s strongest rival to U.S. research lab OpenAI’s ChatGPT.</p><p>The popularity of ChatGPT, backed by Microsoft, has triggered a frenzied rush among Chinese tech giants and startups alike to develop a rival. Baidu jumped to the forefront of the race after saying early last month it was close to completing a chatbot using its AI-driven deep learning model, Ernie - short for “Enhanced Representation through Knowledge Integration”.</p><p>The Ernie Bot introduction, in a presentation at Baidu headquarters in Beijing, comes two days after Alphabet Inc’s Google unveiled a flurry of AI tools for its email, collaboration and cloud software. Microsoft is expected to make a similar announcement to Google later on Thursday.</p><p>“For sure we cannot say that it’s perfect,” said Baidu CEO Robin Li, presenting Ernie Bot. “So why are we unveiling it today? Because the market demands it.”</p><p>But the limited presentation of Ernie Bot, restricted to brief, pre-recorded videos, failed to match market hopes and Baidu’s Hong Kong-listed shares in the firm tumbled as much as 10% before clawing back some ground.</p><p>During the presentation, Li showed five videos of Ernie Bot answering questions on popular Chinese science fiction novel “The Three Body Problem”, carrying out mathematical calculations, understanding Chinese dialects and generating a video and image with text prompts.</p><p>“Today’s announcement is a natural continuation of the hard work we have put in over the past many years,” he said at the event, which was also livestreamed across nine platforms, including Twitter, Youtube and Weibo.</p><p>Starting Thursday, Ernie Bot will be open to an initial group of users with invitation codes, and companies can apply to embed the bot into their products via Baidu’s cloud platform.</p><p>Baidu has touted its many years of heavy R&amp;D investment in artificial intelligence and deep learning as one reason it is best placed to lead the race to develop a Chinese answer to ChatGPT. Baidu’s research and development expenses in 2022 were 21.4 billion yuan ($3.1 billion), accounting for 22% of revenue.</p><p>Baidu plans to use Ernie Bot to revolutionise its search engine, by far the most dominant in China, as well as use it to increase efficiency in cloud, smart cars and household appliances, among other mainstream businesses.</p><p>Earlier this week, OpenAI on Tuesday said it is beginning to release a powerful artificial intelligence model known as GPT-4, describing it as “multimodel”, meaning images as well as text prompts can spur it to generate content.</p><p>Li nodded to GPT-4 during his speech, saying that its coming showed the threshold for this sort of technology was very high, and that it surprised him with its ability to summarise information.</p><p>But he also cautioned against seeing this through the lens of geopolitics. “Ernie Bot is not a tool of confrontation between China and the United States,” he said.</p><p>To date, 650 companies have said they will join the Ernie ecosystem, he added. Chinese state media outlets and a Shaolin temple were among the first sign-ups to become Ernie Bot partners.</p><hr><h2 id="生词记录"><a href="#生词记录" class="headerlink" title="生词记录"></a>生词记录</h2><blockquote><p><em>share</em> 分享，股票，股价</p><p><em>tumble</em>  滚动，跌倒，下跌</p><p><em>unveil</em> 揭露，揭幕，公布</p><p><em>Reuters</em> 路透社</p><p><em>glimpse</em> 瞥见，短暂的感受</p><p><em>rival</em> 竞争对手，敌手；可与之媲美，比得上</p><p><em>trigger</em>  触发器，扳机</p><p><em>frenzied</em> 疯狂的，暴乱的</p><p><em>integration</em> 结合，整合</p><p><em>flurry</em> 一阵忙乱（关注，激动）；阵雨&#x2F;雪</p><p><em>match market hope</em> 符合市场预期</p><p><em>list</em> 动词：上市</p><p><em>claw sth back</em> 费力夺回，设法捞回</p><p><em>prompt</em> 提示，促使</p><p><em>continuation</em> 持续，延续</p><p><em>livestream</em> 互联网直播，线上直播</p><p><em>tout</em> 吹嘘，吹捧，标榜</p><p><em>sb’s answer to sb&#x2F;sth</em> 与…相当，…的对应物</p><p><em>revolutionise</em> 在某方面引起突破性变革</p><p><em>dominant</em> 首要的，占支配地位的，显著的</p><p><em>appliance</em> 家电</p><p><em>spur</em> 刺激，激励</p><p><em>threshold</em> 界限，门槛，临界点，下限</p><p><em>caution</em> 小心，谨慎；告诫，提醒</p><p><em>geopolitics</em> 地缘政治</p><p><em>confrontation</em> 对峙，对抗，交锋，对立</p><p><em>outlet</em> 直销店，商店 </p><p><em>media&#x2F;news outlet</em> 媒体&#x2F;新闻机构</p><p><em>To date</em> 迄今为止</p></blockquote><h2 id="文章概述"><a href="#文章概述" class="headerlink" title="文章概述"></a>文章概述</h2><blockquote><p>2023年3月16日，百度为了迎合市场需求，发布了并不完美的文心一言机器人，结果与市场预期不符，导致股价大跌。</p></blockquote><h2 id="个人感悟"><a href="#个人感悟" class="headerlink" title="个人感悟"></a>个人感悟</h2><blockquote><p>自2023年开年以来，chatgpt大火，引发了一阵科技狂潮。国内的科技巨头为了搭上这班人工智能列车，纷纷宣布入局，百度就是其中之一。当初宣传时万众期待，结果发布会只是展示了几个预录的视频，并没有与文心一言进行实时互动，由此受到质疑与嘲笑是肯定的了。</p><p>不过个人认为，还是需要给予一定的耐心，毕竟训练和发展还需要一定时间，想霎时间就达到老美发布的GPT4水平是不可能的，至少现在还是勉强坐上了这趟AI列车，不至于落后太多。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 每日阅读分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 英语提升 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>宝马mini道歉</title>
      <link href="/2023/06/01/bao-ma-mini-dao-qian/"/>
      <url>/2023/06/01/bao-ma-mini-dao-qian/</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文地址：<a href="https://mp.weixin.qq.com/s/oHJg71zXtB7xH7ML6Xhbqg">https://mp.weixin.qq.com/s/oHJg71zXtB7xH7ML6Xhbqg</a></p></blockquote><h1 id="BMW-skids-into-ice-cream-melee-at-Shanghai-auto-show"><a href="#BMW-skids-into-ice-cream-melee-at-Shanghai-auto-show" class="headerlink" title="BMW skids into ice cream melee at Shanghai auto show"></a><strong>BMW skids into ice cream melee at Shanghai auto show</strong></h1><hr><p>Chinese internet users berated German automaker BMW on Thursday, accusing it of discrimination at the Shanghai auto show amid claims workers at its Mini booth favoured foreign over domestic visitors during an ice cream giveaway promotion.</p><p>Mini apologised for the incident in question, saying in a statement on its official Weibo account that it was caused by poor internal management and that it would improve training.</p><p>The topic “BMW Mini” became the second most-searched topic on China’s Weibo social media platform, with over 93 million views with users reposting pictures and videos, along with negative comments, of an incident that local media said took place on Wednesday.</p><p>The controversy comes as BMW and fellow German automakers participate in the Shanghai auto show in full force as they fight to stay on top of consumer trends in a country where domestic rivals have been aggressively taking market share.</p><p>One video showed two Chinese workers telling some local visitors to the Mini stand that the free ice cream had run out, only to offer a tub moments later to a Western attendee.</p><p>“This has taken away my good feelings towards BMW,” said one Weibo commentator.</p><p>A person familiar with the matter said the booth had finished giving out 300 servings of ice cream meant for visitors when the incident occurred and the foreigner in the video was a BMW employee.</p><p>The workers were temporary workers hired locally for the show, not BMW staff, the person said, declining to be identified due to the sensitivity of the matter.</p><p>In presentations earlier this week BMW’s Chief Executive Oliver Zipse talked up the importance of the Chinese market to the automaker, saying many of its cars’ features were inspired by China and how the country was ahead of the global curve in auto trends.</p><p>Chinese consumers have in recent years more closely monitored the behaviour of big brands, becoming increasingly critical of foreign companies or local businesses over perceived slights or for not respecting China’s territorial claims.</p><p>Such criticism has at times snowballed into consumer boycotts. In 2019, Dolce &amp; Gabbana saw China sales slow after it faced a backlash for an advertising campaign that was decried as racist by celebrities and on social media. The Italian luxury brand asked for forgiveness and said there was a “cultural misunderstanding”.</p><hr><h2 id="生词记录"><a href="#生词记录" class="headerlink" title="生词记录"></a>生词记录</h2><blockquote><p><em>skid</em> 打滑</p><p><em>melee</em> 混乱，混乱的人群</p><p><em>berate</em> 严责，训斥</p><p><em>discriminate</em> 歧视</p><p><em>booth</em> 小房间</p><p><em>favour</em> 优惠，偏袒，特别照顾</p><p><em>giveaway</em> 赠品</p><p><em>sb&#x2F;sth in question</em> 讨论中的···；正被谈论的···</p><p><em>repost</em> 转发</p><p><em>controversy</em> 争议</p><p><em>rival</em> 竞争对手</p><p><em>aggressively</em> 好斗地，富于攻击地，挑衅地；进取地，有侵略性地</p><p><em>stand</em> 货摊，售货亭</p><p><em>tub</em> 一桶，小杯</p><p><em>attendee</em> 出席者，参加者</p><p><em>serving</em> 供一人食用的一份；一客；目前任职的，现役的</p><p><em>sensitivity</em> 敏感，谨慎对待</p><p><em>talk sth up</em> 热烈地谈论，宣扬</p><p><em>curve</em> 曲线，弧线，转弯</p><p><em>monitor</em> 监视，检查，跟踪调查</p><p><em>perceive</em> 感知，察觉，意识到；认为，看待，视为</p><p><em>slight</em> 少量的；轻视，冷落，怠慢</p><p><em>territorial</em> 领土的，领地的，土地的</p><p><em>snowball</em> 不断扩大，滚雪球般迅速增大</p><p><em>boycott</em> 抵制</p><p><em>backlash</em> 强烈抵制，集体反对</p><p><em>decry</em> 公开谴责，强烈批评</p><p><em>racist</em> 种族主义的，种族主义者</p></blockquote><h2 id="个人感悟"><a href="#个人感悟" class="headerlink" title="个人感悟"></a>个人感悟</h2><blockquote><p>崇洋媚外，有些人跪久了就站不起来了。</p><p>题外话：这就是我不买宝马的原因 🐶</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 每日阅读分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 英语提升 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>宝马Mini再次回应冰淇淋事件</title>
      <link href="/2023/06/01/bao-ma-mini-zai-ci-hui-ying-bing-qi-lin-shi-jian/"/>
      <url>/2023/06/01/bao-ma-mini-zai-ci-hui-ying-bing-qi-lin-shi-jian/</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文地址：<a href="https://mp.weixin.qq.com/s/s9j6K4vgtGKAQEfmlr_wEA">https://mp.weixin.qq.com/s/s9j6K4vgtGKAQEfmlr_wEA</a></p></blockquote><h1 id="Shanghai-Auto-Show-Mini-responds-to-Chinese-ice-cream-racism-uproar"><a href="#Shanghai-Auto-Show-Mini-responds-to-Chinese-ice-cream-racism-uproar" class="headerlink" title="Shanghai Auto Show: Mini responds to Chinese ice cream racism uproar"></a><strong>Shanghai Auto Show: Mini responds to Chinese ice cream racism uproar</strong></h1><hr><p>UK-based carmaker Mini has responded to an internet uproar in China accusing it of racism at the Shanghai Auto Show.</p><p>A video from the event appeared to show Mini staff offering ice cream to foreigners while refusing to give it to Chinese visitors.</p><p>Mini China, which is owned by Germany’s BMW, said the workers were distributing the treats to company employees.</p><p>However, it also said that it was “deeply sorry for the negative mood the incident brought on everyone”.</p><p>In a statement posted on Chinese social media platform Weibo, Mini China said it had given out a total of 600 ice creams during show on 18 and 19 April.</p><p>“In addition to distributing 300 portions of ice cream per day, we also reserved a very small portion for our hardworking colleagues on-site,” Mini China said.</p><p>“The four to five foreigners you see in the video are colleagues who are wearing employee badges,” it added.</p><p>The company also said the incident resulted from lapses in management and training, and called for consideration towards staff in the video.</p><p>In an earlier statement, Mini China said the giveaway was “intended to give sweetness to friends big and small”.</p><p>BMW did not immediately respond to a BBC request for further comment on Friday.</p><p>The topic “BMW Mini” quickly became one of the top searches on Weibo, with over 93 million views.</p><p>The comments were largely negative. “You should have specified that the initial purpose was to give ‘foreign’ big and small friends sweetness,” said a post that drew more than 165,000 likes.</p><p>“I feel ashamed as a Mini owner,” said another user.</p><p>The incident spurred one vlogger to give out ice cream in front of Mini’s auto show booth.</p><p>“I was just angry, and I only gave it to Chinese people,” he told Chinese media outlet Jimu News.</p><p>However, other social media users called for calm. “Let’s treat this reasonable. No matter what type of explanation [Mini gives], there are always going to be people who disagree,” said a post that drew several negative reactions.</p><p>“We shouldn’t excessively magnify a problem to become a question of principle or an ideological issue,” wrote Hu Xijin, the former editor-in-chief of state-owned newspaper Global Times.</p><p>“Let the staff learn their lessons and let their future events return to normal as much as possible. Let’s avoid other vendors getting nervous because of this,” he added.</p><p>Last week, French luxury label Dior was also accused of racism on Chinese social media over an advertisement showing an Asian model pulling up the corner of her eye.</p><p>The picture, promoting Dior’s new makeup collection, was swiftly taken down.</p><p>This was not the first time Dior has been caught up in controversy in China, one of its biggest markets.</p><p>In 2022, it was accused of “culturally appropriating” a Chinese traditional design for one of its skirts.</p><p>Earlier that year, a Chinese snack brand also drew criticism for using a model with narrow eyes in its advertisements.</p><hr><h2 id="生词记录"><a href="#生词记录" class="headerlink" title="生词记录"></a>生词记录</h2><blockquote><p><em>uproar</em> 骚动，怨愤，嘈杂</p><p><em>racism</em> 种族主义，种族歧视</p><p><em>portion</em> 一部分，一份</p><p><em>reserve</em> 保留，把···专门留给；贮藏，储备</p><p><em>on-site</em> 在工地的，在现场的</p><p><em>badge</em> 徽章，纪念章，证章</p><p><em>lapse</em> 过失，失误；间隔时间</p><p><em>specify</em> 具体说明，明确指出</p><p><em>magnify</em> 夸张，放大</p><p><em>ideological</em> 意识形态上的，思想体系上的</p><p><em>vendor</em> 小贩，摊主，卖主</p><p><em>label</em> 公司，公司名称，品牌商品</p><p><em>makeup</em> 化妆品</p><p><em>collection</em> 收藏品，作品集，一系列新作品</p><p><em>cultural appropriation</em> 文化挪用</p></blockquote><h2 id="个人感悟"><a href="#个人感悟" class="headerlink" title="个人感悟"></a>个人感悟</h2><blockquote><p>其实这些国外的公司都是惯犯的了，嘴上说的好听都是因为不能放弃中国市场罢了，说到底一切都是利益。高明点的就会言行一致，不轻易被抓到把柄；最可恶的就是说一套做一套，口不对心。</p><p>都说互联网没有记忆，虽然这次宝马事件闹得沸沸扬扬，不过我猜过不了多长时间很多人就会遗忘，该买的人还是会买的，然后继续受人歧视，就如当年的Adidas和Nike事件，现在的人不照样抢着买？呵呵，反正我是不会买的，做好自己就行。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 每日阅读分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 英语提升 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何表达赞美</title>
      <link href="/2023/06/01/ru-he-biao-da-zan-mei/"/>
      <url>/2023/06/01/ru-he-biao-da-zan-mei/</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文地址：<a href="https://mp.weixin.qq.com/s/QIUVa428xVIEhiGrQhLeMw">https://mp.weixin.qq.com/s/QIUVa428xVIEhiGrQhLeMw</a></p></blockquote><h1 id="How-to-Give-Sincere-Compliments"><a href="#How-to-Give-Sincere-Compliments" class="headerlink" title="How to Give Sincere Compliments"></a><strong>How to Give Sincere Compliments</strong></h1><hr><p>A kind, genuine, thoughtful compliment is like a form of magic—it has the power to turn someone’s day around in an instant and make them feel proud, happy, and appreciated. And while there’s nothing wrong with telling someone you like their shirt (as long as, you know, you actually do—we’re not talking about Mean Girls Regina George-style “Oh my God I love your bracelet, where did you get it?!” compliments), giving a compliment is really an opportunity to go deeper and strengthen your bond with the person.</p><p>“Compliments can be a useful tool to nurture and enhance relationships,” says psychotherapist Lindsay Liben, LCSW. “Ultimately it contributes to deeper, more intimate connection.”</p><p>And beyond the benefits to relationships, doling out compliments can immediately make you as the giver happier as well. Liben points to research showing that giving gratitude-based compliments, in particular, correlates with greater levels of optimism, satisfaction and happiness. As relationship expert and coach Rachel DeAlto puts it, “Compliments create positive energy! And like gifts, giving them can benefit the giver as well as the recipient.”</p><p>Here’s how to build a sincere, thoughtful compliment, that will strengthen your relationships, boost happiness and gratitude, and definitely bring a smile to someone’s face.</p><p><strong>Link your compliment to something you genuinely feel.</strong></p><p>To give a compliment that really resonates, Liben suggests a three-step process, which starts by identifying an action or quality that you truly respect or appreciate. “The compliment should be authentic,” she says, and connected to values that you personally hold dear or that you know are important to that person.</p><p><strong>Then, think about why you appreciate that quality.</strong></p><p>The next step is to figure out the reason this quality resonates so strongly with you. So to put the first two steps together, for example, if you’re thinking about complimenting a friend about her vacation-planning skills leading up to your girls trip, consider why you appreciate the related actions—did she make the trip fun and stress-free for everyone else, for example? Then, connect the first two steps to deliver the compliment, being as specific as possible. So in the case of the getaway, it might be something like, “You’re so fantastic at picking incredible places to eat! I so appreciate that you’re in control.”</p><p><strong>Be authentic and specific, not hyperbolic.</strong></p><p>Liben also recommends keeping in mind the “KISS” method for giving compliments: That is, “Keep It Sincere and Specific.”</p><p>“Hyperbole or gratuitous praise can cheapen the gesture, making it feel empty and disingenuous. An honest compliment, even if it’s a small one, carries more weight,” she explains.</p><p>So, for example, telling your friend that the party she threw was “Literally the best night ever,” might come off as less meaningful than something along the lines of, “I love how you had icebreaker games ready to go so we could all get to know each other as soon as we got there! Hosting seems to come so naturally to you and I really appreciate you always introducing me to new people.”</p><p><strong>Done right, even seemingly superficial compliments can make someone’s day.</strong></p><p>“Never underestimate the power of a ‘your blouse is beautiful’ or ‘your haircut is fantastic,’ to brighten someone’s day,” says DeAlto. “Yet we can always dig deeper and find an attribute, personality trait or accomplishment to compliment as well.”</p><p><strong>…but use adjectives.</strong></p><p>Liben agrees that “Skin-deep compliments may sometimes feel shallow, but in the right context, they can be empowering and appreciated.” She recommends making a simple compliment resonate even more by actually connecting it to a more emotional thought, like instead of saying, “I love your dress!” adding something like, “Your sunny yellow dress is beautiful and seeing it brightened my morning!”</p><p><strong>Compliment your favorite traits in your romantic partner.</strong></p><p>The formula of specific trait plus emotional connection works for complimenting romantic partners on a deeper level as well, and can even help your relationship. “Identifying and celebrating what you adore about your partner can improve your relationship by increasing mindfulness,” says Liben, adding that as a bonus, “the effects of complimenting a romantic partner can also contribute to greater conflict resolution and better communication.”</p><p><strong>Use compliments as a tool in the workplace.</strong></p><p>Regularly complimenting your co-workers or employees can actually boost their performance: Liben points to a link between expressing well-deserved performance-related recognition and improving professional output. To do this as effectively as possible, “the compliment should be genuine and deserved,” she says, as well as performance-specific.</p><p>“Use context clues to help you formulate an appropriate sentiment. For example, after a coworker gives a powerful presentation, compliment her delivery rather than her outfit,” she says.</p><p><strong>Don’t be afraid to compliment a stranger!</strong></p><p>Whether it’s a person on the train or a musician whose performance rocked the house, well-founded (read: not creepy!) compliments are generally appreciated. But for people who are shy, it can be easier said than done. (“What if she thinks I’m weird?” or some version of that may be running through your head.)</p><p>“Start by taking the emotional thermometer of the situation by making eye contact with the receiver,” advises Liben. “Then proceed with a smile. Be direct and speak in an audible volume that conveys confidence.”</p><p>Besides likely bringing a smile to the other person’s face, Liben adds that “If complimenting a stranger is outside your comfort zone, it can be a real dopamine rush.”</p><hr><h2 id="生词记录"><a href="#生词记录" class="headerlink" title="生词记录"></a>生词记录</h2><blockquote><p><em>genuine</em> 真正的，名副其实的；真诚的，真心的，诚实的</p><p><em>compliment</em> 赞美，称赞，赞扬，钦佩，致敬</p><p><em>turn sth around</em> 好转，使扭转，使有起色</p><p><em>bracelet</em> 手镯，手链</p><p><em>nurture</em> 促进，扶助，培养</p><p><em>psychotherapist</em> 心理治疗师</p><p><em>intimate</em> 亲密的</p><p><em>dole sth out</em> 发放。发给（事物，钱等），分发钱等，施舍</p><p><em>optimism</em> 乐观，乐观主义</p><p><em>resonate</em> 使产生联想，引起共鸣</p><p><em>authentic</em> 可靠的，真正的</p><p><em>getaway</em> 短假</p><p><em>hyperbolic</em> 夸张的</p><p><em>gratuitous</em> 不必要的，无谓的</p><p><em>disingenuous</em> 虚伪的</p><p><em>literally</em> 确实地，名副其实地；逐字翻译地；真正地，确实；只是，仅仅</p><p><em>come off</em> 取得预期的效果，成功</p><p><em>line</em> 做法，方法，看法，立场；台词；话语，言语</p><p><em>make sb’s day</em> 令某人开心快乐</p><p><em>blouse</em>  女式衬衫</p><p><em>attribute</em> 属性，特性，特质</p><p><em>skin-deep</em> 肤浅的，表面的</p><p><em>empowering</em> 使有自主感的，使感到有自立能力的，增强自信的</p><p><em>formulate</em> 制定，规划，构想</p><p><em>sentiment</em> 意见，观点，看法，情绪</p><p><em>well-founded</em> 理由充分的</p><p><em>creepy</em> 怪异的，令人毛骨悚然的</p><p><em>thermometer</em> 温度计，体温计</p><p><em>audible</em> 听得见的</p><p><em>dopamine</em> 多巴胺</p></blockquote><h2 id="个人感悟"><a href="#个人感悟" class="headerlink" title="个人感悟"></a>个人感悟</h2><blockquote><p>“我是一个特别固执的人，我从来不会在意别人跟我说什么，让我去做。如果你也可以像我一样，那我觉得这件事情，泰裤辣！”</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 每日阅读分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 英语提升 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何才能获得幸运女神的眷顾？</title>
      <link href="/2023/06/01/ru-he-cai-neng-huo-de-xing-yun-nu-shen-de-juan-gu/"/>
      <url>/2023/06/01/ru-he-cai-neng-huo-de-xing-yun-nu-shen-de-juan-gu/</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文地址：</p><p><a href="https://aliabdaal.com/newsletter/how-to-get-lucky/">How to Get Lucky - Ali Abdaal</a></p></blockquote><h1 id="How-to-Get-Lucky"><a href="#How-to-Get-Lucky" class="headerlink" title="How to Get Lucky"></a>How to Get Lucky</h1><hr><p>Hey friends,</p><p>Firstly, thank you for all your kind responses to my last email (+ offers of mini therapy sessions). I have a book deadline crunch right now, so please forgive my slow responses. But I’ll try to get back to everyone.</p><p>Anyway – I’ve been thinking a lot recently about randomness + serendipity.</p><p>See, I was invited to give a talk at the <a href="https://1billionsummit.com/">1 Billion Followers Summit</a> in Dubai this week. It ended up being super fun, and I hung out with a bunch of other creators (other speakers at the conference, and also attendees). But in all honesty, with all the travel I’ve been doing recently, I was feeling a bit burned out at the prospect of a 48-hour trip to Dubai of which 18 hours would be spent on an aeroplane 😂</p><p>But when taking the decision to go, the two questions I asked myself were:</p><p><strong>Question 1:</strong> Is this something I’m likely to regret?</p><p><strong>Answer:</strong> No. It’s just 1–2 days, I can work on the plane, it won’t really disrupt my life.</p><p><strong>Question 2:</strong> Will this increase the serendipity in my life?</p><p><strong>Answer:</strong> Yes. Who knows what life-changing thing could happen, or who I’ll meet. There’s a much higher chance of something interesting happening on this trip than if I stay at home.</p><p>And this time, optimising for serendipity paid off big time.</p><p>I met the business + finance creator <a href="https://www.youtube.com/@Erika2">Erika Kullberg</a>. And we had a fantastic conversation about business, team management, content strategy. It’s rare to find someone who has a <a href="https://www.instagram.com/erikankullberg/">bigger audience</a> than me, while also having an identical business model. I absorbed so much incredible information.</p><p>And one conversation made the whole trip immediately “worth it” even outside the enjoyment of presenting and meeting people. I even told Erika that it was one of the highest ROI conversations I’ve ever had.</p><p>I’ve been banging this drum for a while but it’s worth saying again: never underestimate <a href="https://aliabdaal.com/finding-inspiration-in-dubai/">the power</a> of <a href="https://aliabdaal.com/the-value-of-saying-yes/">randomness</a> and <a href="https://aliabdaal.com/window-openers-vs-door-knockers-202120/">serendipity</a>.</p><p>Only very rarely will you regret going to a networking event, meeting people or just <strong>doing something</strong> rather than sitting around at home.</p><p>Have a great week!</p><p>Ali xx</p><hr><h2 id="生词记录"><a href="#生词记录" class="headerlink" title="生词记录"></a>生词记录</h2><blockquote><p><em>therapy</em>  治疗，疗法</p><p><em>crunch</em> 紧缩，危机，紧缺</p><p><em>serendipity</em> 偶然性</p><p><em>Dubai</em> 迪拜</p><p><em>hung out with</em> 出去玩</p><p><em>burn out</em> 疲惫</p><p><em>prospect</em> 前景，展望，前瞻</p><p><em>decision</em> 决定，决策</p><p><em>identical</em> 同样的，相同的</p><p><em>bang</em> 爆炸，砰，邦，一声巨响</p><p><em>underestimate</em> 低估，轻视</p><p><em>networking event</em> 社交活动</p></blockquote><h2 id="文章概述"><a href="#文章概述" class="headerlink" title="文章概述"></a>文章概述</h2><blockquote><p>作者前往迪拜参加会议途中，遇到金融界大拿，并与之展开了一场很有价值的谈话。这也使他领略到了偶然性和随机性的魅力，呼吁大家多点社交，少点宅在家中。</p></blockquote><h2 id="个人感悟"><a href="#个人感悟" class="headerlink" title="个人感悟"></a>个人感悟</h2><blockquote><p>越努力，越幸运。坐在家中什么都不做是不会有幸运女神眷顾的，多点出门走走，遇到有趣事情的机会也会增加，也能增长见识，因此古人所说的“读万卷书，行万里路”还是有一定道理的。</p><p>不过对社恐来说，多去参加社交活动可能略有难度😂。无论怎样，趁年轻，多尝试。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 每日阅读分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 英语提升 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大脑发育30岁才完成？</title>
      <link href="/2023/06/01/da-nao-fa-yu-30-sui-cai-wan-cheng/"/>
      <url>/2023/06/01/da-nao-fa-yu-30-sui-cai-wan-cheng/</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文地址：<a href="https://mp.weixin.qq.com/s/sX-eEFnix_AvruJgnbcD1w">https://mp.weixin.qq.com/s/sX-eEFnix_AvruJgnbcD1w</a></p></blockquote><h1 id="You’re-an-adult-but-your-brain-might-not-be-experts-say"><a href="#You’re-an-adult-but-your-brain-might-not-be-experts-say" class="headerlink" title="You’re an adult, but your brain might not be, experts say"></a><strong>You’re an adult, but your brain might not be, experts say</strong></h1><hr><p>You’re legally an adult when you turn 18, in most of the United States. However, from a scientific perspective, adulthood is an unsolved mystery.</p><p>Even neuroscientists don’t know when adolescence ends and adulthood begins in the brain – after all, our brains are constantly changing, according to a new opinion paper published in the journal Neuron on Wednesday.</p><p>“There is no agreed-on benchmark that, when reached, would allow a neuroscientist to say ‘Aha! This brain is fully developed,’ ” said Leah Somerville, an associate professor of psychology at Harvard University, who wrote the paper.</p><p>“However, it is safe to say that by almost any metric, the brain is continuing to develop actively well past the age of 18,” she said. “The reason I think it’s important to discuss this issue is because policies impacting youth have begun to pay more and more attention to the concept of neurodevelopmental maturity, so neuroscientists have begun to get engaged in these complicated discussions,” such as debates about when to charge a child with an adult crime or when to permit aging out of the foster care system.</p><p>So, why can’t the brain reveal whether you’re an adult or not? Different parts of your brain mature at different times, Somerville said.</p><p>“Brain development occurs in waves, with different brain regions having their major developmental events at different times,” she said. “So, the measurements that index brain maturation will give you different answers depending on what measure you’re focusing on and where in the brain you’re looking.”</p><p>In other words, since there is no definitive way to measure brain maturity, there is no definitive age in which your brain signals that you are an adult.</p><p>Your brain consists of two types of tissue, gray matter and white matter. In your first decade of life, the gray matter grows and expands rapidly as many new synapses, or connections between nerves, are being made. The gray matter grows as you learn and are exposed to new experiences as a child.</p><p>Then, as your body prepares for puberty, your brain starts to prune back some of that gray matter and amp up its production of white matter, which allows different parts of the brain to share information better and faster, said Dr. Jess Shatkin, a child and adolescent psychiatrist at the Child Study Center at NYU Langone Medical Center, who was not involved in the new paper.</p><p>“The brain volume, the total volume, doesn’t really change, but we lose about 1% of gray matter starting around 13 and we gain about 1% of white matter at the same time, and that trade off keeps going,” Shatkin said.</p><p>“There are big changes (in the brain) until the early 20s, and there may be pretty significant changes still until the early 30s,” he said. “We’re still learning. Whereas, once upon a time, we imagined adolescence to end at 18, now we don’t really know when this process of development ends. … Twenty-five, 26, 28, 30, 32? We don’t know.”</p><p>Shatkin added that this maturation process of the brain tends to appear in female brains earlier than male brains.</p><p>“There’s been some neurological data showing that girls’ brains may begin to prune earlier,” he said. “This certainly goes along with what we typically observe clinically as well.”</p><p>Overall, most neuroscientists agree that “there’s no magic age at which the brain reaches adulthood,” said Jeffrey Jensen Arnett, a research professor of psychology at Clark University in Massachusetts.</p><p>“I’ve been waiting to see a paper like this, and have thought of writing one myself,” he said. “I’ve done a lot of research on how people define adulthood, and people vary, but in general it’s not an age, it’s defined by qualities such as accepting responsibility for yourself and making independent decisions.”</p><hr><h2 id="生词记录"><a href="#生词记录" class="headerlink" title="生词记录"></a>生词记录</h2><blockquote><p><em>neuroscientist</em> 神经学家</p><p><em>adolescence</em> 青春期</p><p><em>benchmark</em> 基准</p><p><em>associate professor</em> 副教授</p><p><em>metric</em> 公制的，米制的；度量标准。衡量指标</p><p><em>maturity</em> 发育成熟，长成；心智成熟，成熟阶段，完善的状态；到期，开始有回报</p><p><em>wave</em> 波浪</p><p><em>definitive</em> 最终的，决定性的，不可更改的；最佳的，最完整可靠的</p><p><em>synapse</em> 突触</p><p><em>puberty</em> 青春期</p><p><em>prune</em> 修剪（树枝），删除，删节</p><p><em>amp sth up</em> 加大，加强</p><p><em>psychiatrist</em> 精神病医生</p><p><em>volume</em> 总数，总量，容积，体积，容量；音量；卷，册</p><p><em>trade-off</em> 权衡，协调，平衡，交换</p><p><em>clinically</em> 临床诊断地；冷漠地，无动于衷地，无感情地</p><p><em>vary</em> 各不相同</p></blockquote><h2 id="个人感悟"><a href="#个人感悟" class="headerlink" title="个人感悟"></a>个人感悟</h2><p>🧠真是一个复杂的身体结构。年龄只是法律上成年的一个界限，判断一个人是否真的心智成熟应该如文中所说，能否为自己的行为负责和独立地做出决定。</p>]]></content>
      
      
      <categories>
          
          <category> 每日阅读分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 英语提升 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高产胜过完美</title>
      <link href="/2023/06/01/duo-chan-sheng-guo-wan-mei/"/>
      <url>/2023/06/01/duo-chan-sheng-guo-wan-mei/</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文地址：</p><p><a href="https://aliabdaal.com/newsletter/prolific-beats-perfect/">https://aliabdaal.com/newsletter/prolific-beats-perfect/</a></p></blockquote><h1 id="Prolific-Beats-Perfect"><a href="#Prolific-Beats-Perfect" class="headerlink" title="Prolific Beats Perfect"></a>Prolific Beats Perfect</h1><hr><p>Hey friends,</p><p>I just listened to an <a href="https://www.youtube.com/watch?v=zafDOeWNAxg">amazing podcast episode</a>.</p><p>Chris Do from The Futur was interviewing my friend, entrepreneur and author <a href="https://www.youtube.com/watch?v=VwLqwcjJwRo&t=2s">Dan Priestley</a> about how to create a personal brand.</p><p>There were two lessons in there that I think apply to everyone.</p><p><img src="https://aliabdaalltd.wpengine.com/wp-content/uploads/2023/02/email.jpg" alt="img"></p><p>🏗️ <strong>1. Prolific Beats Perfect</strong></p><p>The point of creating content (from a business perspective) is so that your audience develops a connection with you.</p><p>People increasingly want to buy things from <strong>other people</strong>, not faceless corporations. And the way to inspire people and deepen that relationship with them is through being prolific. Create things weekly, daily, finish projects quickly.</p><p>The more you create, the higher your chances of making that <strong>one video</strong> or blog post that strikes a chord.</p><p>In other words, quantity beats quality.</p><p>Take the Beatles, for example. They wrote on average one song every ~8 days for 12 years, and often <strong>multiple</strong> albums in a year. They didn’t spend years agonising over every little detail – but their songs are still legendary. If they’d been perfectionists, they probably wouldn’t have gotten as far as they did.</p><p>The point is – don’t don’t set your quality bar too high. Just get out there and create.</p><p>⏳ <strong>2. Content is Time Travel</strong></p><p>This is really true.</p><p>For example, Dan wrote his book <a href="https://geni.us/xCzg">Key Person of Influence</a> 12 years ago. And all these years later, Chris Do read it, vibed with the ideas, and invited Dan onto his podcast.</p><p>So in a way, Dan-from-12-years-ago communicated with modern-day Chris in a time-travelly kind of way. And it let to new opportunities, with the two guys chatting on a podcast, becoming friends, and potentially working together on a business.</p><p>So remember – with every piece of content you put out there (especially on a platform with longevity, like YouTube or a blog), you’re leaving a breadcrumb trail that will lead interesting people to you in the future.</p><p>Have a great week!</p><p>Ali xx</p><hr><h2 id="生词记录"><a href="#生词记录" class="headerlink" title="生词记录"></a>生词记录</h2><blockquote><p><em>prolific</em> 高产</p><p><em>perspective</em> 视野，角度，观点，前景，展望</p><p><em>strikes</em> 打击，袭击</p><p><em>chord</em> 琴弦</p><p><em>quantity</em> 数量</p><p><em>quality</em> 质量</p><p><em>Beatles</em> 披头士乐队</p><p><em>multiple</em> 多重，多个，多次，倍数</p><p><em>agonising</em> 苦恼</p><p><em>perfectionist</em> 完美主义者</p><p><em>longevity</em> 长寿，寿命</p><p><em>breadcrumb</em> 面包屑</p></blockquote><h2 id="文章概述"><a href="#文章概述" class="headerlink" title="文章概述"></a>文章概述</h2><blockquote><p>作者听播客有感，给我们分享的两个经验：</p><ol><li>多产胜于完美。告诉我们初创时期应注重数量，以数量取胜，忽略部分细节</li><li>告诉我们写下&#x2F;拍下（记录）的内容也许将来会为我们带来机会，就像一场跨时空的相遇</li></ol></blockquote><h2 id="个人感悟"><a href="#个人感悟" class="headerlink" title="个人感悟"></a>个人感悟</h2><blockquote><p>个人认为作者分享的两个经验具有局限性，其更加适合自媒体创作的相关人员，而非作者认为适合所有人，尤其是以数量取胜的策略。</p><p>在自媒体初创时期，想获得关注度确需不断创作获取观众的眼熟，若想维持一批稳定的观众并得到认可，后期也必定需要改善质量，不然无法长久。若做的是其他相关行业，例如零售，餐饮等，质量无法保证，数量根本无从可谈。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 每日阅读分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 英语提升 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入理解Java虚拟机之垃圾收集器及策略</title>
      <link href="/2023/06/01/la-ji-shou-ji-qi-yu-nei-cun-fen-pei-ce-lue/"/>
      <url>/2023/06/01/la-ji-shou-ji-qi-yu-nei-cun-fen-pei-ce-lue/</url>
      
        <content type="html"><![CDATA[<h2 id="垃圾收集器与内存分配策略"><a href="#垃圾收集器与内存分配策略" class="headerlink" title="垃圾收集器与内存分配策略"></a>垃圾收集器与内存分配策略</h2><blockquote><p><strong>程序计数器</strong>、<strong>虚拟机栈</strong>、<strong>本地方法栈</strong>3个区域随线程而生，随线程而灭，栈中的栈帧随着方法的进入和退出而有条不紊地执行着出栈和入栈操作。每一个栈帧中分配多少内存基本上是在类结构确定下来时就已知的（尽管在运行期会由即时编译器进行一些优化，但在基于概念模型的讨论里，大体上可以认为是编译期可知的），因此这几个区域的内存分配和回收都具备确定性，在这几个区域内就不需要过多考虑如何回收的问题，当方法结束或者线程结束时，内存自然就跟随着回收了</p></blockquote><p>垃圾收集器主要关注的是<strong>Java堆</strong>和<strong>方法区</strong>这两部分内存</p><h3 id="对象已死？"><a href="#对象已死？" class="headerlink" title="对象已死？"></a>对象已死？</h3><h4 id="引用计数算法"><a href="#引用计数算法" class="headerlink" title="引用计数算法"></a>引用计数算法</h4><p>在对象中添加一个引用计数器，每当有一个地方引用它时，计数器值就加一；当引用失效时，计数器值就减一；任何时刻计数器为零的对象就是不可能再被使用的</p><h4 id="可达性分析算法"><a href="#可达性分析算法" class="headerlink" title="可达性分析算法"></a>可达性分析算法</h4><p>通过一系列称为“GC Roots”的根对象作为起始节点集，从这些节点开始，根据引用关系向下搜索，搜索过程所走过的路径称为“引用链”（Reference Chain），如果某个对象到GC Roots间没有任何引用链相连，或者用图论的话来说就是从GC Roots到这个对象不可达时，则证明此对象是不可能再被使用的</p><p><img src="https://s3.bmp.ovh/imgs/2022/04/25/d11a4728f71dffd0.png" alt="image-20220109182007556"></p><h4 id="再谈引用"><a href="#再谈引用" class="headerlink" title="再谈引用"></a>再谈引用</h4><ul><li><p>强引用</p><p>永不回收被强引用的对象</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Object</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>软引用</p><p>还有用，但非必须的对象。即内存足够，则保留；内存将要溢出，则回收</p></li><li><p>弱引用</p><p>非必须的对象。只有GC开始工作，无论内存是否足够都被回收</p></li><li><p>虚引用</p><p>任何时候都有可能被回收</p></li></ul><h4 id="生存-OR-死亡"><a href="#生存-OR-死亡" class="headerlink" title="生存 OR 死亡"></a>生存 OR 死亡</h4><p>可达性分析算法中，至少需要经过两次标记过程，才能真正地宣告一个对象死亡</p><ul><li>第一次标记：发现没有与<code>GC ROOTS</code>相连的引用链</li><li>第二次标记：筛选该对象是否有必要执行<code>finalize()</code>方法。执行<code>finalize()</code>方法后，再次判断是否可达，不可达则回收，可达则对象复活<ul><li>筛选条件是：对象是否覆盖<code>finalize()</code>方法，及其是否被虚拟机调用过（若不覆盖或被调用过，则对象被回收）</li></ul></li></ul><p>一次对象自救示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*** 此代码演示了两点：* 1.对象可以在被GC时自我拯救* 2.这种自救的机会只有一次，因为一个对象的finalize()方法最多只会被系统自动调用一次*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FinalizeEscapeGC</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">FinalizeEscapeGC</span> <span class="token constant">SAVE_HOOK</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">isAlive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"yes, i am still alive :)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">finalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">finalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"finalize method executed!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">FinalizeEscapeGC</span><span class="token punctuation">.</span><span class="token constant">SAVE_HOOK</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">&#123;</span>        <span class="token constant">SAVE_HOOK</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FinalizeEscapeGC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//对象第一次成功拯救自己</span>        <span class="token constant">SAVE_HOOK</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 因为Finalizer方法优先级很低，暂停0.5秒，以等待它</span>        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">SAVE_HOOK</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token constant">SAVE_HOOK</span><span class="token punctuation">.</span><span class="token function">isAlive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"no, i am dead :("</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token comment">// 下面这段代码与上面的完全相同，但是这次自救却失败了</span>     <span class="token constant">SAVE_HOOK</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 因为Finalizer方法优先级很低，暂停0.5秒，以等待它</span>        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">SAVE_HOOK</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token constant">SAVE_HOOK</span><span class="token punctuation">.</span><span class="token function">isAlive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"no, i am dead :("</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="回收方法区"><a href="#回收方法区" class="headerlink" title="回收方法区"></a>回收方法区</h4><p>方法区垃圾收集主要是两部分内容：</p><ul><li>废弃的常量</li><li>不再使用的类型</li></ul><p>其中判断一个不再使用的类型需满足以下三个条件：</p><ol><li>该类的所有实例都已被回收，即Java堆中不再存在该类及其子类的对象</li><li>加载该类的类加载器已经被回收</li><li>该类对应的<code>java.lang.Class</code>对象没有在任何地方被引用，无法在任何地方通过反射访问该类的方法</li></ol><h3 id="垃圾收集算法"><a href="#垃圾收集算法" class="headerlink" title="垃圾收集算法"></a>垃圾收集算法</h3><ol><li>引用计数式垃圾收集（直接）</li><li>追踪式垃圾收集（间接）</li></ol><h4 id="分代收集理论"><a href="#分代收集理论" class="headerlink" title="分代收集理论"></a>分代收集理论</h4><ol><li>弱分代假说：大多数对象都是朝生夕灭的</li><li>强分代假说：熬过多次垃圾收集过程都难以消灭的对象</li></ol><p>上述两个分代假说奠定了常用垃圾收集器的设计原则：</p><blockquote><p>收集器应该将Java堆划分出不同的区域，然后将回收对象依据其年龄（年龄即对象熬过垃圾收集过程的次数）分配到不同的区域之中存储</p></blockquote><ol start="3"><li>跨代引用假说：跨代引用相对于同代引用来说仅占极少数</li></ol><blockquote><p>存在互相引用关系的两个对象，是应该倾向于同时生存或者同时消亡的</p></blockquote><hr><p>问题：</p><blockquote><p>假如要现在进行一次只局限于新生代区域内的收集（Minor GC），但新生代中的对象是完全有可能被老年代所引用的，为了找出该区域中的存活对象，不得不在固定的GC Roots之外，再额外遍历整个老年代中所有对象来确保可达性分析结果的正确性</p></blockquote><p>解决：</p><blockquote><p>为了避免扫描整个老年代，基于第三个假说，在新生代上建立了一个全局的数据结构：<code>记忆集</code></p><p>该结构将老年代划分若干个内存小块，标识哪小块内存存在跨代引用</p><p>此后若进行Minor GC，存在跨代引用的小块内存直接加入GC Roots中进行扫描</p></blockquote><hr><p>名词定义：</p><ul><li>部分收集（Partial GC）：目标非完整Java堆的垃圾收集<ul><li>新生代收集（Minor GC&#x2F;Young GC）：目标是新生代垃圾收集</li><li>老年代收集（Major GC&#x2F;Old GC）：目标是老年代垃圾收集</li><li>混合收集（Mixed GC）：目标是整个新生代和部分老年代垃圾收集</li></ul></li><li>整堆收集（Full GC）：目标是整个Java对和方法区的垃圾收集</li></ul><h4 id="标记清除算法"><a href="#标记清除算法" class="headerlink" title="标记清除算法"></a>标记清除算法</h4><p>首先标记出所有需要回收的对象，在标记完成后，统一回收掉所有被标记的对象，也可以反过来，标记存活的对象，统一回收所有未被标记的对象</p><p>缺点：执行效率不稳定、内存空间碎片化问题</p><p><img src="https://s3.bmp.ovh/imgs/2022/04/25/28a4e4c138cbbb73.png" alt="image-20211228110833260"></p><h4 id="标记复制算法"><a href="#标记复制算法" class="headerlink" title="标记复制算法"></a>标记复制算法</h4><p>将可用内存划分成相等的两个半区A、B，每次只使用一个半区。当半区A的内存使用完后，将其还存活的对象复制到另一半区B，然后清理半区A的空间</p><p>缺点：存活对象过多会带来内存间复制的开销；每次只能使用一半内存，造成空间浪费</p><p><img src="https://s3.bmp.ovh/imgs/2022/04/25/9ed498ab5a8bbdba.png" alt="image-20211228114103172"></p><hr><p>优化半区复制，提出<code>Appel回收</code>：</p><ul><li><p>将新生代划分成80%的Eden空间、10%的Survivor(From)空间和10%Survivor(To)空间。</p></li><li><p>发生垃圾收集时，将Eden空间和From空间中仍存活对象复制到To空间中，然后清理掉Eden和From空间</p></li><li><p>当To空间不足以存储下剩余存活对象时，多余的通过<code>分配担保机制</code>直接进入老年代</p></li></ul><p><img src="https://s3.bmp.ovh/imgs/2022/04/25/d5d534bb2f4b6e66.png" alt="image-20211228141431917"></p><h4 id="标记整理算法"><a href="#标记整理算法" class="headerlink" title="标记整理算法"></a>标记整理算法</h4><p>和标记清除算法类似，先给需要回收的对象做好标记，然后让所有存活的对象都往内存空间的一边移动，最后清除掉边界外的空间</p><p>缺点：若有大量的存活对象，那么移动并更新其空间也是一项开销</p><p><img src="https://s3.bmp.ovh/imgs/2022/04/25/e1a74f4363e7833e.png" alt="image-20211228142705017"></p><h3 id="HotSpot算法细节实现"><a href="#HotSpot算法细节实现" class="headerlink" title="HotSpot算法细节实现"></a>HotSpot算法细节实现</h3><h4 id="根节点枚举"><a href="#根节点枚举" class="headerlink" title="根节点枚举"></a>根节点枚举</h4><p>所有收集器在根节点枚举这一步骤上都是必须暂停用户线程的。</p><p>在HotSpot解决方案里是使用一组OopMap数据结构来达到直接获取哪些地方存放着对象引用的目的</p><p><img src="https://s3.bmp.ovh/imgs/2022/04/25/e9a284a9e17f5ac1.png" alt="image-20211230100930382"></p><h4 id="安全点"><a href="#安全点" class="headerlink" title="安全点"></a>安全点</h4><p>在特定位置记录下栈里和寄存器里哪些位置是引用，这个特定位置就是安全点</p><p>安全点的设定就决定了用户程序执行时必须到达此处才能暂停并进行垃圾收集。</p><p>安全点的选取基本上是以“是否具有让程序长时间执行的特征”为标准进行选定的</p><blockquote><p><del>抢先式中断：垃圾收集发生时，系统令所有用户线程产生中断，若发现未到达安全点，则恢复，直至其再次到达安全点后产生中断</del></p><p>主动式中断：设置标志位，各个线程执行时轮询该标志位，若中断标志为真，则在最近的安全点上中断挂起。标志位和安全点重合</p></blockquote><p><img src="https://s3.bmp.ovh/imgs/2022/04/25/842a301a91fa10de.png" alt="image-20211230095120993"></p><h4 id="安全区域"><a href="#安全区域" class="headerlink" title="安全区域"></a>安全区域</h4><p>安全区域是指能够确保在某一段代码片段之中，引用关系不会发生变化，因此，在这个区域中任意地方开始垃圾收集都是安全的。我们也可以把安全区域看作被扩展拉伸了的安全点</p><h4 id="记忆集与卡表"><a href="#记忆集与卡表" class="headerlink" title="记忆集与卡表"></a>记忆集与卡表</h4><p>记忆集是一种用于记录从非收集区域指向收集区域的指针集合的抽象数据结构</p><p>卡表是记忆集的一种具体实现。它定义了记忆集的记录精度、与堆内存的映射关系等。HotSpot使用字节数组表示卡表</p><p>字节数组CARD_TABLE的每一个元素都对应着其标识的内存区域中一块特定大小的内存块，这个内存块被称作“卡页”（Card Page）</p><p>一个卡页的内存中通常包含不止一个对象，只要卡页内有一个（或更多）对象的字段存在着跨代指针，那就将对应卡表的数组元素的值标识为1，称为这个元素变脏（Dirty），没有则标识为0。</p><p>在垃圾收集的时候，只要筛选出卡表中变脏的元素，就能找到哪些卡页包含跨代指针，加入GC Roots中一起扫描</p><p><img src="https://s3.bmp.ovh/imgs/2022/04/25/5699bd2ea4a79b66.png" alt="image-20211228171150119"></p><h4 id="写屏障"><a href="#写屏障" class="headerlink" title="写屏障"></a>写屏障</h4><p>有其他分代区域中对象引用了本区域对象时，其对应的卡表元素就应该变脏，变脏时间点原则上应该发生在引用类型字段赋值的那一刻</p><p>在HotSpot虚拟机里是通过写屏障（Write Barrier）技术维护卡表状态的。</p><p>在赋值前的部分的写屏障叫作写前屏障（Pre-Write Barrier），在赋值后的则叫作写后屏障（Post-Write Barrier）。</p><p>高并发场景下，卡表可能存在伪共享问题。解决方案是：不采用无条件的写屏障，而是先检查卡表标记，只有当该卡表元素未被标记过时才将其标记为变脏。</p><h4 id="并发的可达性分析"><a href="#并发的可达性分析" class="headerlink" title="并发的可达性分析"></a>并发的可达性分析</h4><blockquote><p> <strong>可达性分析算法的全过程都需要基于一个能保障一致性的快照中才能够分析，这意味着必须全程冻结用户线程的运行</strong></p></blockquote><p>在OopMap的优化下，GC Roots的查找导致的停顿时间是短暂且相对固定的</p><p>但找到GC Roots后还需要往下遍历对象图，做标记，而且随着堆容量的增大，可容纳的对象也越来越多，这就会导致停顿的时间逐渐变长</p><p>因此，若能减少这部分的停顿时间，其能带来系统级收益是十分可观的</p><hr><p>要解决问题，就必须知道问题发生在哪里，由此引入<code>三色标记</code>工具辅助推导：</p><ul><li><p>白色：表示对象尚未被垃圾收集器访问过。若可达性分析结束后仍然是白色，则表明其不可达，可以回收</p></li><li><p>黑色：表示对象已经被垃圾收集器访问过，且该对象的所有引用都已经被扫描过，代表是存活的。若有其它引用指向了黑色对象，则无需重新扫描。黑色对象不可能不经过灰色对象直接指向白色对象</p></li><li><p>灰色：表示对象已经被垃圾收集器访问过，但该对象至少存在一个引用还没被扫描过。当全部访问后会变成黑色</p><p><img src="https://s3.bmp.ovh/imgs/2022/04/25/b71c8b840685e093.png" alt="image-20211229150038165"></p></li></ul><p>当只有垃圾回收线程单独工作时，不会出现任何问题。但当其与用户线程同时运行，就可能会产生以下情况了：</p><ul><li><p>将原来要回收的标记为存活。这个问题不大，产生了浮动垃圾，等待下次再回收就好</p><p><img src="https://s3.bmp.ovh/imgs/2022/04/25/b9f8ae395b43f67c.png" alt="image-20211229153313859"></p></li><li><p>将原来存活的标记为需要回收。这就会产生对象消失的大问题了</p><p><img src="https://s3.bmp.ovh/imgs/2022/04/25/b4527120dbd513ca.png" alt="image-20211229154123691"></p></li></ul><hr><p>当且仅当以下两个条件符合时，就会产生对象消失问题，即黑色被误标成了白色：</p><ol><li>赋值器插入了一条或多条从黑色对象到白色对象的新引用</li><li>赋值器删除了全部从灰色对象到该白色对象的直接或间接引用</li></ol><p>解决方案：</p><ol><li><p>增量更新：破坏的是第一个条件。新增一条引用时，就将此记录保存，扫描结束之后，再将记录中的黑色引用变为灰色，重新扫描</p><p><img src="https://s3.bmp.ovh/imgs/2022/04/25/d3bfc2b511cf0502.png" alt="image-20211229154938070"></p></li><li><p>原始快照（SATB）：破坏的是第二个条件。将要删除的引用记录保存下来，扫描结束后，将原删除的对象变为灰色对象的根，重新扫描一次</p><p><img src="https://s3.bmp.ovh/imgs/2022/04/25/4265c418c494caf3.png" alt="image-20211229161028839"></p></li></ol><blockquote><p>CMS是基于增量更新来做并发标记的，G1、Shenandoah则是用原始快照来实现</p></blockquote><h3 id="经典垃圾回收器"><a href="#经典垃圾回收器" class="headerlink" title="经典垃圾回收器"></a>经典垃圾回收器</h3><h4 id="Serial收集器"><a href="#Serial收集器" class="headerlink" title="Serial收集器"></a>Serial收集器</h4><p>最基础，同时历史最悠久，在JDK 1.3.1之前是HotSpot虚拟机新生代垃圾收集器的唯一选择</p><ul><li>优点：单线程，内存消耗最小</li><li>缺点：垃圾收集时必须暂停其它所有的工作线程，直至GC结束</li></ul><p><img src="https://s3.bmp.ovh/imgs/2022/04/25/b7de1df2575ff98f.png"></p><h4 id="ParNew收集器"><a href="#ParNew收集器" class="headerlink" title="ParNew收集器"></a>ParNew收集器</h4><p>ParNew收集器实质上是Serial收集器的多线程并行版本，能与CMS收集器配合工作</p><blockquote><p>ParNew可以说是HotSpot虚拟机中第一款退出历史舞台的垃圾收集器</p></blockquote><p><img src="https://s3.bmp.ovh/imgs/2022/04/25/d46a618852d4a5e7.png"></p><h4 id="Parallel-Scavenge收集器"><a href="#Parallel-Scavenge收集器" class="headerlink" title="Parallel Scavenge收集器"></a>Parallel Scavenge收集器</h4><p>基于标记-复制算法实现的一款能够多线程并行的新生代收集器，其目标是达到一个可控制的吞吐量：<br>$$<br>吞吐量 &#x3D; 运行用户代码时间 &#x2F; 运行用户代码时间 + 运行垃圾收集时间<br>$$</p><blockquote><p>垃圾收集的自适应的调节策略（GC Ergonomics） ：通过设置参数<code>-XX ：+UseAdaptiveSizePolicy</code>，虚拟机会根据当前系统的运行情况收集性能监控信息，动态调整这些参数以提供最合适的停顿时间或者最大的吞吐量</p></blockquote><h4 id="Serial-Old收集器"><a href="#Serial-Old收集器" class="headerlink" title="Serial Old收集器"></a>Serial Old收集器</h4><p>Serial Old是Serial收集器的老年代版本，它同样是一个单线程收集器，使用标记-整理算法。这个收集器的主要意义也是供客户端模式下的HotSpot虚拟机使用。</p><p>若在服务端模式下，它也可能有两种用途：</p><ul><li>在JDK 5以及之前的版本中与Parallel Scavenge收集器搭配使用</li><li>作为CMS收集器发生失败时的后备预案，在并发收集发生Concurrent Mode Failure时使用</li></ul><p><img src="https://s3.bmp.ovh/imgs/2022/04/25/8a76dbc5b1294c33.png"></p><h4 id="Parallel-Old收集器"><a href="#Parallel-Old收集器" class="headerlink" title="Parallel Old收集器"></a>Parallel Old收集器</h4><p>Parallel Old是Parallel Scavenge收集器的老年代版本，支持多线程并发收集，基于标记-整理算法实现。</p><p>Parallel Scavenge&#x2F;Parallel Old组合工作如图：</p><p><img src="https://s3.bmp.ovh/imgs/2022/04/25/b346be9a787e38b2.png" alt="image-20220109202801385"></p><h4 id="CMS收集器"><a href="#CMS收集器" class="headerlink" title="CMS收集器"></a>CMS收集器</h4><p>CMS（Concurrent Mark Sweep）收集器是基于标记-清除算法实现的一种以<strong>获取最短回收停顿时间</strong>为目标的收集器。</p><p>其运作过程主要分四个步骤：</p><ol><li><p>初始标记（CMS initial mark）</p><ul><li>需要暂停用户线程，仅标记GC Roots能够直接关联到的对象</li></ul></li><li><p>并发标记（CMS concurrent mark）</p><ul><li>遍历对象图，耗时最长但无需暂停用户线程</li></ul></li><li><p>重新标记（CMS remark）</p><ul><li>需要暂停用户线程，初始化标记&lt;耗时时间&lt;&lt;并发标记。用于修正并发标记中因用户线程运行导致标记变动的部分</li></ul></li><li><p>并发清除（CMS concurrent sweep）</p><ul><li>清理删除掉标记阶段判断的已经死亡的对象，可与用户线程并发</li></ul></li></ol><p><img src="https://s3.bmp.ovh/imgs/2022/04/25/a287848745827410.png" alt="image-20220109203225468"></p><p>缺点：</p><ul><li>对处理器资源敏感<ul><li>占据了部分工作线程</li></ul></li><li>无法处理浮动垃圾<ul><li>因用户线程的同时执行，总会有新的垃圾对象在标记结束后生成，只能等待下一次的垃圾收集</li></ul></li><li>产生内存空间碎片<ul><li>标记-清除算法的缺点</li></ul></li></ul><h4 id="Garbage-First收集器"><a href="#Garbage-First收集器" class="headerlink" title="Garbage First收集器"></a>Garbage First收集器</h4><p>G1是一款主要面向服务端应用的垃圾收集器。它可以面向堆内存任何部分来组成回收集（Collection Set，一般简称<code>CSet</code>）进行回收，衡量标准不再是它属于哪个分代，而是哪块内存中存放的垃圾数量最多，回收收益最大，这就是G1收集器的<code>Mixed GC</code>模式。</p><p>G1不再坚持固定大小以及固定数量的分代区域划分，而是把连续的Java堆划分为多个大小相等的独立区域（Region），每一个Region都可以根据需要，扮演新生代的Eden空间、Survivor空间，或者老年代空间。Region中还有一类特殊的Humongous区域，专门用来存储大对象。G1认为只要大小超过了一个Region容量一半的对象即可判定为大对象。</p><p>Region作为单次回收的最小单元，即每次收集到的内存空间都是Region大小的整数倍，这样可以有计划地避免在整个Java堆中进行全区域的垃圾收集。</p><p><img src="https://s3.bmp.ovh/imgs/2022/04/25/e07eada17faac91c.png" alt="image-20211229190650203"></p><p>G1收集器运行步骤及示意图：</p><ol><li><p>初始标记</p><ul><li><p>仅仅只是标记一下GC Roots能直接关联到的对象，并且修改<code>TAMS</code>指针的值，让下一阶段用户线程并发运行时，能正确地在可用的Region中分配新对象</p><blockquote><p>TAMS：要达到GC与用户线程并发运行，必须要解决回收过程中新对象的分配，所以G1为每一个Region区域设计了两个名为TAMS（Top at Mark Start）的指针，从Region区域划出一部分空间用于记录并发回收过程中的新对象。这样的对象认为它们是存活的，不纳入垃圾回收范围</p></blockquote></li></ul></li><li><p>并发标记</p><ul><li>从GC Roots开始对堆中对象进行可达性分析，递归扫描整个堆里的对象图，找出要回收的对象，这阶段耗时较长，但可与用户程序并发执行。当对象图扫描完成以<br>后，还要重新处理SATB记录下的在并发时有引用变动的对象</li></ul></li><li><p>最终标记</p><ul><li>对用户线程做另一个短暂的暂停，用于处理并发阶段结束后仍遗留下来的最后那少量的SATB记录</li></ul></li><li><p>筛选回收</p><ul><li>负责更新Region的统计数据，对各个Region的回收价值和成本进行排序，根据用户所期望的停顿时间来制定回收计划，可以自由选择任意多个Region构成回收集，然后把决定回收的那一部分Region的存活对象复制到空的Region中，再清理掉整个旧Region的全部空间</li></ul><p><img src="https://s3.bmp.ovh/imgs/2022/04/25/02c4ab559914a893.png" alt="image-20220109203624440"></p></li></ol><p>可以由用户指定期望的停顿时间是G1收集器很强大的一个功能，设置不同的期望停顿时间，可使得G1在不同应用场景中取得关注吞吐量和关注延迟之间的最佳平衡；停顿时间过短可能会出现对象分配速度 &gt; 垃圾回收速度，导致垃圾堆积，因此一般设置在100<del>200</del>300毫秒之间是比较合理的。</p><p>与CMS相比，G1在用户程序运行过程中，其垃圾回收的内存占用及程序运行时的额外执行负载都要比CMS的高；其主要原因都是跨代引用的处理，G1维护的卡表（堆中的每个Region都需要维护一份记忆集）比CMS维护的卡表（只需维护一份记忆集）更复杂得多。</p><h3 id="低延迟垃圾收集器"><a href="#低延迟垃圾收集器" class="headerlink" title="低延迟垃圾收集器"></a>低延迟垃圾收集器</h3><blockquote><p>衡量垃圾收集器的三项最重要的指标是：<code>内存占用（Footprint）</code>、<code>吞吐量（Throughput）</code>和<code>延迟（Latency）</code>，三者共同构成了一个”不可能三角”</p></blockquote><h4 id="Shenandoah收集器"><a href="#Shenandoah收集器" class="headerlink" title="Shenandoah收集器"></a>Shenandoah收集器</h4><p>Shenandoah与G1类似，但它摒弃G1中耗费大量内存和计算资源维护的记忆集，转用“连接矩阵”的全局数据结构来记录跨Region的引用关系，降低了伪共享的发生概率。</p><blockquote><p>连接矩阵：可简单理解成一张二维表格，如果Region N有对象指向Region M，就在表格的N行M列中打上一个标记</p></blockquote><p><img src="https://s3.bmp.ovh/imgs/2022/04/26/a8af5612ac22e678.png" alt="image-20211230160005864"></p><p>Shenandoah收集器的工作过程大致有九个阶段：</p><ol><li>初始标记<ul><li>标记与GC Roots直接关联的对象，停顿时间只与GC Roots数量相关</li></ul></li><li>并发标记<ul><li>遍历对象图，标记所有可达对象，时间长短取决于堆中对象数量和对象图的结构复杂度</li></ul></li><li>最终标记<ul><li>处理剩余的SATB扫描，统计回收价值最高的Region组成回收集（CSet）</li></ul></li><li>并发清理<ul><li>清理一个存活对象都没有的Region空间</li></ul></li><li>并发回收<ul><li>复制回收集中还存活的对象到空闲的Region空间中。其运行时间取决于回收集的大小</li></ul></li><li>初始引用更新<ul><li>上述复制结束后，建立一个线程集合点，确保所有并发回收阶段中进行的收集器线程都已完成相应的对象移动任务</li></ul></li><li>并发引用更新<ul><li>真正开始引用更新操作，将堆中所有指向旧对象的引用修正到复制后的新地址。时间长短取决于内存中引用数量的多少</li></ul></li><li>最终引用更新<ul><li>修正GC Roots中的引用，会产生停顿，时间只与GC Roots数量有关</li></ul></li><li>并发清理<ul><li>上述操作过后，回收集中的Region再无存活对象，最后清理Region内存空间</li></ul></li></ol><p><img src="https://s3.bmp.ovh/imgs/2022/04/26/d323fcc7a6882d16.png" alt="image-20211231092053346"></p><hr><p>并发整理核心概念——<code>Brooks Pointers</code>：</p><ul><li><p>使用<code>转发指针</code>（Forwarding Pointer，也常被称为Indirection Pointer）来实现对象移动与用户程序并发</p></li><li><p>在原有对象布局结构的最前面统一增加一个新的引用字段，在正常不处于并发移动的情况下，该引用指向对象自己</p><p><img src="https://s3.bmp.ovh/imgs/2022/04/26/b524411bbb30db62.png" alt="image-20220103141946552"></p></li></ul><p>其工作原理：</p><blockquote><p><strong>当 GC 线程对存活对象进行复制时，旧的对象的转发指针会指向新对象的地址</strong></p><p>转发指针加入后带来的收益自然是当对象拥有了一份新的副本时，只需要修改一处指针的值，即旧对象上转发指针的引用位置，使其指向新对象，便可将所有对该对象的访问转发到新的副本上。这样只要旧对象的内存仍然存在，未被清理掉，虚拟机内存中所有通过旧引用地址访问的代码便仍然可用，都会被自动转发到新对象上继续工作</p></blockquote><p><img src="https://s3.bmp.ovh/imgs/2022/04/26/707608eb24d4dbbe.png" alt="image-20220103142041960"></p><h4 id="ZGC收集器"><a href="#ZGC收集器" class="headerlink" title="ZGC收集器"></a>ZGC收集器</h4><p>Z Garbage Collector是在JDK 11中新加入具有实验性质的一款基于Region内存布局的，（暂时）不设分代的，使用了<strong>读屏障、染色指针和内存多重映射</strong>等技术来实现可并发的标记-整理算法的，以低延迟为首要目标的一款垃圾收集器。</p><p>ZGC的Region空间具有动态性——动态创建和销毁，以及动态的区域容量大小。在X64硬件平台下主要分为三种：</p><ol><li>小型Region<ul><li>固定2M，存放小于256k的小对象</li></ul></li><li>中型Region<ul><li>固定32M，存放&gt;&#x3D;256k但&lt;4M的对象</li></ul></li><li>大型Region<ul><li>容量动态变化，为2M的整数倍，存放4M及以上的大对象</li></ul></li></ol><p><img src="https://s3.bmp.ovh/imgs/2022/04/26/20876cfccdadb062.png" alt="ZGC堆内存布局"></p><hr><p>Shenandoah使用转发指针和读屏障来实现并发整理，而ZGC使用了<code>染色指针</code>方式来解决并发整理的问题：</p><blockquote><p>除去高18位不能寻址外，剩下的46位，ZGC的染色指针技术将其高4位提取出来存储四个标志信息。通过这些标志位，虚拟机可以直接从指针中看到其引用对象的三色标记状态、是否进入了重分配集（即被移动过）、是否只能通过finalize()方法才能被访问到，由于这些标志位进一步压缩了原本就只有46位的地址空间，也直接导致ZGC能够管理的内存不可以超过4TB（2的42次幂）</p></blockquote><ul><li><code>Marked0</code>：活跃对象，即不是垃圾对象</li><li><code>Remapped</code>：表示是垃圾对象，可以回收</li></ul><p>采用<code>Marked0</code>和<code>Marked1</code>两个标记是为了区分是前一次标记和当前标记，当发生第二次GC时：</p><ul><li><code>Marked0</code>：前一次回收过程中被标记为活跃，但在转移过程中未转移，此次垃圾回收被标记为不活跃</li><li><code>Marked1</code>：本次回收过程中标记为活跃</li><li><code>Remapped</code>：</li></ul><p><img src="https://s3.bmp.ovh/imgs/2022/04/26/694ea837206ed1b3.png" alt="image-20220103162023297"></p><p>​</p><p>染色指针带来的三个优势：</p><ol><li>染色指针可以使得一旦某个Region的存活对象被移走之后，该Region立即就能够被释放和重用掉，而不必等待整个堆中所有指向该Region的引用都被修正后才能清理</li><li>染色指针可以大幅减少在垃圾收集过程中内存屏障的使用数量，设置内存屏障，尤其是写屏障的目的通常是为了记录对象引用的变动情况，如果将这些信息直接维护在指针中，显然就可以省去一些专门的记录操作</li><li>染色指针可以作为一种可扩展的存储结构用来记录更多与对象标记、重定位过程相关的数据，以便日后进一步提高性能</li></ol><blockquote><p>Linux&#x2F;x86-64平台上的ZGC使用了<code>多重映射（Multi-Mapping）</code>将多个不同的虚拟内存地址映射到同一个物理内存地址上，这是一种多对一映射，意味着ZGC在虚拟内存中看到的地址空间要比实际的堆内存容量来得更大。把染色指针中的标志位看作是地址的分段符，那只要将这些不同的地址段都映射到同一个物理内存空间，经过多重映射转换后，就可以使用染色指针正常进行寻址了</p></blockquote><p><img src="https://s3.bmp.ovh/imgs/2022/04/26/ca143d6396984df4.png" alt="image-20220107160153746"></p><hr><p>其运行流程大致分为四个阶段：</p><ol><li><p>并发标记</p><ul><li>ZGC标记的是指针而不是对象，该阶段会更新染色指针中的Marked 0、Marked 1标志位</li></ul></li><li><p>并发预备重分配</p><ul><li>ZGC每次回收都会扫描所有的Region，查询出本次收集过程中需要清理的Region组成重分配集（Relocation Set）</li></ul></li><li><p>并发重分配</p><ul><li><p>把重分配集中的存活对象复制到新的Region上，并为重分配集中的每个Region维护一个转发表（ForwardTable），记录从旧对象到新对象的转向关系</p><blockquote><p>指针的“自愈”能力：ZGC收集器能仅从引用上就明确得知一个对象是否处于重分配集之中，如果用户线程此时并发访问了位于重分配集中的对象，这次访问将会被预置的内存屏障所截获，然后立即根据Region上的转发表记录将访问转发到新复制的对象上，并同时修正更新该引用的值，使其直接指向新对象</p></blockquote><p><img src="https://s3.bmp.ovh/imgs/2022/04/26/805fdd3bbbcb090a.png" alt="image-20220107172259997"></p></li></ul></li><li><p>并发重映射</p><ul><li>修正整个堆中指向重分配集中旧对象的所有引用</li></ul></li></ol><p><img src="https://s3.bmp.ovh/imgs/2022/04/26/d81f979c1059f4a2.png" alt="image-20220109203725826"></p><h3 id="选择合适的垃圾收集器"><a href="#选择合适的垃圾收集器" class="headerlink" title="选择合适的垃圾收集器"></a>选择合适的垃圾收集器</h3><h4 id="Epsilon收集器"><a href="#Epsilon收集器" class="headerlink" title="Epsilon收集器"></a>Epsilon收集器</h4><p>Epsilon，这是一款以不能够进行垃圾收集为“卖点”的垃圾收集器</p><blockquote><p>只要Java虚拟机能正确分配内存，在堆耗尽之前就会退出，那显然运行负载极小、没有任何回收行为的Epsilon便是很恰当的选择</p></blockquote><h4 id="收集器的权衡"><a href="#收集器的权衡" class="headerlink" title="收集器的权衡"></a>收集器的权衡</h4><p>三个前提因素：</p><ol><li>应用程序的主要关注点是什么。吞吐量？内存占用？停顿时间？</li><li>运行应用的基础设施如何。硬件的规格</li><li>使用JDK的发行商是什么</li></ol><p>举个🍩，假设某个直接面向用户提供服务的B&#x2F;S系统准备选择垃圾收集器，一般来说延迟时间是这类应用的主要关注点：</p><ul><li>有充足预算但没调优经验，带有商业技术支持的C4收集器比较适合</li><li>无预算，但容易接受新技术，ZGC收集器</li><li>若对新技术稳定性有所顾虑，Shenandoah收集器</li><li>若是老旧项目，基础设施比较一般，内存空间在4~6G及以下的可以使用CMS收集器，更大内存的可以考虑G1收集器</li></ul><h4 id="虚拟机及垃圾收集器日志"><a href="#虚拟机及垃圾收集器日志" class="headerlink" title="虚拟机及垃圾收集器日志"></a>虚拟机及垃圾收集器日志</h4><p>阅读分析虚拟机和垃圾收集器的日志是处理Java虚拟机内存问题必备的基础技能。此处仅以JDK 1.8为例，结合idea演示几个常用的例子：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 示例代码</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Hello</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> instance <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> _1MB <span class="token operator">=</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bigSize <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> _1MB<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Hello</span> objA <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Hello</span> objB <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        objA<span class="token punctuation">.</span>instance <span class="token operator">=</span> objB<span class="token punctuation">;</span>        objB<span class="token punctuation">.</span>instance <span class="token operator">=</span> objA<span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><p>查看GC基本信息：<code>-XX:+PrintGC</code></p><p><img src="https://s3.bmp.ovh/imgs/2022/04/26/5f3ff08d6e10ea93.png" alt="image-20220105112347715"></p></li></ol><p>PS：</p><blockquote><p>可能出现错误：</p><p>Error: Could not create the Java Virtual Machine. Error: A fatal exception has occured. Program will exit</p><p>解决方案：</p><p>配置环境变量，变量：_JAVA_OPTIONS 值：-Xmx512M</p></blockquote><ol start="2"><li><p>查看GC详细信息：<code>-XX:+PrintGCDetails</code></p><pre class="line-numbers language-none"><code class="language-none">[Full GC (System.gc()) [PSYoungGen: 5208K-&gt;0K(75776K)] [ParOldGen: 8K-&gt;5009K(173568K)] 5216K-&gt;5009K(249344K), [Metaspace: 3191K-&gt;3191K(1056768K)], 0.0047931 secs] [Times: user&#x3D;0.16 sys&#x3D;0.00, real&#x3D;0.00 secs] Heap PSYoungGen      total 75776K, used 1953K [0x000000076b600000, 0x0000000770a80000, 0x00000007c0000000)  eden space 65024K, 3% used [0x000000076b600000,0x000000076b7e8460,0x000000076f580000)  from space 10752K, 0% used [0x000000076f580000,0x000000076f580000,0x0000000770000000)  to   space 10752K, 0% used [0x0000000770000000,0x0000000770000000,0x0000000770a80000) ParOldGen       total 173568K, used 5009K [0x00000006c2200000, 0x00000006ccb80000, 0x000000076b600000)  object space 173568K, 2% used [0x00000006c2200000,0x00000006c26e4410,0x00000006ccb80000) Metaspace       used 3199K, capacity 4496K, committed 4864K, reserved 1056768K  class space    used 350K, capacity 388K, committed 512K, reserved 1048576K<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>查看GC前后的堆、方法区可用容量变化：<code>-XX:+PrintHeapAtGC</code></p><pre class="line-numbers language-none"><code class="language-none">&#123;Heap before GC invocations&#x3D;1 (full 0): PSYoungGen      total 75776K, used 11816K [0x000000076b600000, 0x0000000770a80000, 0x00000007c0000000)  eden space 65024K, 18% used [0x000000076b600000,0x000000076c18a1e0,0x000000076f580000)  from space 10752K, 0% used [0x0000000770000000,0x0000000770000000,0x0000000770a80000)  to   space 10752K, 0% used [0x000000076f580000,0x000000076f580000,0x0000000770000000) ParOldGen       total 173568K, used 0K [0x00000006c2200000, 0x00000006ccb80000, 0x000000076b600000)  object space 173568K, 0% used [0x00000006c2200000,0x00000006c2200000,0x00000006ccb80000) Metaspace       used 3191K, capacity 4496K, committed 4864K, reserved 1056768K  class space    used 349K, capacity 388K, committed 512K, reserved 1048576KHeap after GC invocations&#x3D;1 (full 0): PSYoungGen      total 75776K, used 5224K [0x000000076b600000, 0x0000000770a80000, 0x00000007c0000000)  eden space 65024K, 0% used [0x000000076b600000,0x000000076b600000,0x000000076f580000)  from space 10752K, 48% used [0x000000076f580000,0x000000076fa9a040,0x0000000770000000)  to   space 10752K, 0% used [0x0000000770000000,0x0000000770000000,0x0000000770a80000) ParOldGen       total 173568K, used 8K [0x00000006c2200000, 0x00000006ccb80000, 0x000000076b600000)  object space 173568K, 0% used [0x00000006c2200000,0x00000006c2202000,0x00000006ccb80000) Metaspace       used 3191K, capacity 4496K, committed 4864K, reserved 1056768K  class space    used 349K, capacity 388K, committed 512K, reserved 1048576K&#125;...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>查看GC过程中用户线程并发时间以及停顿的时间：<code>-XX:+PrintGCApplicationConcurrentTime</code></p><pre class="line-numbers language-none"><code class="language-none">Application time: 0.0034427 secondsApplication time: 0.0005117 seconds<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>查看收集器Ergonomics机制（自动设置堆空间各分代区域大小、收集目标等内容，从Parallel收集器开始支持）自动调节的相关信息：<code>-XX:+PrintAdaptiveSizePolicy</code></p><pre class="line-numbers language-none"><code class="language-none">AdaptiveSizePolicy::update_averages:  survived: 5349440  promoted: 8192  overflow: falseAdaptiveSizeStart: 0.166 collection: 1 AdaptiveSizeStop: collection: 1 AdaptiveSizeStart: 0.170 collection: 2 AdaptiveSizeStop: collection: 2 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>查看熬过收集后剩余对象的年龄分布信息：<code>-XX:+PrintTenuringDistribution</code></p><pre class="line-numbers language-none"><code class="language-none">Desired survivor size 11010048 bytes, new threshold 7 (max 15)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h4 id="垃圾收集器参数总结"><a href="#垃圾收集器参数总结" class="headerlink" title="垃圾收集器参数总结"></a>垃圾收集器参数总结</h4><blockquote><p>参数过多，此节具体内容可自行阅读《深入理解Java虚拟机》</p></blockquote><h3 id="实战：内存分配与回收策略"><a href="#实战：内存分配与回收策略" class="headerlink" title="实战：内存分配与回收策略"></a>实战：内存分配与回收策略</h3><p>Java技术体系中的自动内存管理主要为了解决两个问题：<strong>对象内存分配以及回收</strong>。前面一堆都是理论，实践才是检验真理唯一的标准，因此通过实战来验证收集器的内存分配规则，巩固知识体系。</p><h4 id="对象优先在Eden分配"><a href="#对象优先在Eden分配" class="headerlink" title="对象优先在Eden分配"></a>对象优先在Eden分配</h4><blockquote><p>大多数情况下，对象在新生代Eden区中分配。当Eden区没有足够空间进行分配时，虚拟机将发起一次Minor GC(新生代垃圾回收)</p><p>-Xms:最小值</p><p>-Xmx:最大值</p><p>-Xmn:新生代大小</p><p>Allocation Failure:表示年轻代中无足够空间存储新数据</p></blockquote><p><img src="https://s3.bmp.ovh/imgs/2022/04/28/73fbce89dd2acf7d.png" alt="image-20220105141459088"></p><hr><p>因为限制堆内存为20M，而新生代和老年代各占10M，前面3个对象分配占去Eden区6M，剩下Eden区与一个Survivor区（即From）已经不足以分配<code>allocation4</code>的4M内存，所以分配<code>allocation4</code>的时候会发生MinorGC。垃圾回收期间原有的6M对象无法全部放入Survivor区（即To）中，所以通过分配担保机制进入老年代中。最终，4M大小的<code>allocation4</code>成功进入Eden区中（日志中<code>PSYoungGen used 5457K</code>），而另外三个2M的对象进入老年代中（日志中<code>ParOldGen used 6224K</code>），Survivor区空闲</p><p><img src="https://s3.bmp.ovh/imgs/2022/04/28/4e65fc04cdb78860.png" alt="image-20220107142620959"></p><h4 id="大对象直接进入老年代"><a href="#大对象直接进入老年代" class="headerlink" title="大对象直接进入老年代"></a>大对象直接进入老年代</h4><blockquote><p>大对象指的是需要连续内存空间的Java对象，Hotspot虚拟机提供了<code>-XX：PretenureSizeThreshold</code>参数来设定界限，当超过该值时直接进入老年代分配，减少Eden区与Survivor区之间复制带来的开销</p><p>注：该参数只支持Serial和ParNew两款新生代收集器</p></blockquote><p><img src="https://s3.bmp.ovh/imgs/2022/04/28/41fc21e239db47fe.png" alt="image-20220105150929288"></p><h4 id="长期存活对象进入老年代"><a href="#长期存活对象进入老年代" class="headerlink" title="长期存活对象进入老年代"></a>长期存活对象进入老年代</h4><blockquote><p>对象通常在Eden区里诞生，如果经过第一次Minor GC后仍然存活，并且能被Survivor(From)容纳的话，该对象会被移动到Survivor(From)空间中，并且将其对象年龄设为1岁。对象在Survivor(From)区中每熬过一次Minor GC，年龄就增加1岁，当它的年龄增加到一定程度（默认为15），就会被晋升到老年代中。对象晋升老年代的年龄阈值，可以通过参数<code>-XX：MaxTenuringThreshold</code>设置</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Hello</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> _1MB <span class="token operator">=</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">;</span>    <span class="token comment">/**     * VM参数：-verbose:gc -Xms20M -Xmx20M -Xmn10M -XX:+PrintGCDetails -XX:SurvivorRatio=8 -XX:MaxTenuringThreshold=1 -XX:+PrintTenuringDistribution     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> allocation1<span class="token punctuation">,</span> allocation2<span class="token punctuation">,</span> allocation3<span class="token punctuation">;</span>        allocation1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span>_1MB <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        allocation2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">4</span> <span class="token operator">*</span> _1MB<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">// 触发一次MinorGC</span>        allocation3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">4</span> <span class="token operator">*</span> _1MB<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">// 无直接引用</span>        allocation3 <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token comment">// 重新分配内存，再次触发MinorGC</span>        allocation3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">4</span> <span class="token operator">*</span> _1MB<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p>设置参数<code>-XX：MaxTenuringThreshold=1</code>：</p><p><img src="https://s3.bmp.ovh/imgs/2022/04/28/f64fe98dc6d7a73b.png" alt="image-20220105165306862"></p><p>分析日志内容，第一次触发MinorGc：</p><ul><li>本次GC新生代减少容量(包含存活对象转移和被回收的对象)：<code>4859K-404K=4455K</code></li><li>堆区回收后减少容量(被回收的对象)：<code>4859K-4500K=359K</code></li><li>新生代转移到老年代对象：<code>4455K-359K=4096K</code></li></ul><p>上述代码执行到<code>allocation3 = new byte[4 * _1MB];</code>时，因为Eden空间不足，由此触发MinorGC，然后由于allocation1，allocation2都是强引用不会被回收，只能进入Survivor空间中，但其空间只能够存下allocation1和一些系统对象，allocation2就通过分配担保机制进入老年代，至此，Eden空间足够分配给allocation3</p><p><img src="https://s3.bmp.ovh/imgs/2022/04/28/fce382d9e7006569.png" alt="image-20220105194111630"></p><p>第二次触发MinorGC：</p><ul><li>本次GC新生代减少容量(包含存活对象转移和被回收的对象)：<code>4500K-0=4500K</code></li><li>堆区回收后减少容量(被回收的对象)：<code>8596K-4500K=4096K</code></li><li>新生代转移到老年代对象：<code>4500K-4096K=404K</code></li></ul><p>首先，<code>allocation3 = null;</code>无直接引用，等待下一次GC回收，但其依然会占据4M空间。接着，<code>allocation3 = new byte[4 * _1MB];</code>重新分配内存，<code>4M+4M=8M</code>（因为还有一些其它对象会占据空间），再次触发MinorGC，而因为参数<code>-XX：MaxTenuringThreshold=1</code>，所以原来失去直接引用的allocation3所占用的空间会被回收，而allocation1因达到年龄，晋升老年代</p><p><img src="https://s3.bmp.ovh/imgs/2022/04/28/fa8876638d884d5e.png" alt="image-20220105194911079"></p><hr><p>设置参数<code>-XX：MaxTenuringThreshold=15</code>：</p><p>整个流程和上述的差不多，主要是第二次MinorGC，Survivor（From）区中的对象（404K）会因为未达到年龄，而不会晋升到老年代，因此新生代依旧占用404K的空间</p><p><img src="https://s3.bmp.ovh/imgs/2022/04/28/b6e2b75d8510c60c.png" alt="image-20220105202454677"></p><h4 id="动态对象年龄判断"><a href="#动态对象年龄判断" class="headerlink" title="动态对象年龄判断"></a>动态对象年龄判断</h4><blockquote><p>如果在Survivor空间中相同年龄所有对象大小的总和大于Survivor空间的一半，年龄大于或等于该年龄的对象就可以直接进入老年代，无须等到-XX：MaxTenuringThreshold中要求的年龄</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Hello</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> _1MB <span class="token operator">=</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">;</span>    <span class="token comment">/**     * VM参数：-verbose:gc -Xms20M -Xmx20M -Xmn10M -XX:+PrintGCDetails -XX:SurvivorRatio=8 -XX:MaxTenuringThreshold=15 -XX:+PrintTenuringDistribution     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> allocation1<span class="token punctuation">,</span> allocation2<span class="token punctuation">,</span> allocation3<span class="token punctuation">,</span> allocation4<span class="token punctuation">;</span>        <span class="token comment">// allocation1 + allocation2 + 其它对象 > survivor空间（1M）</span>        allocation1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span>_1MB <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        allocation2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span>_1MB <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        allocation3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">4</span> <span class="token operator">*</span> _1MB<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">// 第一次MinorGC</span>        allocation4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">4</span> <span class="token operator">*</span> _1MB<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">// 无直接引用</span>        allocation4 <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token comment">// 第二次MinorGC</span>        allocation4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">4</span> <span class="token operator">*</span> _1MB<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>设置参数<code>-XX：MaxTenuringThreshold=15</code>，图解分析一下：</p><ul><li><p>第一次MinorGC：</p><ul><li>本次GC新生代减少容量(包含存活对象转移和被回收的对象)：<code>5115K-660K=4855K</code></li><li>堆区回收后减少容量(被回收的对象)：<code>5115K-4756K=359K</code></li><li>新生代转移到老年代对象：<code>4855K-359K=4496K</code></li></ul><p><img src="https://s3.bmp.ovh/imgs/2022/04/28/fb0413ba7fc94fe8.png" alt="image-20220107104959421"></p></li><li><p>第二次MinorGC：</p><ul><li>本次GC新生代减少容量(包含存活对象转移和被回收的对象)：<code>4756K-0K=4756K</code></li><li>堆区回收后减少容量(被回收的对象)：<code>8852K-4756K=4096K</code></li><li>新生代转移到老年代对象：<code>4756K-4096K=660K</code></li></ul><p><img src="https://s3.bmp.ovh/imgs/2022/04/28/13ac49e62974597f.png" alt="image-20220107104907315"></p></li></ul><p>最终运行结果：</p><p><img src="https://s3.bmp.ovh/imgs/2022/04/28/511c1d2ef758782c.png" alt="image-20220105202549474"></p><h4 id="空间分配担保"><a href="#空间分配担保" class="headerlink" title="空间分配担保"></a>空间分配担保</h4><blockquote><p>在发生Minor GC之前，虚拟机必须先检查老年代最大可用的连续空间是否大于新生代所有对象总空间，如果这个条件成立，那这一次Minor GC可以确保是安全的。如果不成立，则虚拟机会先查看-XX：HandlePromotionFailure参数的设置值是否允许担保失败（Handle Promotion Failure）；如果允许，那会继续检查老年代最大可用的连续空间是否大于历次晋升到老年代对象的平均大小，如果大于，将尝试进行一次Minor GC，尽管这次Minor GC是有风险的；如果小于，或者-XX：HandlePromotionFailure设置不允许冒险，那这时就要改为进行一次Full GC</p><p>注：所谓<code>冒险</code>，指的是赌概率，赌的是与老年代历史平均值之间的大小比较，若担保失败，依然无法避免Full GC</p><p>注：JDK 6 Update 24之后的规则变为只要老年代的连续空间大于新生代对象总大小或者历次晋升的平均大小，就会进行Minor GC，否则将进行Full GC</p></blockquote><p><img src="https://s3.bmp.ovh/imgs/2022/04/28/8cc0903a74aa92cf.png" alt="image-20220107140517420"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Hello</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> _1MB <span class="token operator">=</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">;</span>    <span class="token comment">/**     * VM参数：-Xms20M -Xmx20M -Xmn10M -XX:+PrintGCDetails -XX:SurvivorRatio=8 -XX:-HandlePromotionFailure     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> allocation1<span class="token punctuation">,</span> allocation2<span class="token punctuation">,</span> allocation3<span class="token punctuation">,</span> allocation4<span class="token punctuation">,</span> allocation5<span class="token punctuation">,</span> allocation6<span class="token punctuation">,</span> allocation7<span class="token punctuation">;</span>        allocation1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> _1MB<span class="token punctuation">]</span><span class="token punctuation">;</span>        allocation2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> _1MB<span class="token punctuation">]</span><span class="token punctuation">;</span>        allocation3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> _1MB<span class="token punctuation">]</span><span class="token punctuation">;</span>        allocation1 <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token comment">// 第一次触发MinorGC</span>        allocation4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> _1MB<span class="token punctuation">]</span><span class="token punctuation">;</span>        allocation5 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> _1MB<span class="token punctuation">]</span><span class="token punctuation">;</span>        allocation6 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> _1MB<span class="token punctuation">]</span><span class="token punctuation">;</span>        allocation4 <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        allocation5 <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        allocation6 <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        allocation7 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> _1MB<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s3.bmp.ovh/imgs/2022/04/28/791f93aad424482d.png" alt="image-20220107141551583"></p>]]></content>
      
      
      <categories>
          
          <category> 深入理解Java虚拟机系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 深入理解Java虚拟机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>呼吁暂停训练比GPT4更强大的AI系统</title>
      <link href="/2023/06/01/hu-xu-zan-ting-xun-lian-bi-gpt4-geng-qiang-da-de-ai-xi-tong/"/>
      <url>/2023/06/01/hu-xu-zan-ting-xun-lian-bi-gpt4-geng-qiang-da-de-ai-xi-tong/</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文地址：</p><p><a href="https://mp.weixin.qq.com/s/yXK7lgnWuQkM1d9209RtPg">https://mp.weixin.qq.com/s/yXK7lgnWuQkM1d9209RtPg</a></p></blockquote><h1 id="Pause-Giant-AI-Experiments-An-Open-Letter"><a href="#Pause-Giant-AI-Experiments-An-Open-Letter" class="headerlink" title="Pause Giant AI Experiments: An Open Letter"></a><strong>Pause Giant AI Experiments: An Open Letter</strong></h1><hr><p>AI systems with human-competitive intelligence can pose profound risks to society and humanity, as shown by extensive research and acknowledged by top AI labs. As stated in the widely-endorsed Asilomar AI Principles, Advanced AI could represent a profound change in the history of life on Earth, and should be planned for and managed with commensurate care and resources. Unfortunately, this level of planning and management is not happening, even though recent months have seen AI labs locked in an out-of-control race to develop and deploy ever more powerful digital minds that no one – not even their creators – can understand, predict, or reliably control.</p><p>Contemporary AI systems are now becoming human-competitive at general tasks, and we must ask ourselves: Should we let machines flood our information channels with propaganda and untruth? Should we automate away all the jobs, including the fulfilling ones? Should we develop nonhuman minds that might eventually outnumber, outsmart, obsolete and replace us? Should we risk loss of control of our civilization? Such decisions must not be delegated to unelected tech leaders. Powerful AI systems should be developed only once we are confident that their effects will be positive and their risks will be manageable. This confidence must be well justified and increase with the magnitude of a system’s potential effects. OpenAI’s recent statement regarding artificial general intelligence, states that “At some point, it may be important to get independent review before starting to train future systems, and for the most advanced efforts to agree to limit the rate of growth of compute used for creating new models.” We agree. That point is now.</p><p>Therefore, we call on all AI labs to immediately pause for at least 6 months the training of AI systems more powerful than GPT-4. This pause should be public and verifiable, and include all key actors. If such a pause cannot be enacted quickly, governments should step in and institute a moratorium.</p><p>AI labs and independent experts should use this pause to jointly develop and implement a set of shared safety protocols for advanced AI design and development that are rigorously audited and overseen by independent outside experts. These protocols should ensure that systems adhering to them are safe beyond a reasonable doubt. This does not mean a pause on AI development in general, merely a stepping back from the dangerous race to ever-larger unpredictable black-box models with emergent capabilities.</p><p>AI research and development should be refocused on making today’s powerful, state-of-the-art systems more accurate, safe, interpretable, transparent, robust, aligned, trustworthy, and loyal.</p><p>In parallel, AI developers must work with policymakers to dramatically accelerate development of robust AI governance systems. These should at a minimum include: new and capable regulatory authorities dedicated to AI; oversight and tracking of highly capable AI systems and large pools of computational capability; provenance and watermarking systems to help distinguish real from synthetic and to track model leaks; a robust auditing and certification ecosystem; liability for AI-caused harm; robust public funding for technical AI safety research; and well-resourced institutions for coping with the dramatic economic and political disruptions (especially to democracy) that AI will cause.</p><p>Humanity can enjoy a flourishing future with AI. Having succeeded in creating powerful AI systems, we can now enjoy an “AI summer” in which we reap the rewards, engineer these systems for the clear benefit of all, and give society a chance to adapt. Society has hit pause on other technologies with potentially catastrophic effects on society. We can do so here. Let’s enjoy a long AI summer, not rush unprepared into a fall.</p><hr><h2 id="生词记录"><a href="#生词记录" class="headerlink" title="生词记录"></a>生词记录</h2><blockquote><p><em>pose</em> 姿势；造成，引起；提出问题，质询</p><p><em>endorse</em> 赞同，支持，认可；宣传，代言；（在支票背面）签名，背书（指的是政治领域为某人发声，支持某人或某事）</p><p><em>commensurate</em> 相当的，相称的</p><p><em>be locked in sth</em> 被···困住，受到···阻碍；陷入···停滞不前</p><p><em>propaganda</em> 宣传，鼓吹</p><p><em>fulfilling</em> 令人愉快满足的</p><p><em>outnumber</em> 在数量上超过，比···多</p><p><em>outsmart</em> 在智力上超过，胜过；智胜</p><p><em>obsolete</em> 过时的，废弃的</p><p><em>delegate</em> 委派，委托，授权</p><p><em>magnitude</em> 巨大，重大，重要性；震级</p><p><em>verifiable</em> 可证实的，可证明的</p><p><em>enact</em> 通过，实施，指定；表演；发生</p><p><em>step in</em> 插手，介入</p><p><em>institute</em> 建立，制定；研究所，学院</p><p><em>constitute</em> 组成，构成，被视作</p><p><em>moratorium</em> 暂停，中止</p><p><em>protocol</em> 规程，协议；礼仪，外交礼节；条约，公约，议定书</p><p><em>rigorously</em> 严密地，严谨地，缜密地；严格地，严厉地</p><p><em>audit</em> 审计，审查</p><p><em>oversee</em> 监督，监察</p><p><em>emergent</em> 新兴的，发展初期的</p><p><em>state-of-the-art</em> 先进的</p><p><em>interpretable</em> 可解释的，可阐明的</p><p><em>robust</em> 强劲的，富有活力的，强健的，强壮的</p><p><em>oversight</em> 监管，监督；失察，疏忽</p><p><em>provenance</em> 起源，出处</p><p><em>watermark</em> 水印</p><p><em>synthetic</em> 人造的，合成的</p><p><em>catastrophic</em> 灾难性的，糟糕的</p></blockquote><h2 id="个人感悟"><a href="#个人感悟" class="headerlink" title="个人感悟"></a>个人感悟</h2><blockquote><p>AI发展太快，监管机制尚未完善，暂停一段时间或是好事，没人能知道电影中AI觉醒的事件是否真会发生，若真到那时再考虑安全问题恐怕就来不及了吧。（<del>细思极恐</del>）</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 每日阅读分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 英语提升 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>原来哭真的有用</title>
      <link href="/2023/06/01/yuan-lai-ku-zhen-de-you-yong/"/>
      <url>/2023/06/01/yuan-lai-ku-zhen-de-you-yong/</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文地址：</p><p><a href="https://mp.weixin.qq.com/s/qViwWPFMEhN_Y2HJKdYRiA">https://mp.weixin.qq.com/s/qViwWPFMEhN_Y2HJKdYRiA</a></p></blockquote><h1 id="Is-having-a-cry-good-for-our-health"><a href="#Is-having-a-cry-good-for-our-health" class="headerlink" title="Is having a cry good for our health?"></a>Is having a cry good for our health?</h1><hr><p>Until recently, scientists and authors were at stark disagreement over the point of crying. In King Henry VI, Shakespeare wrote, “to weep is to make less the depth of grief”, and the American writer Lemony Snicket said “unless you have been very, very lucky, you know that a good, long session of weeping can often make you feel better, even if your circumstances have not changed one bit”.</p><p>Charles Darwin, on the other hand, thought that the production of tears (the act of crying notwithstanding) was merely a useless side effect of the way that the muscles around the eye worked. For him, those muscles had to contract from time to time so that they didn’t overflow with blood; the expulsion of tears was simply an unintended consequence of that evolved physiological process. (He did acknowledge that crying could help young infants attract the attention of their parents, though.)</p><p>We now know that crying – at least, the sort that adults do – is a complex physiological response to some kind of emotional stimulus. The most prominent feature is of course the shedding of tears, but it also includes changes in facial expressions and breathing patterns. “Sobbing,” for example, refers to the rapid inhalation and exhalation that so often accompanies crying.</p><p>From a scientific perspective, that means crying is different from the production of tears in response to a chemical irritant, like when you accidentally rub your eyes after eating spicy foods. Even the tears themselves are different. In 1981, Minnesota psychiatrist William H Frey II discovered that tears brought on by sad movies had more protein in them than those that flowed in response to some freshly chopped onions.</p><p>As anyone who has attended a side-splitting comedy act or listened to a groom read wedding vows to his bride, emotional tears aren’t limited to feelings of melancholy. But while all of us are familiar with the feelings that are associated with crying, whether for joy or sorrow, there’s not much that’s known about why we do it as adults – but there are plenty of ideas.</p><p>One idea is that adult crying isn’t actually all that different from the sort that babies do, at least when it comes to its social nature. In other words, perhaps weeping is a literal cry for attention, a means of soliciting support and help from our friends when we need it the most. It’s a way of communicating our inner emotional state at a time when we may not be able to fully articulate it.</p><p>While this may explain some forms of crying, many researchers have found that adults often cry when they’re completely alone. Another possibility that is that crying might serve as a means of “secondary appraisal,” helping people to realise just how upset they are, a way of helping them understand their own feelings – it’s a provocative idea, with at least some evidence to support it, in some cases.</p><p>And then there’s the notion of catharsis: crying provides for relief from emotionally stressful situations. The idea is consistent not only with the words of Shakespeare, but with the Roman poet Ovid, who wrote: “It is a relief to weep; grief is satisfied and carried off by tears.” The Greek philosopher Aristotle also wrote that crying “cleanses the mind”. In a 1986 study of popular US magazines and newspapers, one psychologist found that 94% of articles about crying suggested that it helped to relieve psychological tension.</p><p>Indeed, a 2008 study of nearly 4,300 young adults from 30 countries found that most reported improvements in both their mental and physical wellbeing after a bout of crying, but not all. Some reported no change after a crying session, and some even said that they felt worse afterwards.</p><p>The difference seems to lie in the social context: if a person felt embarrassed about crying in public, for example, they might feel less resolved than if they cried alone or with a single close friend. The study also found that when people tried to suppress or hide their crying, they also wound up feeling less relief afterwards.</p><p>So the notion of having “a good cry” is not without merit, but it seems to necessitate the right kind of social support to be effective. Which means, in the end, that adults might just cry for much the same reason as human infants: to seek help from their friends and family.</p><hr><h2 id="生词记录"><a href="#生词记录" class="headerlink" title="生词记录"></a>生词记录</h2><blockquote><p><em>stark</em> (对比)鲜明的，明显的；严酷的，赤裸裸的，真实而无法回避的</p><p><em>weep</em> 哭泣，流泪</p><p><em>circumstance</em> 情况，条件，情形；客观环境，命运</p><p><em>notwithstanding</em> 尽管</p><p><em>contract</em> 合同，契约；收缩</p><p><em>overflow</em> 溢出，泛滥；装不下，挤得太满；人满为患，挤满</p><p><em>expulsion</em> 排出，喷出；驱逐，开除，赶走</p><p><em>evolve</em> 演变，进化</p><p><em>physiological</em> 生理学的</p><p><em>prominent</em> 重要的，著名的，杰出的；突出的，显眼的</p><p><em>shed</em> 棚子，小屋；使脱落，使掉落；去除，摆脱</p><p><em>sob</em> 呜咽，抽泣</p><p><em>inhalation</em> 吸入，吸气</p><p><em>exhalation</em> 呼气，呼出</p><p><em>irritant</em> 刺激物，令人烦恼的事物，造成麻烦的事物</p><p><em>rub</em> 摩擦，擦，搓</p><p><em>psychiatrist</em> 精神病学家</p><p><em>side-splitting</em> 令人捧腹的，极为有趣的</p><p><em>groom</em> 培养，培训；新郎</p><p><em>bride</em> 新娘</p><p><em>melancholy</em> 忧愁，忧伤</p><p><em>literal</em> 字面的，根本的</p><p><em>solicit</em> 招徕（嫖客）；拉客</p><p><em>articulate</em> 明确表达</p><p><em>provocative</em> 激进的，使人生气的，挑衅的，煽动的；引发思考的，启发性的</p><p><em>catharsis</em> 情感的宣泄，精神净化</p><p><em>cleanse</em> 清洗，使清洁</p><p><em>bout</em> 一场，一阵，一段，（疾病）发作</p><p><em>resolve</em> 化解，决心，解决</p><p><em>wind sth up</em> 使结束，关闭，使停业</p></blockquote><h2 id="文章概述"><a href="#文章概述" class="headerlink" title="文章概述"></a>文章概述</h2><blockquote><p>放声大哭对情绪释放很有用，成年人的哭泣大部分和婴儿一样，都是想获得朋友或家人的关注和帮助</p></blockquote><h2 id="个人感悟"><a href="#个人感悟" class="headerlink" title="个人感悟"></a>个人感悟</h2><blockquote><p>虽说男儿有泪不轻弹，只因未到伤心处。看来”男人哭吧哭吧不是罪”唱的还是挺正确的。</p><p>遇到伤心事别憋着，找个地方或朋友放声大哭，当别人说你哭有什么用的时候，你就把这文章甩他脸上，告诉他，哭(╥╯^╰╥)是真的有用的。😂</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 每日阅读分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 英语提升 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>印度人口超越中国</title>
      <link href="/2023/06/01/yin-du-ren-kou-chao-yue-zhong-guo/"/>
      <url>/2023/06/01/yin-du-ren-kou-chao-yue-zhong-guo/</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文地址：<a href="https://mp.weixin.qq.com/s/4-TvzjkUt10mhQVy2Mg-hA">https://mp.weixin.qq.com/s/4-TvzjkUt10mhQVy2Mg-hA</a></p></blockquote><h1 id="Will-This-Be-the-‘Indian-Century’-Four-Key-Questions"><a href="#Will-This-Be-the-‘Indian-Century’-Four-Key-Questions" class="headerlink" title="Will This Be the ‘Indian Century’? Four Key Questions"></a><strong>Will This Be the ‘Indian Century’? Four Key Questions</strong></h1><hr><p>It is a turning point the world has not seen in centuries, and is unlikely to see again for centuries more.</p><p>India is on the cusp of passing China in population, according to the latest U.N. estimates. At 1.428 billion people, India has already edged past China’s mainland, the data show.</p><p>With China’s population declining, the margin between the two countries will only grow as India becomes the most populous country in history. What had long been the world’s largest democracy is now, simply, the world’s largest everything.</p><p><strong>Can India take advantage of its size?</strong></p><p>India’s growth curve is the envy of aging countries like China, but the demographic future differs by region of the country.</p><p>There was a time when India and China wanted to suppress the rate of population growth, by reducing the number of births. That era has long receded.</p><p>The gentle slope of the demographic curve propelling India into first place looks enviable to the many developed nations that are rapidly aging. Indians are living longer, and the number of babies being born each year has barely budged.</p><p>In some of India’s regions, the population is still growing too fast for their economies, producing many more able-bodied young people than there are jobs to occupy them. In other parts, however – especially the better-developed south, where women have more education and family planning programs have proved successful – the population has already peaked. There, young families rarely produce more than two children.</p><p>The physical needs of nearly a billion and a half people are imposing a terrible strain on India’s environment. But as the country lifts itself from deepest poverty, it is no longer subject to the famines of old. Instead, its future as far and away the world’s biggest work force is leading some to hope for an “Indian century” in the making.</p><p><strong>Does India stand to reap a “demographic dividend”?</strong></p><p>Having a fast-expanding young work force could be a big opportunity — or a disaster.</p><p>India is a country primed to work. More than two-thirds of all Indians are between the ages of 15 and 59. The country’s ratio of children and retirees to working-age adults is remarkably low.</p><p>But this opportunity comes with huge challenges. That “demographic dividend” could instead become something like a disaster. In some recent years, India has squeaked past China to claim the title of fastest-growing major economy. But it has never expanded fast enough to produce sufficient formal employment for everyone. The country needs about nine million new jobs every year just to keep pace; the annual shortfall helps relegate many to India’s old standby, agricultural work.</p><p>Most people in India lack the means to be “unemployed” – in the work force but without a job. Underemployment is the more discreet danger. Wages have been stagnant for eight years, according to an analysis by Jean Drèze, an economist at Delhi University. Economic growth without an equivalent increase in jobs makes India’s massively unequal society even more so, raising the potential for unrest.</p><p><strong>Can India get more women into the work force?</strong></p><p>Women work outside the home at lower rates in India than almost any other country, a huge roadblock for economic expansion.</p><p>India has one of the world’s lowest rates of formal employment for women: about one in five. China’s is almost double that rate, higher than the United States’ and the world average. An economy cannot meet its potential when it draws on the contributions of so few women.</p><p>Also worrisome, the rate has actually declined in India even as most of the country’s economic conditions have improved. The explanation favored by economists is that the jobs most women take are so poorly paid that as soon as a family can do without the extra income, wives stop working outside the home.</p><p>That does not mean women in India do not work hard. They are a visible presence in the 41 percent of society that is still in agriculture, and they carry nearly all of the household burdens. But so long as these women remain outside the formal work force, they cannot enter its most productive categories, in industry and services. Improved access to family planning, better education, efforts to change societal attitudes and measures to ensure women’s safety could help more women take on formal work.</p><p><strong>Can India chart its own path to prosperity?</strong></p><p>India’s economic story will not be a repetition of China’s — which could offer advantages.</p><p>Western countries are now rushing to embrace India as an alternative to China. But the obstacles that have kept India from following the same program over the past 30 years remain in place: ineffective governance, insufficient infrastructure, and scanty spending on primary education and health.</p><p>A “Make in India” program championed by Prime Minister Narendra Modi, now in its eighth year, has been slow to take off.</p><p>India’s economic story, however it turns out, will not be a repetition of China’s. There are many ways in which India can rise, especially with industrial manufacturing no longer occupying the central role in the world economy that it once did.</p><p>Services now make up a huge and exciting part of the Indian economy, augmented by a low-cost digital infrastructure that India developed on its own. Other glimmers are also emerging: Chip makers are looking to India as a high-end substitute for China; online services are allowing millions of young Indians to work abroad without leaving home; and even life in India’s villages is becoming more urbanized by the year.</p><p>The only certainty about the new biggest country in the world is that it will be unlike any that came before it.</p><hr><h2 id="生词记录"><a href="#生词记录" class="headerlink" title="生词记录"></a>生词记录</h2><blockquote><p><em>on the cusp</em> 分界线</p><p><em>edge</em> 缓慢发展，徐徐移动；优势，优越之处</p><p><em>margin</em> 差数，差额</p><p><em>populous</em> 人口稠密的</p><p><em>demographic</em> 人口的，人口学的；族舞</p><p><em>recede</em> 逐渐远离，变得模糊，逐渐淡漠</p><p><em>slope</em> 山坡</p><p><em>budge</em> 使改变主意；使轻微移动</p><p><em>able-bodied</em> 体格健全的，强壮的</p><p><em>impose</em> 推行，强制实行；强加于；勉强，打扰，麻烦</p><p><em>strain</em> 压力，重负；品种；旋律，曲调</p><p><em>famine</em> 饥荒</p><p><em>squeak</em> 勉强通过，侥幸成功</p><p><em>relegate</em> 使贬职，使降级</p><p><em>discreet</em> 谨慎的，小心的</p><p><em>stagnant</em> 停滞的</p><p><em>roadblock</em> 路障</p><p><em>chart</em> 计划行动步骤，制定行动计划；上榜；图表，示意图</p><p><em>prosperity</em> 成功，繁荣，昌盛</p><p><em>scanty</em> 少量的，不足的，缺乏的</p><p><em>champion</em> 支持，声援，捍卫</p><p><em>augment</em> 提高，增大，加强</p><p><em>glimmer</em> 微弱的迹象，一丝，一线</p><p><em>substitute</em> 替代品；同···代替</p></blockquote><h2 id="个人感悟"><a href="#个人感悟" class="headerlink" title="个人感悟"></a>个人感悟</h2><blockquote><p>印度现在发展的如何，我不太了解，只知道我们平时都是在笑它恒河水如何能够“强身健体”，笑它“干净又卫生”😂</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 每日阅读分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 英语提升 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>准备好冒险了吗?</title>
      <link href="/2023/06/01/zhun-bei-hao-mou-xian-liao-ma/"/>
      <url>/2023/06/01/zhun-bei-hao-mou-xian-liao-ma/</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文地址：</p><p><a href="https://aliabdaal.com/newsletter/ready-for-an-adventure/">https://aliabdaal.com/newsletter/ready-for-an-adventure/</a></p></blockquote><h1 id="Ready-for-an-Adventure"><a href="#Ready-for-an-Adventure" class="headerlink" title="Ready for an Adventure?"></a>Ready for an Adventure?</h1><hr><p>Hey friends,</p><p>Here’s a quick tip I’ve been finding super helpful recently – every morning I try to ask myself: <em>what’s today’s adventure</em>?</p><p>Last Friday for example, I had to work on my book. But I felt pretty disengaged just sitting at home on the couch on my laptop. Then it hit me: I’ve always wanted to write a book. Shouldn’t I treat this like the adventure it is?</p><p>So what does an adventure look like? Definitely not me sitting at home in my pyjamas and dressing gown, hunched over on my laptop. So I left the house, went to a new coffee shop, sat by a sunny window, and made lots of progress on editing the second chapter of the book.</p><p><em>And it felt fun.</em></p><p>So, next time you’re feeling a bit meh about something, take 5 seconds to ask: <em>what would this look like if it was an adventure?</em> That simple reframing could make your whole day more enjoyable.</p><p>Have a great week!</p><p>Ali xx</p><h2 id="生词记录"><a href="#生词记录" class="headerlink" title="生词记录"></a>生词记录</h2><blockquote><p>disengage 脱离</p><p>Definitely 肯定，绝对</p><p>pyjamas 睡衣</p><p>hunch 预感，直觉，驼背</p><p>reframing 重构</p></blockquote><h2 id="文章概述"><a href="#文章概述" class="headerlink" title="文章概述"></a>文章概述</h2><blockquote><p>作者曾在家中写书时觉得十分无聊，突然想到将其当成冒险活动一样对待，就不再觉得无趣，反而动力十足。</p></blockquote><h2 id="个人感悟"><a href="#个人感悟" class="headerlink" title="个人感悟"></a>个人感悟</h2><blockquote><p>个人感觉就是告诉我们在做某些比较艰难或无趣的工作时，可以将其看做是打游戏升级（冒险活动），这样就会动力十足，效率MAX，从而学会享受工作。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 每日阅读分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 英语提升 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>保持创作力的秘笈</title>
      <link href="/2023/06/01/bao-chi-chuang-zuo-li-de-mi-ji/"/>
      <url>/2023/06/01/bao-chi-chuang-zuo-li-de-mi-ji/</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文地址：</p><p><a href="https://aliabdaal.com/newsletter/the-secret-to-creativity/">https://aliabdaal.com/newsletter/the-secret-to-creativity/</a></p></blockquote><h1 id="The-Secret-to-Creativity"><a href="#The-Secret-to-Creativity" class="headerlink" title="The Secret to Creativity"></a>The Secret to Creativity</h1><hr><p>Hey friends,</p><p>Last week I finished the book <a href="https://geni.us/Jpe4">‘Unreasonable Hospitality’ by Will Guidara</a>. If you’re not familiar with him, Will Guidara is former owner of some of New York’s most expensive restaurants, including one which was recently named the best restaurant in the world.</p><p>The book’s packed full of interesting ideas, but his approach to creativity was something that particularly stood out to me.</p><p>Now, I’ve never really considered myself to be a creative person – I’ve got friends who can seemingly pull amazing ideas out of thin air, whereas I feel like I’ve got to rely heavily on external sources of inspiration. Like, when I sit down to come up with ideas for something I usually turn to things I’ve read, watched, or listened to so I can gradually piece things together and connect the dots in my own way.</p><p>Creativity just isn’t a spontaenous process for me, which is how I’ve always thought it should be.</p><p>But, in the book, Will talks about creativity as something that’s far more systematic than spontaneous. Basically, he says that the people we think are most creative are the ones that have a <em>systematic process</em> behind that creativity.</p><p>This was a very liberating idea because I’ve had this limiting belief for some time that ‘I’m not a very creative person’. But, if we think of creativity as being a systematic process, rather than a spontaneous process, then this isn’t true at all.</p><p>For example, I’ve got systematic processes for my creativity when it comes to making YouTube videos (which we teach our students in the <a href="https://academy.aliabdaal.com/">Part-Time YouTuber Academy</a> – enrolment closes on Friday 17 March btw 😉) and systematic processes for thinking of business ideas (which involves journalling and asking myself various questions).</p><p>And although these processes don’t look that creative, they’re responsible for the consistent creative output that has helped me to create hundreds of videos and grow a multi-million dollar business over the last few years.</p><p>So, the takeaway here is that creativity is an active process.</p><p>As William Faulkner once said, ‘I only write when inspiration strikes. Fortunately it strikes at nine every morning.’</p><p>The point is, the only way to be properly creative is to show up and put in the work.</p><p>So, if you’re ever held back by the limiting belief that ‘you’re not creative enough to do X’, realise that the way you become more creative is to stop waiting for inspiration to strike and start taking action.</p><p>Have a great week!</p><p>Ali xx</p><hr><h2 id="生词记录"><a href="#生词记录" class="headerlink" title="生词记录"></a>生词记录</h2><blockquote><p><em>inspiration</em> 鼓舞，启示，灵感</p><p><em>spontaenous</em> 自发的</p><p><em>liberate</em> 解放</p><p><em>consistent</em> 持续，一致，连贯</p></blockquote><h2 id="文章概述"><a href="#文章概述" class="headerlink" title="文章概述"></a>文章概述</h2><blockquote><p>作者曾经陷入误区，即没有足够的灵感来临时，不知如何去创作，他觉得自己不是一个有创作能力的人，陷入自我怀疑状态。在读了某本书后幡然醒悟，不再受其局限。</p></blockquote><h2 id="个人感悟"><a href="#个人感悟" class="headerlink" title="个人感悟"></a>个人感悟</h2><blockquote><p>行胜于言，与其在此焦虑，不如马上行动，不要等待机会，而在行动中创造机会。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 每日阅读分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 英语提升 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>你应该免费工作吗？</title>
      <link href="/2023/06/01/ni-ying-gai-mian-fei-gong-zuo-ma/"/>
      <url>/2023/06/01/ni-ying-gai-mian-fei-gong-zuo-ma/</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文地址:</p><p><a href="https://aliabdaal.com/newsletter/should-you-work-for-free/">https://aliabdaal.com/newsletter/should-you-work-for-free/</a></p></blockquote><h1 id="Should-You-Work-For-Free"><a href="#Should-You-Work-For-Free" class="headerlink" title="Should You Work For Free?"></a>Should You Work For Free?</h1><hr><p>Hey friends,</p><p>I interviewed writer extraordinaire Nicolas Cole on my <a href="https://www.youtube.com/@DeepDivewithAliAbdaal/featured">Deep Dive podcast</a> the other day. And we got talking about ‘the return-on-investment (ROI) on free work’.</p><p>See, most people make the mistake of <strong>charging too early</strong> when they’re breaking into a new industry (eg as a copywriter or video editor).</p><p>That builds a barrier: ‘you have to pay $X to work with me’. So they end up competing with thousands of other freelancers on Upwork or Fiverr, and 99% of potential clients never see their work.</p><p>The smarter alternative is to work for free – but be strategic about it.</p><p>Draw up a list of dream collaborators.</p><p>Then send out sample blogs, video edits, or pieces of graphic design you’ve made <strong>especially for them,</strong> for free. Post it on social media as well, saying ‘check out this cool thing I made for X’.</p><p>If an influential person sees work you did for them and really likes it, I almost guarantee they’ll offer to pay for more.</p><iframe id="twitter-widget-0" scrolling="no" frameborder="0" allowtransparency="true" allowfullscreen="true" class="custom-cursor-default-hover" title="Twitter Tweet" src="https://platform.twitter.com/embed/Tweet.html?dnt=false&amp;embedId=twitter-widget-0&amp;features=eyJ0ZndfdGltZWxpbmVfbGlzdCI6eyJidWNrZXQiOltdLCJ2ZXJzaW9uIjpudWxsfSwidGZ3X2ZvbGxvd2VyX2NvdW50X3N1bnNldCI6eyJidWNrZXQiOnRydWUsInZlcnNpb24iOm51bGx9LCJ0ZndfdHdlZXRfZWRpdF9iYWNrZW5kIjp7ImJ1Y2tldCI6Im9uIiwidmVyc2lvbiI6bnVsbH0sInRmd19yZWZzcmNfc2Vzc2lvbiI6eyJidWNrZXQiOiJvbiIsInZlcnNpb24iOm51bGx9LCJ0ZndfbWl4ZWRfbWVkaWFfMTU4OTciOnsiYnVja2V0IjoidHJlYXRtZW50IiwidmVyc2lvbiI6bnVsbH0sInRmd19leHBlcmltZW50c19jb29raWVfZXhwaXJhdGlvbiI6eyJidWNrZXQiOjEyMDk2MDAsInZlcnNpb24iOm51bGx9LCJ0ZndfZHVwbGljYXRlX3NjcmliZXNfdG9fc2V0dGluZ3MiOnsiYnVja2V0Ijoib24iLCJ2ZXJzaW9uIjpudWxsfSwidGZ3X3ZpZGVvX2hsc19keW5hbWljX21hbmlmZXN0c18xNTA4MiI6eyJidWNrZXQiOiJ0cnVlX2JpdHJhdGUiLCJ2ZXJzaW9uIjpudWxsfSwidGZ3X2xlZ2FjeV90aW1lbGluZV9zdW5zZXQiOnsiYnVja2V0Ijp0cnVlLCJ2ZXJzaW9uIjpudWxsfSwidGZ3X3R3ZWV0X2VkaXRfZnJvbnRlbmQiOnsiYnVja2V0Ijoib24iLCJ2ZXJzaW9uIjpudWxsfX0%3D&amp;frame=false&amp;hideCard=false&amp;hideThread=false&amp;id=1402415296338595842&amp;lang=en-gb&amp;origin=https%3A%2F%2Faliabdaal.com%2Fnewsletter%2Fshould-you-work-for-free%2F&amp;sessionId=22b6230179dd9012ceea8626f82107fa1017702b&amp;theme=light&amp;widgetsVersion=aaf4084522e3a%3A1674595607486&amp;width=550px" data-tweet-id="1402415296338595842" style="box-sizing: border-box; border: 0px; color: rgb(51, 51, 51); font-family: system-ui, -apple-system, &quot;Segoe UI&quot;, Roboto, &quot;Helvetica Neue&quot;, &quot;Noto Sans&quot;, &quot;Liberation Sans&quot;, Arial, sans-serif, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;, &quot;Segoe UI Symbol&quot;, &quot;Noto Color Emoji&quot;; font-size: 16px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: -0.32px; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(231, 231, 231); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; position: static; visibility: visible; width: 550px; height: 761px; display: block; flex-grow: 1;"></iframe><p>If a video editor turned one of my full-length videos into an amazing YouTube Short for free, I’d <strong>throw money</strong> at them to produce more.</p><p>But most people don’t realise this.</p><p>So they send generic emails saying ‘hi, I’d like to work with you, my rate is X’. And these emails get ignored, because I just don’t have the time to get into a long email discussion and look through someone’s portfolio.</p><p>Now, a lot of people say ‘never, ever work for free, people will take advantage.’ And I 100% agree that if a sketchy person <strong>asks</strong> you to ‘write a few blog posts for free so I can see how good you are’, you should say ‘no’.</p><p>But if you’re <strong>strategic</strong> about doing free work (and good at what you do), I promise that the money &amp; collaborations will start flooding in.</p><p>Have a great week!</p><p>Ali xx</p><hr><h2 id="生词记录"><a href="#生词记录" class="headerlink" title="生词记录"></a>生词记录</h2><blockquote><p><em>extraordinaire</em> 非凡的</p><p><em>return-on-investment (ROI)</em> 投资回报率</p><p><em>charge</em> 充电，收费，控制，主管，负责人</p><p><em>break into</em> 闯入</p><p><em>industry</em> 工业，行业</p><p><em>copywriter</em> 撰稿人，文案</p><p><em>barrier</em> 屏障，障碍</p><p><em>end up</em> 结果</p><p><em>Upwork or Fiverr</em> 这是两个自由职业的工作平台</p><p><em>collaborator</em> 合作人</p><p><em>generic</em> 泛型，通用，一般性</p><p><em>portfolio</em> 投资组合，作品集</p><p><em>take advantage</em> 利用，占便宜</p><p><em>sketchy</em> 心机，粗略，概略</p><p><em>flood</em> 洪水，洪灾，淹没</p></blockquote><h2 id="文章概述"><a href="#文章概述" class="headerlink" title="文章概述"></a>文章概述</h2><blockquote><p>作者在其播客中与一位名人探讨免费工作带来的回报率问题。作者认为不要过早地就设置收费门槛，应针对特定客户免费发布自己的作品，当得到欣赏时，钱财自然会送上门来。</p></blockquote><h2 id="个人感悟"><a href="#个人感悟" class="headerlink" title="个人感悟"></a>个人感悟</h2><blockquote><p>个人认为现在的社会过于浮躁，早已不是酒香不怕巷子深的时代，因此若有好作品或好创意都应该要抓住机会宣传，不设置收费门槛可以收获更多的关注，当你的创作足够优秀时候，影响力自然会扩大，金主也自然会找上门来。但对观众&#x2F;读者来说，也需要谨防被割韭菜，切勿掉进消费陷阱。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 每日阅读分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 英语提升 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>京东青龙面板从零搭建</title>
      <link href="/2023/06/01/jing-dong-qing-long-mian-ban-cong-ling-da-jian/"/>
      <url>/2023/06/01/jing-dong-qing-long-mian-ban-cong-ling-da-jian/</url>
      
        <content type="html"><![CDATA[<h2 id="一、虚拟机-x2F-服务器安装"><a href="#一、虚拟机-x2F-服务器安装" class="headerlink" title="一、虚拟机&#x2F;服务器安装"></a>一、虚拟机&#x2F;服务器安装</h2><p>Win10用户建议安装使用 <code>WSL2</code>（适用于Linux的Windows子系统）</p><p>安装使用教程可参考：<a href="https://www.jianshu.com/p/0aa542003b93">WSL2安装使用</a> , 或自行搜索引擎查找，此处不多赘述</p><p><img src="https://s3.bmp.ovh/imgs/2022/04/26/9a7109ebeb075cc8.png" alt="WSL成功安装界面"></p><h2 id="二、Docker安装"><a href="#二、Docker安装" class="headerlink" title="二、Docker安装"></a>二、Docker安装</h2><p>参考本站文章：<a href="https://zhouwyu.github.io/2021/10/08/Docker%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/">Docker快速入门</a> </p><p>只需参考<code>安装Docker</code>和<code>启动Docker</code>两个步骤即可</p><h2 id="三、青龙面板安装"><a href="#三、青龙面板安装" class="headerlink" title="三、青龙面板安装"></a>三、青龙面板安装</h2><ol><li>在WSL中运行以下内容：如果没安装默认会帮你安装，坐等片刻即可</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">-dit</span> <span class="token punctuation">\</span>   <span class="token parameter variable">-v</span> <span class="token environment constant">$PWD</span>/ql/config:/ql/config <span class="token punctuation">\</span>   <span class="token parameter variable">-v</span> <span class="token environment constant">$PWD</span>/ql/log:/ql/log <span class="token punctuation">\</span>   <span class="token parameter variable">-v</span> <span class="token environment constant">$PWD</span>/ql/db:/ql/db <span class="token punctuation">\</span>   <span class="token parameter variable">-p</span> <span class="token number">5700</span>:5700 <span class="token punctuation">\</span>   <span class="token parameter variable">--name</span> qinglong <span class="token punctuation">\</span>   <span class="token parameter variable">--hostname</span> qinglong <span class="token punctuation">\</span>   <span class="token parameter variable">--restart</span> always <span class="token punctuation">\</span>   whyour/qinglong:latest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s3.bmp.ovh/imgs/2022/04/26/bbcfe74af853d655.png" alt="青龙面板Docker安装成功界面"></p><ol start="2"><li><p>然后在浏览器中输入：<code>ip:5700</code> 即可访问到青龙面板</p><p>注意：该ip是你虚拟机（即WSL）中的ip，在虚拟机中可通过命令 <code>ifconfig</code> 获取</p><p>输入默认用户名（<code>admin</code>）和密码（<code>adminadmin</code>），正式进入后台（通知部分根据个人喜好设置，不过多赘述）</p></li></ol><p><img src="https://s3.bmp.ovh/imgs/2022/04/26/326303817fac71e9.png" alt="青龙面板后台界面"></p><ol start="3"><li><p>点击左侧栏定时任务，右上角添加任务</p><ul><li><p>任务名称随便写</p></li><li><p>拉取库命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ql repo https://ghproxy.com/https://github.com/zero205/JD_tencent_scf.git <span class="token string">"jd_|jx_|getJDCookie"</span> <span class="token string">"backUp|icon"</span> <span class="token string">"^jd[^_]|USER|sendNotify|sign_graphics_validate|JDJR"</span> <span class="token string">"main"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>定时规则：<code>0 0 0 * * *</code> （表示每天0点执行）</p><p>当然，熟悉定时表达式的你也可以修改成其它你喜欢的时间</p></li></ul></li></ol><p><img src="https://s3.bmp.ovh/imgs/2022/04/26/14d39b0fbe33b805.png" alt="新建定时任务界面"></p><ol start="4"><li><p>点击链接下载安装该软件：<a href="https://wwa.lanzoui.com/iDIrKtwioxg">https://wwa.lanzoui.com/iDIrKtwioxg</a></p></li><li><p>打开软件进行登录，目的是获取京东Cookie，建议关闭京东免密支付和打开支付密码等设置</p></li><li><p>然后点击左侧环境变量，右上角添加变量</p><ul><li>名称：JD_COOKIE</li><li>值：上述软件登录后下方可以直接复制值，粘贴进来即可</li></ul><p><img src="https://s3.bmp.ovh/imgs/2022/04/26/584662916b860826.png" alt="添加环境变量"></p></li><li><p>然后等它定时执行，或手动立即运行也可以</p></li><li><p>至此，全自动薅羊毛结束，感谢阅读</p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>五一堵得离谱</title>
      <link href="/2023/06/01/wu-yi-du-de-chi-pu/"/>
      <url>/2023/06/01/wu-yi-du-de-chi-pu/</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文地址：<a href="https://mp.weixin.qq.com/s?__biz=MzA5MjM3NDk5Ng==&mid=2650767689&idx=1&sn=90653d741d85a6633d62fab1a7527dca&chksm=886533f2bf12bae43c8909631ac26d236edb70916e2b36e7d0af59e7b0416da67c6d234e0b04&cur_album_id=1786181186118057992&scene=189#wechat_redirect">https://mp.weixin.qq.com/s?__biz=MzA5MjM3NDk5Ng==&amp;mid=2650767689&amp;idx=1&amp;sn=90653d741d85a6633d62fab1a7527dca&amp;chksm=886533f2bf12bae43c8909631ac26d236edb70916e2b36e7d0af59e7b0416da67c6d234e0b04&amp;cur_album_id=1786181186118057992&amp;scene=189#wechat_redirect</a></p></blockquote><h1 id="Goodbye-Covid-tourists-mob-China’s-most-popular-attractions-during-Labor-Day"><a href="#Goodbye-Covid-tourists-mob-China’s-most-popular-attractions-during-Labor-Day" class="headerlink" title="Goodbye Covid: tourists mob China’s most popular attractions during Labor Day"></a><strong>Goodbye Covid: tourists mob China’s most popular attractions during Labor Day</strong></h1><hr><p>From the Great Wall to Shanghai’s waterfront Bund, China’s most famous destinations are being mobbed during the Labor Day holiday by throngs of domestic tourists who are traveling again in huge numbers after the country ended three years of strict pandemic controls.</p><p>More than 240 million holidaymakers are expected to travel within or outside China’s mainland during the five-day break that began on Saturday, state media CCTV reported Monday, an increase of more than 20% from pre-pandemic levels in 2019.</p><p>Beijing received nearly 2 million tourists on the first day of the holiday, double the number from last year, according to the Beijing Cultural and Tourism Department.</p><p>In Shanghai, over 7 million tourists arrived in the city for the weekend, according to Shanghai Travel Data. Tickets to Shanghai Disneyland have been sold out until May 3, its website showed.</p><p>Police in the city of Xi’an, home to the terracotta warriors, have warned tourists to stay away from a busy shopping street sandwiched between two popular heritage sites.</p><p>On Saturday, China Railway logged a record 19.7 million railway trips with a predicted figure on Sunday of 18 million trips.</p><p>The sheer size of the crowds traveling across the nation has baffled some citizens.</p><p>“Why are there so many people? I can’t even get McDonald’s,” one internet user wrote on China’s Twitter-like Weibo.</p><p>Also known as the May Day holiday, the Labor Day break is one of three major annual holidays in China. The boom in tourism is likely to boost the Chinese economy.</p><p>Growth got off to a solid start in 2023, with the economy expanding by 4.5% in the first quarter, as consumers went on a spending spree that is continuing with the current holiday.</p><p>Mysterious cancelations</p><p>Chinese travel booking website Trip.com reported domestic bookings alone had risen by 700% compared to last year, when many restaurants and retailers were shut and travel was complicated due to the pandemic.</p><p>Accommodation was selling out this year weeks ahead of the holiday, pushing up prices, according to state media.</p><p>And there have been complaints of scalping.</p><p>Due to the high demand, according to state media, many Chinese tourists who had booked their accommodations early at low prices were later told to cancel their reservations, forcing them to have to book again at higher prices.</p><p>A wide range of excuses was given, they reported, with internet users taking to popular Chinese social media sites such as Weibo and Xiaohongshu to complain about their plight.</p><p>One user said on Xiaohongshu, an Instagram-like app, that she booked a place in Tianjin, a coastal city in northern China, for 1,777 yuan ($257) for five days.</p><p>Not long after she saw online that the price had soared by almost double, she was told by the owner that her booking had been canceled because of a Covid outbreak.</p><p>“But later that night, I went on to Meituan to check,” she wrote, referring to a online booking platform. “The place is still available.”</p><p>The situation has prompted state media and provincial law enforcement authorities to issue warnings on Weibo, the equivalent of Twitter in China.</p><p>“The unscrupulous practice of these bed-and-breakfasts is ugly,” said an opinion piece posted on the social media platform by state media People’s Daily.</p><hr><h2 id="生词记录"><a href="#生词记录" class="headerlink" title="生词记录"></a>生词记录</h2><blockquote><p><em>mob</em> 暴民，乱民；（人群）围住，围聚</p><p><em>waterfront</em> （城镇的）滨水区，水边地</p><p><em>bund</em> 堤岸，码头</p><p><em>throng</em> 人群，群众</p><p><em>pandemic</em> 流行病；大规模流行的，广泛蔓延的</p><p><em>terracotta</em> 赤褐色，土红色；赤陶土</p><p><em>warrior</em> 勇士，武士</p><p><em>terracotta warrior</em> 兵马俑</p><p><em>sandwich</em> 夹住，把···插入（两者之间）</p><p><em>heritage</em> 遗产</p><p><em>log</em> 行驶；记录</p><p><em>sheer</em> 完全的；陡峭的</p><p><em>baffle</em> 使困惑，使迷惑</p><p><em>boom</em> 增长，迅速发展；繁荣，增长期</p><p><em>boost</em> 改善，提高，促进</p><p><em>get off to a good start</em> 开门红，好的开端</p><p><em>spree</em> 玩乐，纵乐</p><p><em>accommodation</em> 住处，工作场所，停留处</p><p><em>scalp</em> 头皮；手下败将；倒卖（戏票等）</p><p><em>plight</em> 困境，窘境</p><p><em>unscrupulous</em> 不讲道德的，不择手段的，无耻的，不诚实的</p><p><em>bed and breakfast</em> （私人住宅或小旅馆提供的）住宿和早餐</p></blockquote><h2 id="个人感悟"><a href="#个人感悟" class="headerlink" title="个人感悟"></a>个人感悟</h2><p>三年疫情令很多人都憋得太久了，难得有一个小长假，自然疯狂起来。旅游的人疯了，各景点门票、酒店、饭店等价格就更加疯了。大家有钱的都去旅行，贫穷的我在家刷朋友圈也算去玩过了😄</p>]]></content>
      
      
      <categories>
          
          <category> 每日阅读分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 英语提升 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>为何挖呀挖呀挖如此上头</title>
      <link href="/2023/06/01/wei-he-wa-ya-wa-ya-wa-ru-ci-shang-tou/"/>
      <url>/2023/06/01/wei-he-wa-ya-wa-ya-wa-ru-ci-shang-tou/</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文地址：<a href="https://mp.weixin.qq.com/s/0VZ8GDqQvFPHVz3vVirWjQ">https://mp.weixin.qq.com/s/0VZ8GDqQvFPHVz3vVirWjQ</a></p></blockquote><h1 id="Why-are-nursery-rhymes-both-a-blessing-for-parents-and-important-to-children"><a href="#Why-are-nursery-rhymes-both-a-blessing-for-parents-and-important-to-children" class="headerlink" title="Why are nursery rhymes both a blessing for parents and important to children?"></a><strong>Why are nursery rhymes both a blessing for parents and important to children?</strong></h1><hr><p>As evening sets in and parents put their children to bed, many resort to singing nursery rhymes to lull them off to sleep.</p><p>But nursery rhymes are not just a good way of calming your kids, they also teach them a few things.</p><p>Dr Georgina Nutton, an early childhood education lecturer at Charles Darwin University (CDU), said nursery rhymes provided children with the building blocks of their first language.</p><p>She said the rhyming couplets found in songs like This Old Man, Hey Diddle Diddle and Humpty Dumpty taught children patterns in language that develop as they grow.</p><p>“When they get to about [age] two or three, you will say something and your child will come up with every obscene rhyming word that goes with what you’ve said,” Dr Nutton said.</p><p>“It’s just a playful use of language but it tells us that the child understands those phonemic patterns.”</p><p><strong>‘Like filling a piggy bank’</strong></p><p>CDU special education lecturer and speech pathologist Dr Bea Staley said nursery rhymes were certainly not integral to a child’s development, but they did help.</p><p>“You can get by without them, but why would you?</p><p>“From a language standpoint, little kids are a like a piggy bank and you’ve got to keep putting words in because when they get to school, school is going to start withdrawing that cash.</p><p>“The more words they’ve got at that point, the better they tend to do at school.”</p><p>She said it was the repetitive nature of most nursery rhymes that taught children how sounds and sentences worked.</p><p>“Really, they are one of the best predictors of future reading proficiency when kids get to school,” she said.</p><p>“And when you see that phenomena where kids just magically learn to read, it’s those kids who usually have lots of experience with things like nursery rhymes, rhyme play and sound play.”</p><p><strong>Can I make up my own rhymes?</strong></p><p>From a speech pathology point of view, Dr Staley said parents making up their own songs or rhymes had its benefits but they needed to show some caution.</p><p>“Traditional nursery rhymes already have the rhyme and the cadence, the things that children need,” she said.</p><p>“If you’re making up your own nursery rhymes you might be undoing some of that, but I still think it would be a good language activity.”</p><p>Dr Nutton said from an early childhood education perspective, growing children needed a growing vocabulary and made-up songs could offer that.</p><p>“There’s a lot of fun that you can have making up silly songs and rhyming as your child gets older,” she said.</p><p>“[But] if you’re enjoying what you’re doing and you’re having fun with it, that’s what they will learn, rather than the specific content of the rhyme or the song.”</p><p><strong>Any song will do</strong></p><p>While rhymes, whether traditional or made up, may be the best for developing language and filling your child’s vocabulary piggy bank, Dr Nutton said there was nothing wrong with simply singing your child to sleep.</p><p>“I wouldn’t suggest too much heavy metal at bed time, but anything that’s really familiar to you and has a bit of a rhythm to it can be used.</p><p>“While you’re singing your tone will drop a little and you’ll be using nice rhythmic patterns, but there’s also a level of how familiar your child is with your particular voice.</p><p>“From before they’re born they’re hearing your voice so that creates a sense of security and familiarity.”</p><hr><h2 id="生词记录"><a href="#生词记录" class="headerlink" title="生词记录"></a>生词记录</h2><blockquote><p><em>nursery rhyme</em> 儿歌，童谣</p><p><em>blessing</em> 祝福；好事，幸事；同意，支持，许可</p><p><em>set in</em> (不好的事)到来，开始（而且可能会持续）</p><p><em>resort to sth</em> （别无办法的情况下）诉诸，依靠，采用</p><p><em>lull</em> 使安静，使平和，使发困</p><p><em>building block</em> 积木；基础，构成要素</p><p><em>couplet</em> 对句（尤指长度、韵脚相同的）</p><p><em>obscene</em>   （数量等）大的惊人的，骇人听闻的；猥亵的，淫秽的，下流的</p><p><em>phonemic</em> 音位的，音素的</p><p><em>piggy bank</em> 存钱罐</p><p><em>pathologist</em> 病理学家</p><p><em>integral</em> 构成整体所必需的</p><p><em>withdraw</em> 抽回，取回，提取，撤回，退出</p><p><em>repetitive</em> 重复的，反复的</p><p><em>predictor</em> 预测因子，预测器</p><p><em>proficiency</em> 熟练，精通</p><p><em>cadence</em> （嗓音的）抑扬顿挫，起落</p><p><em>heavy metal</em> 重金属摇滚乐</p></blockquote><h2 id="个人感悟"><a href="#个人感悟" class="headerlink" title="个人感悟"></a>个人感悟</h2><p>说实话我是不知道这个点怎么火起来的，就如每次微博热搜上的的东西我经常感到莫名其妙一样。</p><p>我后续翻查了一下相关新闻，个人觉得歌曲上头只是部分原因，最重要的原因应该还是大家看到唱歌的是一个漂亮的女幼师，而且我猜测其背后可能有一个团队孵化网红然后趁机割韭菜捞钱。</p>]]></content>
      
      
      <categories>
          
          <category> 每日阅读分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 英语提升 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一旦你开始熬夜</title>
      <link href="/2023/06/01/yi-dan-ni-kai-shi-ao-ye/"/>
      <url>/2023/06/01/yi-dan-ni-kai-shi-ao-ye/</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文地址：<br><a href="https://mp.weixin.qq.com/s/102J977_IAgpoF1tX7mTgA">https://mp.weixin.qq.com/s/102J977_IAgpoF1tX7mTgA</a></p></blockquote><h1 id="Harvard-Study-Says-It’s-OK-to-Stay-Up-Late-and-Sleep-In-so-Long-as-You-Do-This"><a href="#Harvard-Study-Says-It’s-OK-to-Stay-Up-Late-and-Sleep-In-so-Long-as-You-Do-This" class="headerlink" title="Harvard Study Says It’s OK to Stay Up Late and Sleep In (so Long as You Do This)"></a>Harvard Study Says It’s OK to Stay Up Late and Sleep In (so Long as You Do This)</h1><hr><p>Researchers tracked students’ sleeping habits for a month. Here’s what they found.</p><p>Do you believe that the earlier you go to bed and the earlier you get up, the healthier, happier, and more productive you’ll be? Many people do, and many websites, including this one, offer lots of advice about how to be a morning person and why it’s so important to be one.</p><p>Well, maybe it isn’t so important after all. A new study from Harvard traced the sleep habits of 61 students over 30 days and correlated those habits with the students’ grades. It found that students who got regular sleep–that is, who went to bed and woke up about the same time every day–did better in school than those who slept irregular hours. You might expect that much to be true, but here are some more surprising findings:</p><ol><li>You don’t have to wake up at 5 a.m. after all.</li></ol><p>The study did find that students were better off if they slept during “nighttime” hours, but it defined those hours as 10 pm to 10 am. As Charles Czeisler, M.D., chief of the Sleep and Circadian Disorders Division at Brigham and Women’s Hospital told CNN, “The results of this study are not suggesting everybody has to be a goody-two-shoes. So if you go to bed at 2 and get up at 9, that’s fine. You just have to consistently do the same thing.”</p><ol start="2"><li>Getting enough sleep won’t help you if you sleep irregular hours.</li></ol><p>The researchers expected to find that the irregular sleepers who stayed up till all hours were sleeping fewer hours than their regular-sleeping counterparts. But no–both groups were sleeping about the same number of hours in total because the irregular sleepers were napping during the day. Their grades still suffered, proving what most of us know by instinct: A nap can be nice but it’s no replacement for a good night’s sleep.</p><ol start="3"><li>Sleeping irregular hours can make you fat.</li></ol><p>Irregular sleepers had delayed circadian rhythms compared to regular sleepers. Both phenomena have been shown to be related to weight gain in earlier studies, the researchers note. If that information isn’t enough to make you stop pulling all-nighters, I don’t know what is.</p><ol start="4"><li>Irregular sleep could be a symptom of something else.</li></ol><p>One thing the study didn’t do is measure the things that might cause someone to become an irregular sleeper, and how they might affect academic performance. For example, if you’re someone who goes to bed at precisely 10 pm every night and wakes up at precisely 5 am every morning, chances are you’re a highly disciplined sort, which means you might also have the discipline to get all your homework done early. Conversely, irregular sleep can be a symptom of depression, and depression could certainly affect one’s academic performance.</p><p>More study is needed to better understand these factors, the researchers say. In the meantime, if you’re a late riser stop beating yourself up about it. Concentrate on getting up at the same late hour every morning instead.</p><hr><h2 id="生词记录"><a href="#生词记录" class="headerlink" title="生词记录"></a>生词记录</h2><blockquote><p><em>track</em> 一首歌曲；追踪，记录···的进展</p><p><em>morning person</em> 早起的人，感觉在早晨精力充沛的人</p><p><em>trace</em> 找到，发现，查出；查明···的起因</p><p><em>correlate</em> 相关的</p><p><em>better off</em> 境况更好；经济状况较以前好</p><p><em>M.D.</em> 医学博士（缩写）</p><p><em>circadian</em> 昼夜的，约24小时的</p><p><em>goody-two-shoes</em> 形容一个人过分守规矩，有点虚伪或装模作样</p><p><em>counterpart</em> 相反的，对立的</p><p><em>nap</em> 小睡，打盹</p><p><em>instinct</em> 直觉</p><p><em>rhythm</em> 规律，韵律</p><p><em>phenomenon</em> 现象；非凡的人（或事物）；奇才；奇迹</p><p><em>pull all-nighter</em> 通宵活动；通宵学习</p><p><em>the chances are</em> 很有可能</p><p><em>discipline</em> 自律，守规矩的，训练有素的</p><p><em>conversely</em> 相反地，反过来</p><p><em>beat yourself up</em>  怪罪自己，苛求自己</p></blockquote><h2 id="个人感悟"><a href="#个人感悟" class="headerlink" title="个人感悟"></a>个人感悟</h2><blockquote><p>规律睡眠比睡眠时间的堆叠更重要。原来即使天天熬夜，只要你是固定时间入睡和固定时间起床，反而危害不大；相反间歇性的熬夜对身体危害更大，这是没想到的，哈哈。anyway，早睡早起，养成良好的睡眠习惯总是不错的。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 每日阅读分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 英语提升 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《灌篮高手》看了吗</title>
      <link href="/2023/06/01/guan-lan-gao-shou-kan-liao-ma/"/>
      <url>/2023/06/01/guan-lan-gao-shou-kan-liao-ma/</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文地址：<a href="https://mp.weixin.qq.com/s/wSuJJxN934_ukvQ4N-Lj2A">https://mp.weixin.qq.com/s/wSuJJxN934_ukvQ4N-Lj2A</a></p></blockquote><h1 id="China-Box-Office-‘The-First-Slam-Dunk’-Scores-55-Million-in-Four-Day-Opening-Period"><a href="#China-Box-Office-‘The-First-Slam-Dunk’-Scores-55-Million-in-Four-Day-Opening-Period" class="headerlink" title="China Box Office: ‘The First Slam Dunk’ Scores $55 Million in Four-Day Opening Period"></a><strong>China Box Office: ‘The First Slam Dunk’ Scores $55 Million in Four-Day Opening Period</strong></h1><hr><p>The highly-anticipated Japanese animated feature film “The First Slam Dunk” dominated the China cinema box office in its opening weekend. It broke multiple records as it did so.</p><p>The film scored $38.5 million (RMB266 million) over the Friday to Sunday weekend, according to data from consultancy Artisan Gateway. However, it opened on Thursday, a day earlier than is the norm in China, and has accumulated $55.2 million over the opening four-day frame.</p><p>The film is based on IP that is well-known to a generation of comic book fans and TV audiences in China (early middle-aged men were reported to have been particularly interested) and has already proved a hit in other parts of Asia. (Comscore estimates that the film has grossed $211 million worldwide.)</p><p>Approval went wider than a single demographic segment, however. “The First Slam Dunk” received strong acclaim across China’s major movie rating platforms, including a 9.2 out of 10 score from Douban users and 9.4 out of 10 on ticketing platforms Maoyan and Taopiaopiao.</p><p>The film played especially well at Imax venues, occupying 731 Imax screens in China. Imax China reported that the film earned RMB38 million ($5.51 million) over four days. That was the biggest opening for any foreign animation title on Imax and for any Japanese film on Imax in China. Imax screens also accounted for 10% of the China box office weekend total.</p><p>Artisan Gateway figures show “The First Slam Dunk” enjoyed a nearly 74% share of the total China box office market on a (Friday to Sunday) weekend worth $52.3 million.</p><p>The high-scoring newcomer easily edged aside Jackie Chan vehicle “Ride On,” which had led the China box office for the two previous weekends. “Ride On” earned $2.9 million over the weekend for a 19-day cumulative of $28.3 million.</p><p>“Hachiko,” a Chinese retelling of a Japanese dog-human loyalty tale, earned $2.4 million on its fourth weekend of release. That helped it to a cumulative of $39.4 million since releasing on March 31.</p><p>“The Super Mario Bros. Movie” held on to fourth place. It earned $1.8 million in its third weekend frame. While the film powered to an $877 million global cumulative, just $19.4 million of that has come from China.</p><p>Fifth place over the weekend was another Japanese animation, “Suzume.” It earned $1.7 million for a cumulative of $112 million since releasing in China on March 24.</p><p>The latest weekend lifted the year-to-date box office total in China to $2.58 billion, according to Artisan Gateway’s calculation. That is 23% ahead of a COVID-affected 2022 and 15% behind the same point in 2019.</p><hr><h2 id="生词记录"><a href="#生词记录" class="headerlink" title="生词记录"></a>生词记录</h2><blockquote><p><em>animated</em> 活跃的，生气勃勃的；动画的，动画制作的</p><p><em>feature film</em> 角色，特征，特点，功能；故事片，正片</p><p><em>slam dunk</em> 灌篮，扣篮</p><p><em>dominate</em> 占主导地位，占支配地位，拥有优势，最明显的</p><p><em>box office</em> 售票处，票房；受欢迎，卖座</p><p><em>consultancy</em> 咨询公司；咨询服务</p><p><em>accumulate</em> 积累</p><p><em>comic book</em> 漫画杂志，连环画杂志</p><p><em>hit</em> 成功，很受欢迎的人或事物</p><p><em>gross</em> 总收入为，获得···毛利</p><p><em>edge aside</em> 在竞争中轻松击败或超越对手</p><p><em>vehicle</em> 为某个表演者特意制作的电影或节目</p><p><em>cumulative</em> 累积的</p><p><em>loyalty</em> 忠诚，忠实</p><p><em>tale</em> 故事，历险记</p></blockquote><h2 id="个人感悟"><a href="#个人感悟" class="headerlink" title="个人感悟"></a>个人感悟</h2><blockquote><p>我先来，TV版和漫画都没看过，有机会可以看下😳</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 每日阅读分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 英语提升 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TikTok网红齐聚华盛顿，反对美国封禁计划</title>
      <link href="/2023/06/01/tiktok-wang-hong-qi-ju-hua-sheng-dun-fan-dui-mei-guo-feng-jin-ji-hua/"/>
      <url>/2023/06/01/tiktok-wang-hong-qi-ju-hua-sheng-dun-fan-dui-mei-guo-feng-jin-ji-hua/</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文地址：</p><p><a href="https://mp.weixin.qq.com/s/8nJyE8dSbOoyPwhDfFnv2g">https://mp.weixin.qq.com/s/8nJyE8dSbOoyPwhDfFnv2g</a></p></blockquote><h1 id="TikTok-Stars-Rally-in-Washington-Against-App’s-Potential-U-S-Ban"><a href="#TikTok-Stars-Rally-in-Washington-Against-App’s-Potential-U-S-Ban" class="headerlink" title="TikTok Stars Rally in Washington Against App’s Potential U.S. Ban"></a>TikTok Stars Rally in Washington Against App’s Potential U.S. Ban</h1><hr><p>TikTok launched a battalion of influencers in the nation’s capital Wednesday to send a message to Congress: Banning the app would be met with widespread popular opposition. </p><p>“TikTok is not a children’s dancing app,” said Aidan Kohn-Murphy, a college freshman with close to 300,000 TikTok followers and founder of the advocacy group Gen-Z for Change. “It is one of the most powerful tools that young people have to engage each other and to get civically involved.” </p><p>Mr. Kohn-Murphy was one of more than 20 TikTok personalities with wide followings who traveled to the capital this week at the company’s invitation to lobby lawmakers and others in advance of TikTok Chief Executive Shou Zi Chew’s appearance before a House committee on Thursday.</p><p>The influencers’ blitz is part of TikTok’s response to persistent concerns among U.S. officials. </p><p>The Biden administration recently demanded that TikTok’s Chinese owners sell their stakes in the company or face a possible U.S. ban of the app, and members of the House Energy and Commerce Committee are expected to question Mr. Chew about the security concerns and other issues.</p><p>TikTok maintains that it isn’t beholden to any government and is a vital platform for 150 million American users—a theme the influencers worked to underscore in a meeting with journalists near the Capitol on Wednesday. </p><p>“It would be difficult to be able to support a candidate that would take away something that is so integral to the direction we’re going as a society,” said Baedri Nichole, a bakery owner from Columbus, Ohio, whose “hot cocoa bomb” confection is a hit on TikTok.</p><p>Kenny Jary, an 81-year-old retiree known on TikTok as Patriotic Kenny, said he uses the app to raise money to buy mobility scooters for fellow veterans. Others said the app provided a platform to launch small businesses or discuss topics such as eldercare and mental health. </p><p>TikTok covered the group’s travel and accommodation expenses. The company bused the influencers on Wednesday to the Capitol grounds, where they gathered on a scenic rooftop to shoot their own videos and stand for journalists’ interviews. </p><p>Later in the day, the influencers met with lawmakers and held a news conference near the Capitol building with Rep. Jamaal Bowman (D., N.Y.) and others.</p><p>“Why the hysteria and the panic and the targeting of TikTok?” asked Mr. Bowman, before suggesting xenophobia against China was at play and Congress should focus instead on addressing broader concerns about social media. “American social-media companies have been used to facilitate harms.”</p><p>After threats of banning the app started during the Trump administration, the company has spent recent years building a U.S.-based security apparatus to wall off U.S. user data and give officials the ability to inspect the computer code that recommends videos to users.</p><p>TikTok stars were a crucial factor in the company’s successful effort to fight off a proposed ban during the Trump years. Whether they will have the same influence this time around remains to be seen.</p><p>“I’m aware of the popularity of the platform. I’m not oblivious,” said Rep. Yvette Clarke (D., N.Y.), a senior member of the House Energy and Commerce Committee who hasn’t yet taken a position on a potential ban. “However, it’s important to weigh our equities here. National security has to be addressed.”</p><p>Ahead of Mr. Chew’s appearance, TikTok has ramped up lobbying efforts with the help of Oracle Corp., its U.S. data-security partner. Advertisements at the capital’s Metro subway stops tout the company’s commitment to user safety.</p><p>Mr. Chew also asked the platform’s users to weigh in, in a TikTok post this week disclosing that 150 million Americans are on the app.</p><p>“Some politicians have started talking about banning TikTok,” he said. “This could take TikTok away from all 150 million of you.”</p><hr><h2 id="生词记录"><a href="#生词记录" class="headerlink" title="生词记录"></a>生词记录</h2><blockquote><p><em>battalion</em> 有组织的队伍</p><p><em>influencer</em> 有影响力的人（网红，博主）</p><p><em>freshman</em> 大一新生</p><p><em>advocacy</em> 拥护，主张，提倡</p><p><em>Gen-Z</em> Z世代（指90后）</p><p><em>civically</em> 公民地</p><p><em>blitz</em> 集中力量的行动，闪电式行动</p><p><em>persistent</em> 持续的，存留的，顽强存在的；坚持不懈的，执意的</p><p><em>stake</em> 股份</p><p><em>beholden</em> 受惠的，感激的，欠人情的，受制的</p><p><em>underscore</em> 强调</p><p><em>integral</em> 构成整体所必须的</p><p><em>confection</em> 甜点，甜食</p><p><em>hit</em> 成功，受欢迎的人或事物</p><p><em>mobility</em> 机动，移动</p><p><em>scooter</em> 小型摩托车</p><p><em>veteran</em> 老手，经验丰富的人；老兵，退伍军人</p><p><em>bus</em> 用大客车运送</p><p><em>scenic</em> 风景优美的</p><p><em>rooftop</em> 天台，屋顶</p><p><em>hysteria</em> 歇斯底里，大惊小怪</p><p><em>xenophobia</em> 排外情绪，仇外，对外国人的憎恶</p><p><em>facilitate</em> 助长，促进，促使</p><p><em>apparatus</em> （尤指政治）机构，组织，机制</p><p><em>oblivious</em> 无视，漠视，毫不在意的</p><p><em>ramp up</em> 扩大，增加（业务）；加快（速度），增加（威力）</p><p><em>tout</em> 吹嘘，吹捧</p><p><em>weigh in</em> （在辩论，讨论中）发表有分量的意见，发挥作用</p><p><em>disclose</em> 透露，泄漏，公开，揭露</p></blockquote><h2 id="文章概述"><a href="#文章概述" class="headerlink" title="文章概述"></a>文章概述</h2><blockquote><p>TikTok可能会被美国以涉及安全问题为由进行封禁，大量网红聚集反对。</p></blockquote><h2 id="个人感悟"><a href="#个人感悟" class="headerlink" title="个人感悟"></a>个人感悟</h2><blockquote><p>大家都知道这是美国为了打压中国企业发展的诡计，但目前好像并没有什么太多的办法可以抵抗，如此下去，TikTok很有可能成为两个大国斗争的牺牲品。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 每日阅读分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 英语提升 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis速成</title>
      <link href="/2023/06/01/redis-su-cheng/"/>
      <url>/2023/06/01/redis-su-cheng/</url>
      
        <content type="html"><![CDATA[<h1 id="Redis速成"><a href="#Redis速成" class="headerlink" title="Redis速成"></a>Redis速成</h1><p>MySQL是关系型数据库，其涉及硬盘读写操作，当并发量大且读写频繁时，速度会变慢；</p><p>Redis是内存数据库，内存的读写速度远快于硬盘，由此学习了解一下Redis</p><h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><p>Redis中的数据以键值形式存储，默认情况下，连接的是0号数据库，默认总共有16个，我们可以通过对应的配置文件进行修改。</p><ol><li><p>切换数据库</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> 序号<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>添加数据</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">set</span> <span class="token keyword">key</span> <span class="token keyword">value</span><span class="token comment">-- 一次性设置多个</span>mset key1 value1 key2 value2 <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>获取数据</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">get <span class="token keyword">key</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>设置过期时间</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">set</span> <span class="token keyword">key</span> <span class="token keyword">value</span> ex 秒数<span class="token keyword">set</span> <span class="token keyword">key</span> <span class="token keyword">value</span> px 毫秒数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>单独设置过期时间</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">expire <span class="token keyword">key</span> 秒数<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>查看剩余的过期时间</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">ttl <span class="token keyword">key</span> <span class="token comment">-- 查看秒</span>pttl <span class="token keyword">key</span> <span class="token comment">-- 查看毫秒</span>persist <span class="token keyword">key</span> <span class="token comment">-- 转换为永久 （显示 -1 即为永久）</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>删除数据</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">del <span class="token keyword">key</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>查看所有的键</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">keys</span> <span class="token operator">*</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>查询是否存在对应的键</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">exists</span> <span class="token keyword">key</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>随机取出某一个键</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">randomkey<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>将一数据库数据移到另一数据库中</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">move <span class="token keyword">key</span> 数据库序号<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>修改键</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">rename</span> <span class="token keyword">key</span> newkeyrenamex <span class="token keyword">key</span> newkey <span class="token comment">-- 会判断新键是否存在，不存在再更名</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>运算</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">incr <span class="token keyword">key</span>  <span class="token comment">-- 对应的value若为数字会自增1</span>incrby <span class="token keyword">key</span> x <span class="token comment">-- 对应的value若为数字会加 x</span>decr <span class="token keyword">key</span> <span class="token comment">-- 自减</span>decrby <span class="token keyword">key</span> x <span class="token comment">-- 减去 x</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>查看键的类型</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">type</span> <span class="token keyword">key</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><p>参考基本操作</p><h3 id="Hash"><a href="#Hash" class="headerlink" title="Hash"></a>Hash</h3><p>类似Java中<code>Map&lt;String, Map&lt;String, String&gt;&gt;</code></p><p>即Redis中对应的value是个<code>Map&lt;String, String&gt;</code></p><ol><li><p>设置数据</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">hset <span class="token keyword">key</span> 字段 值<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>获取数据</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 获取相应字段对应的值</span>hget <span class="token keyword">key</span> 字段<span class="token comment">-- 获取所有字段和值</span>hgetall <span class="token keyword">key</span><span class="token comment">-- 获取所有字段</span>hkeys <span class="token keyword">key</span><span class="token comment">-- 获取所有字段对应的值</span>hvals <span class="token keyword">key</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>是否存在相应的字段</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">hexists <span class="token keyword">key</span> 字段<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>删除相应的字段</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">hdel <span class="token keyword">key</span> 字段<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>查看一共多少键值对</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">hlen <span class="token keyword">key</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h3 id="List"><a href="#List" class="headerlink" title="List"></a>List</h3><ol><li><p>添加数据</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 从头部添加</span>lpush <span class="token keyword">key</span> element<span class="token comment">-- 从尾部添加</span>rpush <span class="token keyword">key</span> element<span class="token comment">-- 在指定元素前/后插入元素</span>linsert <span class="token keyword">key</span> before<span class="token operator">/</span><span class="token keyword">after</span> 指定元素 element<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>获取数据</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 根据下标获取元素</span>lindex <span class="token keyword">key</span> 下标<span class="token comment">-- 获取并移除头部元素</span>lpop <span class="token keyword">key</span><span class="token comment">-- 获取并移除尾部元素</span>rpop <span class="token keyword">key</span><span class="token comment">-- 获取指定范围内的</span>lrange <span class="token keyword">key</span> <span class="token keyword">start</span> <span class="token keyword">end</span>lrange <span class="token keyword">key</span> <span class="token number">0</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token comment">-- 获取全部元素（-1表示倒数第一个元素）</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>移动并获取</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 从当前数组尾部取出放到目标数组的头部中，并返回元素</span>   rpoplpush 当前数组 目标数组<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>支持阻塞操作，类似生产者、消费者</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">blpop <span class="token keyword">key</span> timeout <span class="token comment">-- 若列表中无元素则等待，timeout为超时时间限制，若等待期间有元素则会马上获取</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h3 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h3><ol><li><p>添加元素</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">sadd <span class="token keyword">key</span> value1，value2<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>查看set中有多少个值</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">scard <span class="token keyword">key</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>判断集合中是否包含指定值</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">sismember <span class="token keyword">key</span> <span class="token keyword">value</span> <span class="token comment">-- 是否包含指定值</span>smembers <span class="token keyword">key</span> <span class="token comment">-- 列出所有值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>相关运算</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">sdiff key1 key2 <span class="token comment">-- 集合之间的差集</span>sdiffstore 目标 key1 key2 <span class="token comment">-- 差集存到目标集合中</span>sinter key1 key2 <span class="token comment">-- 交集</span>sintersotre 目标 key1 key2 <span class="token comment">-- 交集存到目标集合中</span>sunion key1 key2 <span class="token comment">-- 并集</span>sunionsotre 目标 key1 key2 <span class="token comment">-- 并集存到目标集合中</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>移动指定值</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">smove 原<span class="token keyword">key</span> 目标<span class="token keyword">key</span> <span class="token keyword">value</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>移除操作</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 随机移除</span>spop <span class="token keyword">key</span><span class="token comment">-- 移除制定</span>srem <span class="token keyword">key</span> <span class="token keyword">value</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="SortedSet"><a href="#SortedSet" class="headerlink" title="SortedSet"></a>SortedSet</h3><p>为每个值设定一个分数，分数大小决定值的位置，从而使其有序</p><ol><li><p>添加数据</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">zadd <span class="token keyword">key</span> <span class="token keyword">value</span> score <span class="token comment">-- score分数决定值的位置</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>查询</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">zcard <span class="token keyword">key</span> <span class="token comment">-- 查看有多少个值</span><span class="token comment">-- 通过分数段查看</span>zrangebyscore <span class="token keyword">key</span> <span class="token keyword">start</span> <span class="token keyword">end</span> <span class="token punctuation">[</span>withscores<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token keyword">limit</span><span class="token punctuation">]</span><span class="token comment">-- 统计分数段内的数量</span>zcount <span class="token keyword">key</span> <span class="token keyword">start</span> <span class="token keyword">end</span><span class="token comment">-- 根据分数获取指定值的排名</span>zrank <span class="token keyword">key</span> <span class="token keyword">value</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>移除</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">zrem <span class="token keyword">key</span> <span class="token keyword">value</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>获取区间内所有</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">zrange <span class="token keyword">key</span> <span class="token keyword">start</span> <span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h2 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h2><h3 id="RDB（Redis-DataBase）"><a href="#RDB（Redis-DataBase）" class="headerlink" title="RDB（Redis DataBase）"></a>RDB（Redis DataBase）</h3><p>当开启了RDB持久化机制后，在一定的时间间隔内，Redis会将内存中的数据保存在一个文件中。这个文件可以看作是Redis的“快照”，其中包含了某个时间点上Redis的所有数据。RDB的优点在于它是一个非常紧凑的表示，同时因为在恢复期间需要加载并解析一个单独的文件，所以速度也很快。</p><p>优点：加载速度快，数据体积小</p><p>缺点：存储速度慢，消耗资源多，会发生数据丢失</p><h3 id="AOF-Append-Only-File"><a href="#AOF-Append-Only-File" class="headerlink" title="AOF(Append-Only File)"></a>AOF(Append-Only File)</h3><p>当开启了AOF持久化机制后，Redis会将每个写入的命令都追加到一个文件中。这意味着当Redis重新启动时，可以从上一次写入命令的位置开始重放命令确保数据的准确性。AOF的优点在于它可以提供粒度更细的持久化，因此可以避免在恢复时丢失太多数据。缺点在于它的文件通常比RDB生成的文件大，其速度会慢于RDB。</p><p>优点：存储速度快，消耗资源少，支持实时存储</p><p>缺点：加载速度慢，数据体积大</p><h2 id="事务和锁"><a href="#事务和锁" class="headerlink" title="事务和锁"></a>事务和锁</h2><p>开启事务：<code>multi</code></p><p>执行事务：<code>exec</code></p><p>中途取消事务：<code>discard</code></p>]]></content>
      
      
      <categories>
          
          <category> 关于学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python基础学习</title>
      <link href="/2023/06/01/python-su-cheng/"/>
      <url>/2023/06/01/python-su-cheng/</url>
      
        <content type="html"><![CDATA[<h1 id="Python速成"><a href="#Python速成" class="headerlink" title="Python速成"></a>Python速成</h1><h2 id="常见数据类型"><a href="#常见数据类型" class="headerlink" title="常见数据类型"></a>常见数据类型</h2><ul><li><p>Number(数字)</p><ul><li>int</li><li>float</li><li>bool</li><li>complex</li></ul><p>可用type和isinstance来查询变量所属类型</p><p>type 不会认为子类是一种父类类型</p><p>isinstance 会认为子类是一种父类类型</p><p>bool是int的子类，True和False可以和数字相加</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> <span class="token number">19</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># &lt;class 'int'></span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">isinstance</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li></li></ul>]]></content>
      
      
      <categories>
          
          <category> 关于学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MATLAB基础</title>
      <link href="/2023/06/01/matlab-ji-chu/"/>
      <url>/2023/06/01/matlab-ji-chu/</url>
      
        <content type="html"><![CDATA[<h1 id="MATLAB基础"><a href="#MATLAB基础" class="headerlink" title="MATLAB基础"></a>MATLAB基础</h1><h2 id="清除环境变量及命令"><a href="#清除环境变量及命令" class="headerlink" title="清除环境变量及命令"></a>清除环境变量及命令</h2><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">clc <span class="token comment">% 清空命令行窗口</span>clear all <span class="token comment">% 清除工作区中的所有变量</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="变量命名"><a href="#变量命名" class="headerlink" title="变量命名"></a>变量命名</h2><ul><li><p>变量名区分大小写</p></li><li><p>以字母开头，后续可跟字母，数字或下划线</p></li></ul><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">a <span class="token operator">=</span> <span class="token number">10</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><ol><li><p>数字</p><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">num <span class="token operator">=</span> <span class="token number">66</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>字符与字符串</p><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">str <span class="token operator">=</span> <span class="token string">'this is a char'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>矩阵</p><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">A <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token number">4</span> <span class="token number">5</span> <span class="token number">6</span><span class="token punctuation">;</span> <span class="token number">7</span> <span class="token number">8</span> <span class="token number">9</span><span class="token punctuation">]</span> <span class="token comment">% 三行三列的矩阵</span>B <span class="token operator">=</span> A<span class="token operator">'</span> <span class="token comment">% 把A转置</span>C <span class="token operator">=</span> <span class="token function">A</span><span class="token punctuation">(</span><span class="token operator">:</span><span class="token punctuation">)</span> <span class="token comment">% 以竖着的方式将矩阵拉伸</span>D <span class="token operator">=</span> <span class="token function">inv</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span> <span class="token comment">% 求逆矩阵</span>A <span class="token operator">*</span> D <span class="token comment">% 矩阵乘法</span>E <span class="token operator">=</span> <span class="token function">zeros</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment">% 10行5列的3维矩阵</span><span class="token function">E</span><span class="token punctuation">(</span><span class="token operator">:</span><span class="token operator">:</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>元胞数组</p></li><li><p>结构体</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 关于学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MATLAB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java多线程之基础篇</title>
      <link href="/2023/06/01/java-duo-xian-cheng-zhi-ji-chu-pian/"/>
      <url>/2023/06/01/java-duo-xian-cheng-zhi-ji-chu-pian/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文整理自RedSpider社区开源文章：<a href="http://concurrent.redspider.group/RedSpider.html">深入浅出Java多线程</a></p></blockquote><h1 id="一、进程与线程"><a href="#一、进程与线程" class="headerlink" title="一、进程与线程"></a>一、进程与线程</h1><h2 id="1-1-基本概念"><a href="#1-1-基本概念" class="headerlink" title="1.1 基本概念"></a>1.1 基本概念</h2><blockquote><p>进程是操作系统进行资源分配的基本单位，而线程是操作系统进行调度的基本单位，即CPU分配时间的单位</p></blockquote><p>进程就是应用程序在内存中分配的空间，也就是正在运行的程序，各个进程之间互不干扰。同时进程保存着程序每一个时刻运行的状态</p><blockquote><p>此时，CPU采用时间片轮转的方式运行进程：CPU为每个进程分配一个时间段，称作它的时间片。如果在时间片结束时进程还在运行，则暂停这个进程的运行，并且CPU分配给另一个进程（这个过程叫做<strong>上下文切换</strong>）。如果进程在时间片结束前阻塞或结束，则CPU立即进行切换，不用等待时间片用完<br>当进程暂停时，它会保存当前进程的状态（进程标识，进程使用的资源等），在下一次切换回来时根据之前保存的状态进行恢复，接着继续执行</p></blockquote><p>一个进程就包含了多个线程，每个线程负责一个单独的子任务</p><blockquote><p>进程让操作系统的并发性成为了可能，而线程让进程内部的并发成为了可能</p></blockquote><p>进程与线程的区别：</p><ul><li>进程单独占有各自的内存空间，有内存隔离，数据共享过程复杂但同步简单；线程在其对应的进程中共享内存空间，数据共享简单但同步复杂</li><li>因为进程之间互不干扰，故不容易影响主程序的稳定性；而某个线程崩溃可能影响到整个进程崩溃，可靠性低</li><li>因进程独占内存空间，故创建和销毁开销大（重量级）；线程开销小（轻量级）</li></ul><h2 id="1-2-上下文切换"><a href="#1-2-上下文切换" class="headerlink" title="1.2 上下文切换"></a>1.2 上下文切换</h2><blockquote><p>CPU从一个进程&#x2F;线程切换到另一个进程&#x2F;线程</p></blockquote><p>上下文：某一时间点CPU寄存器和程序计数器中的内容</p><p>CPU通过为每个线程分配CPU时间片来实现多线程机制。CPU通过时间片分配算法来循环执行任务，当前任务执行一个时间片后会切换到下一个任务。</p><p>但是，在切换前会保存上一个任务的状态，以便下次切换回这个任务时，可以再加载这个任务的状态。所以任务从保存到再加载的过程就是一次上下文切换。</p><p>上下文切换通常是计算密集型的，意味着此操作会<strong>消耗大量的 CPU 时间，故线程也不是越多越好</strong>。所以减少系统中上下文切换次数，可以提升多线程性能</p><h1 id="二、多线程实现"><a href="#二、多线程实现" class="headerlink" title="二、多线程实现"></a>二、多线程实现</h1><h2 id="2-1-继承Thread类"><a href="#2-1-继承Thread类" class="headerlink" title="2.1 继承Thread类"></a>2.1 继承Thread类</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"This is myThread"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 调用start()方法后，等待获取到时间片后就会执行run方法</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-2-实现Runnable接口"><a href="#2-2-实现Runnable接口" class="headerlink" title="2.2 实现Runnable接口"></a>2.2 实现Runnable接口</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyThread</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"This is myThread"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-3-实现Callable接口"><a href="#2-3-实现Callable接口" class="headerlink" title="2.3 实现Callable接口"></a>2.3 实现Callable接口</h2><p><code>Callable</code>一般是配合线程池工具<code>ExecutorService</code>来使用的</p><p>与前两种多线程实现方式不同的是，实现<code>Callable</code>接口的方式具有返回值</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyOtherThread</span> <span class="token keyword">implements</span> <span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ExecutionException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ExecutorService</span> executor <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newCachedThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> result <span class="token operator">=</span> executor<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyOtherThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 注意get()方法会阻塞当前线程</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-4-Future接口"><a href="#2-4-Future接口" class="headerlink" title="2.4 Future接口"></a>2.4 Future接口</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">interface</span> <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span><span class="token comment">// 尝试取消，但不一定成功，参数表示是否采用中断的方式取消线程执行</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">boolean</span> <span class="token function">cancel</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> paramBoolean<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">boolean</span> <span class="token function">isCancelled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">boolean</span> <span class="token function">isDone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token class-name">V</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">,</span> <span class="token class-name">ExecutionException</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token class-name">V</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">long</span> paramLong<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span> paramTimeUnit<span class="token punctuation">)</span>            <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">,</span> <span class="token class-name">ExecutionException</span><span class="token punctuation">,</span> <span class="token class-name">TimeoutException</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-5-FutureTask类"><a href="#2-5-FutureTask类" class="headerlink" title="2.5 FutureTask类"></a>2.5 FutureTask类</h2><blockquote><p>FutureTask可以在高并发环境下确保任务只执行一次</p></blockquote><p><code>FutureTask</code>实现了<code>RunnableFuture</code>接口</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">RunnableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">></span></span> <span class="token keyword">extends</span> <span class="token class-name">Runnable</span><span class="token punctuation">,</span> <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * Sets this Future to the result of its computation     * unless it has been cancelled.     */</span>    <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>示例：</p><p>与上面1.3不同的是，此处调用的是<code>submit(Runnable task)</code>方法，同时使用的是<code>futureTask</code>调用<code>get()</code>；而1.3处调用的是<code>submit(Callable&lt;T&gt; task)</code>方法，同时使用的是其返回值去调用<code>get()</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyOtherThread</span> <span class="token keyword">implements</span> <span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ExecutionException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ExecutorService</span> executor <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newCachedThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">FutureTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> futureTask <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FutureTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyOtherThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        executor<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span>futureTask<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        Future&lt;Integer> result = executor.submit(new MyOtherThread());</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>futureTask<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>FutureTask的几个状态：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**  *  * state可能的状态转变路径如下：  * NEW -> COMPLETING -> NORMAL  * NEW -> COMPLETING -> EXCEPTIONAL  * NEW -> CANCELLED  * NEW -> INTERRUPTING -> INTERRUPTED  */</span><span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">int</span> state<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">NEW</span>          <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">COMPLETING</span>   <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">NORMAL</span>       <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">EXCEPTIONAL</span>  <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">CANCELLED</span>    <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">INTERRUPTING</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">INTERRUPTED</span>  <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-6-Thread类和Runnable接口的区别"><a href="#2-6-Thread类和Runnable接口的区别" class="headerlink" title="2.6 Thread类和Runnable接口的区别"></a>2.6 Thread类和Runnable接口的区别</h2><ul><li>Runnable更符合面向对象，使用更灵活（Java多实现，单继承特性）</li><li>Runnable降低了线程对象和线程任务的耦合性</li><li>建议优先使用Runnable接口方式自定义线程类</li></ul><h1 id="三、线程组和线程优先级"><a href="#三、线程组和线程优先级" class="headerlink" title="三、线程组和线程优先级"></a>三、线程组和线程优先级</h1><h2 id="3-1-线程组（ThreadGroup）"><a href="#3-1-线程组（ThreadGroup）" class="headerlink" title="3.1 线程组（ThreadGroup）"></a>3.1 线程组（ThreadGroup）</h2><p>ThreadGroup包含并管理着Thread，执行main()方法线程的名字是main，如果在new Thread时没有显式指定线程组，那么默认将父线程（当前执行new Thread的线程）线程组设置为自己的线程组</p><p>线程组的作用就是统一控制线程的优先级和检查线程的权限</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Thread</span> testThread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"testThread当前线程组名字："</span> <span class="token operator">+</span>                    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getThreadGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"testThread线程名字："</span> <span class="token operator">+</span>                    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        testThread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行main所在线程的线程组名字： "</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getThreadGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行main方法线程名字："</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 执行main所在线程的线程组名字：main</span><span class="token comment">// 执行main方法线程名字：main</span><span class="token comment">// testThread当前线程组名字：main</span><span class="token comment">// testThread线程名字：Thread-0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-2-线程优先级"><a href="#3-2-线程优先级" class="headerlink" title="3.2 线程优先级"></a>3.2 线程优先级</h2><p>Java中默认线程优先级为5</p><p>线程优先级范围是1~10（由低到高），但该值只是提供给操作系统做参考（有更高的概率获取到时间片去执行），不过最终决定权还是在操作系统的手上（线程调度算法）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PriorityThread</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"当前线程名："</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">", 优先级为："</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPriority</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">PriorityThread</span> priorityThread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">IntStream</span><span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>                i <span class="token operator">-></span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">Thread</span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>priorityThread<span class="token punctuation">)</span><span class="token punctuation">;</span>                    t<span class="token punctuation">.</span><span class="token function">setPriority</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                    t<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">当前线程名：<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">0</span><span class="token punctuation">,</span> 优先级为：<span class="token number">1</span>当前线程名：<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">,</span> 优先级为：<span class="token number">6</span>当前线程名：<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">7</span><span class="token punctuation">,</span> 优先级为：<span class="token number">8</span>当前线程名：<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">,</span> 优先级为：<span class="token number">7</span>当前线程名：<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">,</span> 优先级为：<span class="token number">5</span>当前线程名：<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> 优先级为：<span class="token number">2</span>当前线程名：<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span> 优先级为：<span class="token number">4</span>当前线程名：<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> 优先级为：<span class="token number">3</span>当前线程名：<span class="token class-name">Thread</span><span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">,</span> 优先级为：<span class="token number">9</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>若某个线程优先级大于线程所在线程组的最大优先级，以线程组的最大优先级为准</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">ThreadGroup</span> threadGroup <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadGroup</span><span class="token punctuation">(</span><span class="token string">"t1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    threadGroup<span class="token punctuation">.</span><span class="token function">setMaxPriority</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>threadGroup<span class="token punctuation">,</span><span class="token string">"thread"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    thread<span class="token punctuation">.</span><span class="token function">setPriority</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是线程组的优先级"</span><span class="token operator">+</span>threadGroup<span class="token punctuation">.</span><span class="token function">getMaxPriority</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 6</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是线程的优先级"</span><span class="token operator">+</span>thread<span class="token punctuation">.</span><span class="token function">getPriority</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 6</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="四、Java线程状态"><a href="#四、Java线程状态" class="headerlink" title="四、Java线程状态"></a>四、Java线程状态</h1><h2 id="4-1-操作系统中的线程状态转换"><a href="#4-1-操作系统中的线程状态转换" class="headerlink" title="4.1 操作系统中的线程状态转换"></a>4.1 操作系统中的线程状态转换</h2><blockquote><p>在现在的操作系统中，线程是被视为轻量级进程的，所以操作系统线程的状态其实和操作系统进程的状态是一致的</p></blockquote><ul><li>就绪状态（Ready）</li><li>执行状态（Running）</li><li>等待状态（Waiting）</li></ul><h2 id="4-2-Java线程的6个状态"><a href="#4-2-Java线程的6个状态" class="headerlink" title="4.2 Java线程的6个状态"></a>4.2 Java线程的6个状态</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// Thread.State 源码</span><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">State</span> <span class="token punctuation">&#123;</span>    <span class="token constant">NEW</span><span class="token punctuation">,</span>    <span class="token constant">RUNNABLE</span><span class="token punctuation">,</span>    <span class="token constant">BLOCKED</span><span class="token punctuation">,</span>    <span class="token constant">WAITING</span><span class="token punctuation">,</span>    <span class="token constant">TIMED_WAITING</span><span class="token punctuation">,</span>    <span class="token constant">TERMINATED</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p><code>NEW</code> ：新建一个线程，处于等待状态</p>  <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>thread<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><code>Runnable</code> ：包含<code>Ready</code>和<code>Running</code>两个状态。当线程调用<code>start()</code>方法后就进入就绪<code>Ready</code>态，等待操作系统分配CPU时间片，分配后进入<code>Running</code>运行态。当调用 <code>yield()</code> 方法后，允许当前线程让出CPU，但具体让不让由操作系统决定。如果让了，那么当前线程则会处于<code>Ready</code>态继续竞争CPU，直至执行</p>  <pre class="line-numbers language-java" data-language="java"><code class="language-java">thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><code>Timed_waiting</code>：指定时间让出CPU，此时线程不会执行，也不会被系统调度，直到等待时间到期后才会执行</p>  <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Object</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>thread<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>Waiting</code> ：可以被唤醒的等待状态，此时线程不会被执行也不会被系统调度。此状态可以通过 <code>synchronized</code>获得锁，调用 <code>wait</code>方法进入等待状态。最后通过 <code>notify、notifyall</code> 唤醒</p>  <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Object</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            obj<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>thread<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>Blocked</code>：当发生锁竞争状态下，没有获得锁的线程会处于挂起状态。例如 <code>synchronized</code>锁，先获得的先执行，没有获得的进入阻塞状态</p>  <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 两个线程，产生锁竞争</span><span class="token class-name">Object</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 该线程获取锁后休眠一段时间，不释放锁</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 该线程无法获取锁，被挂起 Blocked</span><span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            obj<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>thread<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>Terminated</code>：这个是终止状态，从 New 到 Terminated 是不可逆的。一般是程序流程正常结束或者发生了异常</p>  <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 正常运行结束即可</span><span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>thread<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>thread<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>thread<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="4-3-线程状态转换"><a href="#4-3-线程状态转换" class="headerlink" title="4.3 线程状态转换"></a>4.3 线程状态转换</h2><p><img src="https://s3.us-west-2.amazonaws.com/secure.notion-static.com/44a63d90-8c76-4b69-84d5-b316ce70dfac/Untitled.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAT73L2G45O3KS52Y5/20211010/us-west-2/s3/aws4_request&X-Amz-Date=20211010T131136Z&X-Amz-Expires=86400&X-Amz-Signature=48ba1ee73c44b0c87ed81fb86948bcceca3d07abdb837f5fb5199acecd4466fb&X-Amz-SignedHeaders=host&response-content-disposition=filename%20=%22Untitled.png%22" alt="线程状态切换"></p><h3 id="4-3-1-BLOCKED与RUNNABLE状态切换"><a href="#4-3-1-BLOCKED与RUNNABLE状态切换" class="headerlink" title="4.3.1 BLOCKED与RUNNABLE状态切换"></a>4.3.1 BLOCKED与RUNNABLE状态切换</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">blockedTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Thread</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">testMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Thread</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">testMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    a<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 目的是为了让main线程休息下，从而让两个线程充分争夺锁</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    b<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> a<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出？</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> b<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出？</span><span class="token punctuation">&#125;</span><span class="token comment">// 同步方法争夺锁</span><span class="token keyword">private</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">testMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-3-2-WAITING状态与RUNNABLE状态切换"><a href="#4-3-2-WAITING状态与RUNNABLE状态切换" class="headerlink" title="4.3.2 WAITING状态与RUNNABLE状态切换"></a>4.3.2 WAITING状态与RUNNABLE状态切换</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">blockedTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ······    a<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// join()会让main线程等待a线程执行完，才继续</span>    a<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    b<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> a<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 TERMINATED</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> b<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// RUNNABLE/TERMINATED</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-3-3-TIMED-WAITING与RUNNABLE状态切换"><a href="#4-3-3-TIMED-WAITING与RUNNABLE状态切换" class="headerlink" title="4.3.3 TIMED_WAITING与RUNNABLE状态切换"></a>4.3.3 TIMED_WAITING与RUNNABLE状态切换</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">blockedTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ······    a<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// join(long)使当前线程执行指定时间，并且使线程进入TIMED_WAITING状态</span>    a<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token number">1000L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    b<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> a<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 TIEMD_WAITING</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> b<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-3-4-线程中断"><a href="#4-3-4-线程中断" class="headerlink" title="4.3.4 线程中断"></a>4.3.4 线程中断</h3><blockquote><p>线程中断机制是一种协作机制。需要注意，通过中断操作并不能直接终止一个线程，而是通知需要被中断的线程自行处理<br>在线程中断机制里，当其他线程通知需要被中断的线程后，线程中断的状态被设置为true，但是具体被要求中断的线程要怎么处理，完全由被中断线程自己而定，可以在合适的时间处理中断请求，也可以完全不处理继续执行下去</p></blockquote><ul><li><code>Thread.interrupt()</code>：中断线程。这里的中断线程并不会立即停止线程，而是设置线程的中断状态为true（默认是flase）</li><li><code>Thread.interrupted()</code>: 测试当前线程是否被中断。线程的中断状态受这个方法的影响，意思是调用一次使线程中断状态设置为true，连续调用两次会使得这个线程的中断状态重新转为false</li><li><code>Thread.isInterrupted()</code>: 测试当前线程是否被中断。与上面方法不同的是调用这个方法并不会影响线程的中断状态</li></ul><h1 id="五、Java线程间的通信"><a href="#五、Java线程间的通信" class="headerlink" title="五、Java线程间的通信"></a>五、Java线程间的通信</h1><h2 id="5-1-锁与同步"><a href="#5-1-锁与同步" class="headerlink" title="5.1 锁与同步"></a>5.1 锁与同步</h2><blockquote><p>在Java中，锁的概念是基于对象的，所以又叫对象锁<br>那么线程与锁的关系就像是婚姻<br>线程持有锁（结婚）<br>线程释放锁（离婚），其它线程才能获取锁</p></blockquote><p>线程同步就是线程间按照一定的顺序执行</p><p>无锁示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NoneLock</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">ThreadA</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Thread A "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">ThreadB</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Thread B "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ThreadA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ThreadB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述代码执行的结果是无序的，每一次的结果都不一致</p><p>使用对象锁示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ObjectLock</span> <span class="token punctuation">&#123;</span><span class="token comment">// 对象锁</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Object</span> lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">ThreadA</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>lock<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Thread A "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">ThreadB</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>lock<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Thread B "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ThreadA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 同一时间只能有一个线程持有锁，睡眠是让A先执行</span>        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ThreadB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-2-等待-x2F-通知机制"><a href="#5-2-等待-x2F-通知机制" class="headerlink" title="5.2 等待&#x2F;通知机制"></a>5.2 等待&#x2F;通知机制</h2><ul><li><code>Object.wait()</code> : 进入等待，并释放锁</li><li><code>notify()</code> : 随机叫醒一个正在等待的线程</li><li><code>notifyAll()</code> : 叫醒所有正在等待的线程</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WaitAndNotify</span> <span class="token punctuation">&#123;</span><span class="token comment">// 使用同一个对象锁</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Object</span> lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">ThreadA</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>lock<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ThreadA: "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 随机叫醒等待中的线程</span>                        lock<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 进入等待，等待唤醒，释放锁</span>                        lock<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>                lock<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">ThreadB</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>lock<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ThreadB: "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>                        lock<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        lock<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>                lock<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ThreadA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ThreadB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 输出：</span><span class="token class-name">ThreadA</span><span class="token operator">:</span> <span class="token number">0</span><span class="token class-name">ThreadB</span><span class="token operator">:</span> <span class="token number">0</span><span class="token class-name">ThreadA</span><span class="token operator">:</span> <span class="token number">1</span><span class="token class-name">ThreadB</span><span class="token operator">:</span> <span class="token number">1</span><span class="token class-name">ThreadA</span><span class="token operator">:</span> <span class="token number">2</span><span class="token class-name">ThreadB</span><span class="token operator">:</span> <span class="token number">2</span><span class="token class-name">ThreadA</span><span class="token operator">:</span> <span class="token number">3</span><span class="token class-name">ThreadB</span><span class="token operator">:</span> <span class="token number">3</span><span class="token class-name">ThreadA</span><span class="token operator">:</span> <span class="token number">4</span><span class="token class-name">ThreadB</span><span class="token operator">:</span> <span class="token number">4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-3-使用volatile实现信号量"><a href="#5-3-使用volatile实现信号量" class="headerlink" title="5.3 使用volatile实现信号量"></a>5.3 使用volatile实现信号量</h2><blockquote><p>volatile关键字能够保证内存的可见性，如果用volatile关键字声明了一个变量，在一个线程里面改变了这个变量的值，那其它线程是立马可见更改后的值的</p></blockquote><p>示例（非线程安全的）：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Signal</span> <span class="token punctuation">&#123;</span><span class="token comment">// 保证可见性</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">volatile</span> <span class="token keyword">int</span> signal <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">ThreadA</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>signal <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>signal <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"threadA: "</span> <span class="token operator">+</span> signal<span class="token punctuation">)</span><span class="token punctuation">;</span>                    signal<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">ThreadB</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>signal <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>signal <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"threadB: "</span> <span class="token operator">+</span> signal<span class="token punctuation">)</span><span class="token punctuation">;</span>                    signal <span class="token operator">=</span> signal <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ThreadA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ThreadB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 输出：</span>threadA<span class="token operator">:</span> <span class="token number">0</span>threadB<span class="token operator">:</span> <span class="token number">1</span>threadA<span class="token operator">:</span> <span class="token number">2</span>threadB<span class="token operator">:</span> <span class="token number">3</span>threadA<span class="token operator">:</span> <span class="token number">4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-4-管道"><a href="#5-4-管道" class="headerlink" title="5.4 管道"></a>5.4 管道</h2><p>基于字符的：</p><ul><li><code>PipedWriter</code></li><li><code>PipedReader</code></li></ul><p>基于字节流的：</p><ul><li><code>PipedOutputStream</code></li><li><code>PipedInputStream</code></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Pipe</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">ReaderThread</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token class-name">PipedReader</span> reader<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">ReaderThread</span><span class="token punctuation">(</span><span class="token class-name">PipedReader</span> reader<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>reader <span class="token operator">=</span> reader<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"this is reader"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> receive <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>receive <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span>receive<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">WriterThread</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token class-name">PipedWriter</span> writer<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">WriterThread</span><span class="token punctuation">(</span><span class="token class-name">PipedWriter</span> writer<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>writer <span class="token operator">=</span> writer<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"this is writer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> receive <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    writer<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">PipedWriter</span> writer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PipedWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">PipedReader</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PipedReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        writer<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>reader<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 这里注意一定要连接，才能通信</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ReaderThread</span><span class="token punctuation">(</span>reader<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">WriterThread</span><span class="token punctuation">(</span>writer<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 输出：</span><span class="token keyword">this</span> is reader<span class="token keyword">this</span> is writertest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-5-一些方法"><a href="#5-5-一些方法" class="headerlink" title="5.5 一些方法"></a>5.5 一些方法</h2><h3 id="5-5-1-join方法"><a href="#5-5-1-join方法" class="headerlink" title="5.5.1 join方法"></a>5.5.1 join方法</h3><p>让当前线程陷入“等待”状态，等join的这个线程执行完成后，再继续执行当前线程</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Join</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">ThreadA</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是子线程，我先睡一秒"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是子线程，我睡完了一秒"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ThreadA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"如果不加join方法，我会先被打出来，加了就不一样了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-5-2-sleep方法"><a href="#5-5-2-sleep方法" class="headerlink" title="5.5.2 sleep方法"></a>5.5.2 sleep方法</h3><p><strong>sleep方法并不会释放锁，而wait方法会释放锁</strong></p><p>区别：</p><ul><li>wait可以指定时间，也可以不指定；而sleep必须指定时间</li><li>wait释放cpu资源，同时释放锁；sleep释放cpu资源，但是不释放锁，所以易死锁</li><li>wait必须放在同步块或同步方法中，而sleep可以在任意位置</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入理解Java虚拟机之自动内存管理</title>
      <link href="/2023/06/01/java-nei-cun-qu-yu-yu-nei-cun-yi-chu-yi-chang/"/>
      <url>/2023/06/01/java-nei-cun-qu-yu-yu-nei-cun-yi-chu-yi-chang/</url>
      
        <content type="html"><![CDATA[<h1 id="二、自动内存管理"><a href="#二、自动内存管理" class="headerlink" title="二、自动内存管理"></a>二、自动内存管理</h1><h2 id="Java内存区域与内存溢出异常"><a href="#Java内存区域与内存溢出异常" class="headerlink" title="Java内存区域与内存溢出异常"></a>Java内存区域与内存溢出异常</h2><h3 id="运行时数据区域"><a href="#运行时数据区域" class="headerlink" title="运行时数据区域"></a>运行时数据区域</h3><p>JDK8前的分布：</p><p><img src="https://s3.bmp.ovh/imgs/2022/04/20/9e99746c42b84fb8.png" alt="image-20220111114110664"></p><h4 id="程序计数器"><a href="#程序计数器" class="headerlink" title="程序计数器"></a>程序计数器</h4><ul><li>用于记录从内存执行的下一条指令的地址，线程私有的一小块内存，也是唯一不会报出OOM异常的区域</li></ul><p><img src="https://s3.bmp.ovh/imgs/2022/04/21/ba4c2c7f0767af6e.png"></p><h4 id="Java虚拟机栈"><a href="#Java虚拟机栈" class="headerlink" title="Java虚拟机栈"></a>Java虚拟机栈</h4><ul><li><p>Java虚拟机栈（Java Virtual Machine Stack）是线程私有的，它的生命周期与线程相同。虚拟机栈描述的是Java方法执行的线程内存模型：每个方法被执行的时候，Java虚拟机都会同步创建一个栈帧（Stack Frame）用于存储局部变量表、操作数栈、动态连接、方法出口等信息。每一个方法被调用直至执行完毕的过程，就对应着一个栈帧在虚拟机栈中从入栈到出栈的过程</p><img src="https://s3.bmp.ovh/imgs/2022/04/21/14169af4f06dae4e.png" alt="image-20220111104206931" style="zoom:80%;" /></li><li><p>如果线程请求的栈深度大于虚拟机所允许的深度，将抛出<code>StackOverflowError</code>异常</p><img src="https://s3.bmp.ovh/imgs/2022/04/21/a9aba57558d8726e.png" alt="image-20220111104648533" style="zoom:80%;" /></li><li><p>如果Java虚拟机栈容量可以动态扩展，当栈扩展时无法申请到足够的内存会抛出<code>OutOfMemoryError</code>异常</p><img src="https://s3.bmp.ovh/imgs/2022/04/21/df21359fa1b737ac.png" alt="image-20220111105125875" style="zoom:80%;" /></li></ul><h4 id="本地方法栈"><a href="#本地方法栈" class="headerlink" title="本地方法栈"></a>本地方法栈</h4><ul><li>与Java虚拟机栈类似，只不过服务对象不一样，本地方法栈为虚拟机使用到的本地方法服务，Java虚拟机栈为虚拟机执行Java方法（字节码）服务</li></ul><h4 id="Java堆"><a href="#Java堆" class="headerlink" title="Java堆"></a>Java堆</h4><ul><li>对于Java应用程序来说，Java堆（Java Heap）是虚拟机所管理的内存中<strong>最大</strong>的一块。Java堆是被所有<strong>线程共享</strong>的一块内存区域，在虚拟机启动时创建。此内存区域的唯一目的就是存放对象实例，Java世界里“几乎”所有的对象实例都在这里分配内存</li><li>当堆内存没有足够空间给对象实例分配内存并且堆内存无法扩展时都会抛出OOM异常</li></ul><h4 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h4><ul><li>方法区与Java堆类似，也是各个线程共享的区域，它用于存储已被虚拟机加载的类型信息、常量、静态变量、即时编译器编译后的代码缓存等数据</li><li>通常用别名“非堆”来与Java堆做区分</li><li>当方法区没有足够空间满足内存分配要求时，也会抛出OOM异常</li></ul><h4 id="运行时常量池"><a href="#运行时常量池" class="headerlink" title="运行时常量池"></a>运行时常量池</h4><ul><li>运行时常量池是方法区的一部分，用于存放编译期生成的各种字面量与符号引用</li><li>受方法区内存限制，当常量池无法再申请到内存时会抛出OOM异常</li></ul><h4 id="直接内存"><a href="#直接内存" class="headerlink" title="直接内存"></a>直接内存</h4><ul><li>直接内存并不是运行时数据区的一部分，但它受总内存限制，也可能会出现OOM异常</li></ul><h3 id="HotSpot虚拟机对象探秘"><a href="#HotSpot虚拟机对象探秘" class="headerlink" title="HotSpot虚拟机对象探秘"></a>HotSpot虚拟机对象探秘</h3><h4 id="对象的创建"><a href="#对象的创建" class="headerlink" title="对象的创建"></a>对象的创建</h4><p>在类加载检查通过后，接下来虚拟机将为新生对象分配内存，而内存分配方式主要有两种：</p><ul><li><p>指针碰撞</p><p><img src="https://s3.bmp.ovh/imgs/2022/04/21/41a0dc9ea8cdf6b0.png" alt="image-20211227162055138"></p></li><li><p>空闲列表</p><p><img src="https://s3.bmp.ovh/imgs/2022/04/21/3800ad4acd782b6e.png" alt="image-20211227162109009"></p></li></ul><h4 id="对象的内存布局"><a href="#对象的内存布局" class="headerlink" title="对象的内存布局"></a>对象的内存布局</h4><p>在HotSpot虚拟机里，对象在堆内存中的存储布局可以划分为三个部分：对象头（Header）、实例数据（Instance Data）和对齐填充（Padding）</p><ul><li><p>对象头</p><ul><li>存储对象自身运行时数据（Mark Word），如哈希码（HashCode）、GC分代年龄、锁状态标志、线程持有的锁、偏向线程ID、偏向时间戳等</li><li>类型指针（对象指向其类型元数据的指针）</li></ul></li><li><p>实例数据</p><ul><li>对象真正存储的有效信息，即代码中的各类型字段内容</li></ul></li><li><p>对齐填充</p><ul><li>由于HotSpot虚拟机的自动内存管理系统要求对象起始地址必须是8字节的整数倍，即任何对象大小都是8字节的整数倍，故实例数据部分没有对齐的话需要对齐填充来充当占位符补全</li></ul></li></ul><p><img src="https://s3.bmp.ovh/imgs/2022/04/21/de4be038a42b2f22.png" alt="image-20220109214344338"></p><h4 id="对象的访问定位"><a href="#对象的访问定位" class="headerlink" title="对象的访问定位"></a>对象的访问定位</h4><p>Java程序会通过栈上的reference（一个指向对象的引用）数据来操作堆上的具体对象，具体的访问方式由虚拟机实现。</p><p>主流访问方式主要有两种：</p><ul><li><p>句柄</p><p><img src="https://s3.bmp.ovh/imgs/2022/04/21/7c2102dc5704af1e.png" alt="image-20211228093444944"></p></li><li><p>直接指针</p><p><img src="https://s3.bmp.ovh/imgs/2022/04/21/aa72690080bf9e6b.png" alt="image-20211228093757046"></p></li></ul><h3 id="实战OOM异常"><a href="#实战OOM异常" class="headerlink" title="实战OOM异常"></a>实战OOM异常</h3><p>采用不同的JDK及垃圾回收收集器均可能会产生不同的结果，以下实战均以JDK8，ParallelGC垃圾收集器为例运行代码</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查看默认垃圾收集器VM参数</span><span class="token parameter variable">-XX:+PrintCommandLineFlags</span> <span class="token parameter variable">-version</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://s3.bmp.ovh/imgs/2022/04/21/5d4ea100f5836fce.png" alt="image-20220111171325696"></p><h4 id="Java堆溢出"><a href="#Java堆溢出" class="headerlink" title="Java堆溢出"></a>Java堆溢出</h4><p>只要不断创建对象实例，同时又避免垃圾收集器回收，这样达到最大堆容量限制后便能产生OOM异常</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Hello</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * -Xms：最小堆内存20M -Xmx：最大堆内存20M 两者设置一样避免自动扩展      * VM参数：-Xms20M -Xmx20M -XX:+HeapDumpOnOutOfMemoryError     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Hello</span><span class="token punctuation">></span></span> hellos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            hellos<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s3.bmp.ovh/imgs/2022/04/21/ba05a8f4ac0b9d85.png" alt="image-20220111144709391"></p><h4 id="Java虚拟机栈和本地方法栈溢出"><a href="#Java虚拟机栈和本地方法栈溢出" class="headerlink" title="Java虚拟机栈和本地方法栈溢出"></a>Java虚拟机栈和本地方法栈溢出</h4><blockquote><p>《Java虚拟机规范》明确允许Java虚拟机实现自行选择是否支持栈的动态扩展，而HotSpot虚拟机的选择是不支持扩展，所以除非在创建线程申请内存时就因无法获得足够内存而出现OutOfMemoryError异常，否则在线程运行时是不会因为扩展而导致内存溢出的，只会因为栈容量无法容纳新的栈帧而导致StackOverflowError异常</p></blockquote><ul><li>使用-Xss参数减少栈容量</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Hello</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * VM参数：-Xss128k     */</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> stackLength <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">stackLeak</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        stackLength<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token comment">// 递归调用方法，不断入栈</span>        <span class="token function">stackLeak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Hello</span> oom <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 调用方法，入栈</span>            oom<span class="token punctuation">.</span><span class="token function">stackLeak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"stack length:"</span> <span class="token operator">+</span> oom<span class="token punctuation">.</span>stackLength<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> e<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s3.bmp.ovh/imgs/2022/04/21/5190eda9dc411811.png" alt="image-20220111150618643"></p><ul><li>定义了大量的本地变量，增大此方法帧中本地变量表的长度(即调整栈帧大小)</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Hello</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> stackLength <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 局部变量多，栈帧增大</span>        <span class="token keyword">long</span> unused1<span class="token punctuation">,</span> unused2<span class="token punctuation">,</span> unused3<span class="token punctuation">,</span> unused4<span class="token punctuation">,</span> unused5<span class="token punctuation">,</span>                unused6<span class="token punctuation">,</span> unused7<span class="token punctuation">,</span> unused8<span class="token punctuation">,</span> unused9<span class="token punctuation">,</span> unused10<span class="token punctuation">,</span>                unused11<span class="token punctuation">,</span> unused12<span class="token punctuation">,</span> unused13<span class="token punctuation">,</span> unused14<span class="token punctuation">,</span> unused15<span class="token punctuation">,</span>                unused16<span class="token punctuation">,</span> unused17<span class="token punctuation">,</span> unused18<span class="token punctuation">,</span> unused19<span class="token punctuation">,</span> unused20<span class="token punctuation">,</span>                unused21<span class="token punctuation">,</span> unused22<span class="token punctuation">,</span> unused23<span class="token punctuation">,</span> unused24<span class="token punctuation">,</span> unused25<span class="token punctuation">,</span>                unused26<span class="token punctuation">,</span> unused27<span class="token punctuation">,</span> unused28<span class="token punctuation">,</span> unused29<span class="token punctuation">,</span> unused30<span class="token punctuation">,</span>                unused31<span class="token punctuation">,</span> unused32<span class="token punctuation">,</span> unused33<span class="token punctuation">,</span> unused34<span class="token punctuation">,</span> unused35<span class="token punctuation">,</span>                unused36<span class="token punctuation">,</span> unused37<span class="token punctuation">,</span> unused38<span class="token punctuation">,</span> unused39<span class="token punctuation">,</span> unused40<span class="token punctuation">,</span>                unused41<span class="token punctuation">,</span> unused42<span class="token punctuation">,</span> unused43<span class="token punctuation">,</span> unused44<span class="token punctuation">,</span> unused45<span class="token punctuation">,</span>                unused46<span class="token punctuation">,</span> unused47<span class="token punctuation">,</span> unused48<span class="token punctuation">,</span> unused49<span class="token punctuation">,</span> unused50<span class="token punctuation">,</span>                unused51<span class="token punctuation">,</span> unused52<span class="token punctuation">,</span> unused53<span class="token punctuation">,</span> unused54<span class="token punctuation">,</span> unused55<span class="token punctuation">,</span>                unused56<span class="token punctuation">,</span> unused57<span class="token punctuation">,</span> unused58<span class="token punctuation">,</span> unused59<span class="token punctuation">,</span> unused60<span class="token punctuation">,</span>                unused61<span class="token punctuation">,</span> unused62<span class="token punctuation">,</span> unused63<span class="token punctuation">,</span> unused64<span class="token punctuation">,</span> unused65<span class="token punctuation">,</span>                unused66<span class="token punctuation">,</span> unused67<span class="token punctuation">,</span> unused68<span class="token punctuation">,</span> unused69<span class="token punctuation">,</span> unused70<span class="token punctuation">,</span>                unused71<span class="token punctuation">,</span> unused72<span class="token punctuation">,</span> unused73<span class="token punctuation">,</span> unused74<span class="token punctuation">,</span> unused75<span class="token punctuation">,</span>                unused76<span class="token punctuation">,</span> unused77<span class="token punctuation">,</span> unused78<span class="token punctuation">,</span> unused79<span class="token punctuation">,</span> unused80<span class="token punctuation">,</span>                unused81<span class="token punctuation">,</span> unused82<span class="token punctuation">,</span> unused83<span class="token punctuation">,</span> unused84<span class="token punctuation">,</span> unused85<span class="token punctuation">,</span>                unused86<span class="token punctuation">,</span> unused87<span class="token punctuation">,</span> unused88<span class="token punctuation">,</span> unused89<span class="token punctuation">,</span> unused90<span class="token punctuation">,</span>                unused91<span class="token punctuation">,</span> unused92<span class="token punctuation">,</span> unused93<span class="token punctuation">,</span> unused94<span class="token punctuation">,</span> unused95<span class="token punctuation">,</span>                unused96<span class="token punctuation">,</span> unused97<span class="token punctuation">,</span> unused98<span class="token punctuation">,</span> unused99<span class="token punctuation">,</span> unused100<span class="token punctuation">;</span>        stackLength<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token comment">// 递归调用，不断入栈</span>        <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        unused1 <span class="token operator">=</span> unused2 <span class="token operator">=</span> unused3 <span class="token operator">=</span> unused4 <span class="token operator">=</span> unused5 <span class="token operator">=</span> unused6 <span class="token operator">=</span> unused7 <span class="token operator">=</span> unused8 <span class="token operator">=</span> unused9 <span class="token operator">=</span> unused10         <span class="token operator">=</span> unused11 <span class="token operator">=</span> unused12 <span class="token operator">=</span> unused13 <span class="token operator">=</span> unused14 <span class="token operator">=</span> unused15 <span class="token operator">=</span> unused16 <span class="token operator">=</span> unused17 <span class="token operator">=</span> unused18 <span class="token operator">=</span> unused19         <span class="token operator">=</span> unused20 <span class="token operator">=</span> unused21 <span class="token operator">=</span> unused22 <span class="token operator">=</span> unused23 <span class="token operator">=</span> unused24 <span class="token operator">=</span> unused25 <span class="token operator">=</span> unused26 <span class="token operator">=</span> unused27 <span class="token operator">=</span> unused28        <span class="token operator">=</span> unused29 <span class="token operator">=</span> unused30 <span class="token operator">=</span> unused31 <span class="token operator">=</span> unused32 <span class="token operator">=</span> unused33 <span class="token operator">=</span> unused34 <span class="token operator">=</span> unused35 <span class="token operator">=</span> unused36 <span class="token operator">=</span> unused37         <span class="token operator">=</span> unused38 <span class="token operator">=</span> unused39 <span class="token operator">=</span> unused40 <span class="token operator">=</span> unused41 <span class="token operator">=</span> unused42 <span class="token operator">=</span> unused43 <span class="token operator">=</span> unused44 <span class="token operator">=</span> unused45 <span class="token operator">=</span> unused46         <span class="token operator">=</span> unused47 <span class="token operator">=</span> unused48 <span class="token operator">=</span> unused49 <span class="token operator">=</span> unused50 <span class="token operator">=</span> unused51 <span class="token operator">=</span> unused52 <span class="token operator">=</span> unused53 <span class="token operator">=</span> unused54 <span class="token operator">=</span> unused55        <span class="token operator">=</span> unused56 <span class="token operator">=</span> unused57 <span class="token operator">=</span> unused58 <span class="token operator">=</span> unused59 <span class="token operator">=</span> unused60 <span class="token operator">=</span> unused61 <span class="token operator">=</span> unused62 <span class="token operator">=</span> unused63 <span class="token operator">=</span> unused64         <span class="token operator">=</span> unused65 <span class="token operator">=</span> unused66 <span class="token operator">=</span> unused67 <span class="token operator">=</span> unused68 <span class="token operator">=</span> unused69 <span class="token operator">=</span> unused70 <span class="token operator">=</span> unused71 <span class="token operator">=</span> unused72 <span class="token operator">=</span> unused73         <span class="token operator">=</span> unused74 <span class="token operator">=</span> unused75 <span class="token operator">=</span> unused76 <span class="token operator">=</span> unused77 <span class="token operator">=</span> unused78 <span class="token operator">=</span> unused79 <span class="token operator">=</span> unused80 <span class="token operator">=</span> unused81 <span class="token operator">=</span> unused82        <span class="token operator">=</span> unused83 <span class="token operator">=</span> unused84 <span class="token operator">=</span> unused85 <span class="token operator">=</span> unused86 <span class="token operator">=</span> unused87 <span class="token operator">=</span> unused88 <span class="token operator">=</span> unused89 <span class="token operator">=</span> unused90 <span class="token operator">=</span> unused91         <span class="token operator">=</span> unused92 <span class="token operator">=</span> unused93 <span class="token operator">=</span> unused94 <span class="token operator">=</span> unused95 <span class="token operator">=</span> unused96 <span class="token operator">=</span> unused97 <span class="token operator">=</span> unused98 <span class="token operator">=</span> unused99 <span class="token operator">=</span> unused100 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Error</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"stack length:"</span> <span class="token operator">+</span> stackLength<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> e<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s3.bmp.ovh/imgs/2022/04/21/6ee4e647f0440706.png" alt="image-20220111152357722"></p><h4 id="方法区和运行时常量池溢出"><a href="#方法区和运行时常量池溢出" class="headerlink" title="方法区和运行时常量池溢出"></a>方法区和运行时常量池溢出</h4><ul><li>方法区容量控制</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Hello</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * JDK8前VM参数： -XX:PermSize=6M -XX:MaxPermSize=6M     * JDK8VM参数：-XX:MetaspaceSize=6M -XX:MaxMetaspaceSize=6M     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 使用Set保持常量池引用，避免Full GC回收常量池行为</span>        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 在short范围内足以让6M大小的PermSize（永久代，JDK8前有，JDK8及之后版本都已采用元空间替代）产生OOM了</span>        <span class="token keyword">short</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment">// JDK8前，抛出OOM异常</span>        <span class="token comment">// JDK8下，正常情况会进入死循环，并不会抛出任何异常</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// String.intern()进入字符串常量池</span>            set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述代码在JDK8环境下并不会抛出任何异常，这是因为字符串常量池已经被移至Java堆之中，控制方法区容量的大小对Java堆并没有什么影响</p><ul><li><p><code>String.intern()</code>方法介绍：如果字符串常量池中已经包含一个等于此String对象的字符串，则返回常量池中这个字符串的String对象；否则，将此String对象包含的字符复制添加到常量池中，并返回此String对象的引用</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**     * JDK6：false false     * JDK8：true  false     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> str1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token string">"计算机"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"软件"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str1<span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> str1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> str2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token string">"ja"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"va"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str2<span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> str2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>JDK6因为<code>new StringBuilder()</code>分配到的是Java堆内存，而<code>String.intern()</code>会把首次遇到的字符串复制到的是字符串常量池（方法区），所以都是false</p><p><img src="https://s3.bmp.ovh/imgs/2022/04/21/3adfe23816b6eaea.png" alt="image-20220111202913575"></p></li><li><p>JDK8因为字符串常量池都移动到了Java堆中，<code>new StringBuilder()</code>分配到Java堆内存后，字符串常量池也记录到了首次遇到的实例引用，那么<code>String.intern()</code>和<code>new StringBuilder()</code>都是同一个了（<strong>true</strong>）；而因为<code>java</code>字符串在<code>sun.misc.Version</code>类加载时已进入常量池，那么<code>intern()</code>方法就返回当前常量池的String对象，<code>new StringBuilder()</code>在堆中重新创建了一个，自然也就不一样了(<strong>false</strong>)</p><p><img src="https://s3.bmp.ovh/imgs/2022/04/21/5b2c3e275a438f55.png" alt="image-20220111202933110"></p></li></ul></li><li><p>方法区的主要职责是用于存放类型的相关信息，如类名、访问修饰符、常量池、字段描述、方法描述等，因此运行时产生大量的类填满方法区也可以造成方法区溢出</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/* * 借助CGLib造成方法区溢出 * VM参数：-XX:MetaspaceSize=10M -XX:MaxMetaspaceSize=10M */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Hello</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token comment">// 创建CgLib增强对象</span>            <span class="token class-name">Enhancer</span> enhancer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Enhancer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 设置被代理的类</span>            enhancer<span class="token punctuation">.</span><span class="token function">setSuperclass</span><span class="token punctuation">(</span><span class="token class-name">OOMObject</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            enhancer<span class="token punctuation">.</span><span class="token function">setUseCache</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 指定拦截器</span>            enhancer<span class="token punctuation">.</span><span class="token function">setCallback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MethodInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token annotation punctuation">@Override</span>                <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">intercept</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">,</span> <span class="token class-name">MethodProxy</span> proxy<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">return</span> proxy<span class="token punctuation">.</span><span class="token function">invokeSuper</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 创建代理对象</span>            enhancer<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">OOMObject</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s3.bmp.ovh/imgs/2022/04/21/bbc39bb850ab62db.png" alt="image-20220112095626819"></p></li></ul><h4 id="本机直接内存溢出"><a href="#本机直接内存溢出" class="headerlink" title="本机直接内存溢出"></a>本机直接内存溢出</h4><p>直接内存（Direct Memory）的容量大小可通过-XX：MaxDirectMemorySize参数来指定，如果不去指定，则默认与Java堆最大值（由-Xmx指定）一致</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 使用unsafe分配本机内存</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Hello</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// VM参数：-Xmx20M -XX:MaxDirectMemorySize=10M</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> _1MB <span class="token operator">=</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Field</span> unsafeField <span class="token operator">=</span> <span class="token class-name">Unsafe</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        unsafeField<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Unsafe</span> unsafe <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Unsafe</span><span class="token punctuation">)</span> unsafeField<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 真正申请分配内存</span>            unsafe<span class="token punctuation">.</span><span class="token function">allocateMemory</span><span class="token punctuation">(</span>_1MB<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s3.bmp.ovh/imgs/2022/04/21/da701fcc1bddf655.png" alt="image-20220111200518919"></p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><blockquote><p>《深入理解Java虚拟机》（第三版） 第2章：Java内存区域与内存溢出异常</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 深入理解Java虚拟机系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 深入理解Java虚拟机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker快速入门</title>
      <link href="/2023/06/01/docker-kuai-su-ru-men/"/>
      <url>/2023/06/01/docker-kuai-su-ru-men/</url>
      
        <content type="html"><![CDATA[<h2 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a><strong>安装docker</strong></h2><ol><li><p>安装依赖</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> apt-transport-https ca-certificates <span class="token function">curl</span> gnupg2 software-properties-common<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>信任docker的GPG公钥</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> <span class="token parameter variable">-fsSL</span> <span class="token operator">&lt;</span>https://download.docker.com/linux/ubuntu/gpg<span class="token operator">></span> <span class="token operator">|</span> <span class="token function">sudo</span> apt-key <span class="token function">add</span> -<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>添加软件仓库</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> add-apt-repository <span class="token punctuation">\</span><span class="token punctuation">\</span>   <span class="token string">"deb [arch=amd64] &lt;https://mirrors.tuna.tsinghua.edu.cn/docker-ce/linux/ubuntu> <span class="token entity" title="\\">\\</span>   <span class="token variable"><span class="token variable">$(</span>lsb_release <span class="token parameter variable">-cs</span><span class="token variable">)</span></span> <span class="token entity" title="\\">\\</span>   stable"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>更新源，并安装</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> update<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> docker-ce<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>添加用户组后，重启电脑</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> adduser <span class="token environment constant">$USER</span> <span class="token function">docker</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h2 id="启动docker"><a href="#启动docker" class="headerlink" title="启动docker"></a><strong>启动docker</strong></h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">service</span> <span class="token function">docker</span> start<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="重启docker"><a href="#重启docker" class="headerlink" title="重启docker"></a><strong>重启docker</strong></h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">service</span> <span class="token function">docker</span> restart<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a><strong>拉取镜像</strong></h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 默认拉取最新版本latest</span><span class="token function">docker</span> pull mysql<span class="token comment"># 拉取zookeeper 报错 408，解决方法：安装加速器</span><span class="token function">curl</span> <span class="token parameter variable">-sSL</span> <span class="token operator">&lt;</span>https://get.daocloud.io/daotools/set_mirror.sh<span class="token operator">></span> <span class="token operator">|</span> <span class="token function">sh</span> <span class="token parameter variable">-s</span> <span class="token operator">&lt;</span>http://f1361db2.m.daocloud.io<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="查看所有镜像"><a href="#查看所有镜像" class="headerlink" title="查看所有镜像"></a><strong>查看所有镜像</strong></h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 所有运行中的镜像</span><span class="token function">docker</span> image <span class="token function">ls</span><span class="token comment"># 所有安装好的镜像</span><span class="token function">docker</span> images<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a><strong>删除镜像</strong></h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> rmi <span class="token punctuation">[</span>names<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a><strong>启动容器</strong></h2><p>启动<code>mysql</code>为例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">--name</span> mysql <span class="token parameter variable">-p</span> <span class="token number">3306</span>:3306 <span class="token parameter variable">-e</span> <span class="token assign-left variable">MYSQL_ROOT_PASSWORD</span><span class="token operator">=</span><span class="token number">123456</span> <span class="token parameter variable">-d</span> mysql<span class="token punctuation">[</span>：5.6<span class="token punctuation">]</span><span class="token comment"># 启动zookeeper</span><span class="token function">docker</span> run <span class="token parameter variable">--privileged</span><span class="token operator">=</span>true <span class="token parameter variable">--name</span> zookeeper <span class="token parameter variable">--publish</span> <span class="token number">2181</span>:2181  <span class="token parameter variable">-d</span> zookeeper:latest<span class="token comment"># 启动redis</span><span class="token function">docker</span> run <span class="token parameter variable">-p</span> <span class="token number">6379</span>:6379 <span class="token parameter variable">-d</span> redis:latest redis-server<span class="token comment"># 启动rabbitmq 5672是应用访问端口号， 15672是控制台端口号</span><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">5672</span>:5672 <span class="token parameter variable">-p</span> <span class="token number">15672</span>:15672 <span class="token parameter variable">--name</span> rabbitmq rabbitmq:management<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>-name</code>：起别名</li><li>映射端口<code>3306</code></li><li><code>MYSQL_ROOT_PASSWORD</code>：指定密码</li><li><code>d</code>：指定运行模式，不会进入容器</li><li><code>[:5.6]</code>：指定版本，可省略</li><li><code>-privileged=true</code> 赋予root权限</li></ul><h2 id="查看当前docker容器的运行状态"><a href="#查看当前docker容器的运行状态" class="headerlink" title="查看当前docker容器的运行状态"></a><strong>查看当前docker容器的运行状态</strong></h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> <span class="token function">ps</span> <span class="token comment"># 查看运行中的容器</span><span class="token function">docker</span> <span class="token function">ps</span> <span class="token parameter variable">-a</span> <span class="token comment"># 查看所有创建的容器</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a><strong>进入容器</strong></h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> mysql <span class="token function">bash</span><span class="token comment"># 进入MySQL</span>mysql <span class="token parameter variable">-u</span> root <span class="token parameter variable">-p</span> 密码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="停止容器"><a href="#停止容器" class="headerlink" title="停止容器"></a><strong>停止容器</strong></h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> stop <span class="token punctuation">[</span>containerId / names<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="启动一个已停止的容器"><a href="#启动一个已停止的容器" class="headerlink" title="启动一个已停止的容器"></a><strong>启动一个已停止的容器</strong></h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> start <span class="token punctuation">[</span>containerId / names<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a><strong>删除容器</strong></h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> <span class="token function">rm</span> <span class="token punctuation">[</span>containerId / names<span class="token punctuation">]</span><span class="token comment"># 一次删除所有停止的容器</span><span class="token function">docker</span> <span class="token function">rm</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">docker</span> <span class="token function">ps</span> <span class="token parameter variable">-a</span> <span class="token parameter variable">-q</span><span class="token variable">)</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="映射外部文件夹"><a href="#映射外部文件夹" class="headerlink" title="映射外部文件夹"></a><strong>映射外部文件夹</strong></h2><p>以<code>Tomcat</code>为例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">--name</span> tomcat <span class="token parameter variable">-p</span> <span class="token number">8089</span>:8080 <span class="token parameter variable">-v</span> /d/mydockertomcat:/usr/local/tomcat/webapps <span class="token parameter variable">-d</span> tomcat<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p><code>v</code> ：映射文件夹</p></li><li><p><code>/d/mydockertomcat:/</code>：本地D盘，mydockertomcat文件夹</p></li><li><p><code>/usr/local/tomcat/webapps</code>：容器中tomcat文件夹</p></li><li><p>Tomcat访问404，解决方法：需要把webapps.dist里所有的内容放置在webapps下才可以</p></li><li><p>修改webapps文件夹时报错：</p><pre class="line-numbers language-none"><code class="language-none">Device or resource busy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>原因：挂载外部文件夹的原因，只能把webapps.dist下所有文件移动到webapps文件夹下</li></ul></li></ul><h2 id="保存修改后的镜像"><a href="#保存修改后的镜像" class="headerlink" title="保存修改后的镜像"></a><strong>保存修改后的镜像</strong></h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> commit <span class="token punctuation">[</span>选项<span class="token punctuation">]</span> <span class="token operator">&lt;</span>容器ID或容器名<span class="token operator">></span> <span class="token punctuation">[</span><span class="token operator">&lt;</span>仓库名<span class="token operator">></span><span class="token punctuation">[</span>:<span class="token operator">&lt;</span>标签<span class="token operator">></span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token function">docker</span> commit <span class="token parameter variable">--author</span> <span class="token string">"zhou"</span> <span class="token parameter variable">--message</span> <span class="token string">"修复404"</span> tomcat tomcat:v2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="查看容器ip"><a href="#查看容器ip" class="headerlink" title="查看容器ip"></a>查看容器ip</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> inspect redis_s <span class="token operator">|</span> <span class="token function">grep</span> IPAddress<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://images.unsplash.com/photo-1605745341112-85968b19335b?ixlib=rb-1.2.1&q=85&fm=jpg&crop=entropy&cs=srgb&w=6000" alt="img"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 技能 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CBA重磅罚单</title>
      <link href="/2023/06/01/cba-chong-bang-fa-dan/"/>
      <url>/2023/06/01/cba-chong-bang-fa-dan/</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文地址：</p><p><a href="https://mp.weixin.qq.com/s/_nuY7RkNS4C7RICGosHtPw">https://mp.weixin.qq.com/s/_nuY7RkNS4C7RICGosHtPw</a></p></blockquote><h1 id="China-basketball-teams-thrown-out-after-match-fixing-claims"><a href="#China-basketball-teams-thrown-out-after-match-fixing-claims" class="headerlink" title="China basketball teams thrown out after match-fixing claims"></a><strong>China basketball teams thrown out after match-fixing claims</strong></h1><hr><p>Two teams were disqualified from the ongoing Chinese Basketball Association season on Monday after suspicions of match-fixing, with Yao Ming bemoaning a “sorrowful weekend”.</p><p>The Shanghai Sharks overtook the Jiangsu Dragons in the last two minutes of a CBA playoff game on Friday after the Dragons lost possession of the ball multiple times.</p><p>The Sharks – where CBA president and NBA all-star Yao began his professional career – won the game 108-104, advancing to the quarter-finals.</p><p>The match sparked fury among basketball fans on Chinese social media and allegations of match-fixing. The CBA said on Saturday that it would investigate the game.</p><p>The CBA did not use the phrase “match-fixing” on Monday and instead accused them of “passive playing” during two recent games involving the teams, state broadcaster CCTV reported.</p><p>In addition to being disqualified from this season, both teams had their budgets slashed by five million yuan ($730,000).</p><p>Their head coaches and general managers have been slapped with suspensions of three to five years, CCTV said.</p><p>“Both clubs have a long history… and both teams have produced milestone figures,” Yao said in video footage published by the state-run China News Service.</p><p>“The more we talk about it, the more pain we feel,” said the 42-year-old, who starred for the Houston Rockets in the NBA between 2002 and 2011.</p><hr><h1 id="CBA-sides-Shanghai-Jiangsu-disqualified-from-season-due-to-lack-of-competitive-effort"><a href="#CBA-sides-Shanghai-Jiangsu-disqualified-from-season-due-to-lack-of-competitive-effort" class="headerlink" title="CBA sides Shanghai, Jiangsu disqualified from season due to lack of competitive effort"></a><strong>CBA sides Shanghai, Jiangsu disqualified from season due to lack of competitive effort</strong></h1><hr><p>The Chinese Basketball Association (CBA) has disqualified the Shanghai Sharks and the Jiangsu Dragons from the 2022-2023 CBA season on Monday, citing their lack of competitive effort in the first round of the playoffs.</p><p>In a statement, the CBA Disciplinary and Ethics Commission confirmed that Shanghai displayed negative contention in the second game of the series, while Jiangsu demonstrated a lack of competitive effort in the third game, which Shanghai won 108-104 to advance.</p><p>The behavior of both teams constituted a grave violation of sportsmanship, leading to their disqualification from the 2022-2023 season and nullification of their results.</p><p>Each club received a fine of five million yuan (approximately 727,000 U.S. dollars).</p><p>Shanghai’s coach Li Chunjiang received a five-year ban, while his Jiangsu counterpart, Li Nan, faced a three-year suspension.</p><p>Jiangsu’s club general manager Shi Linjie was barred from basketball-related activities for five years, while Jiang Yusheng, general manager of the Shanghai club, faced a three-year restriction from basketball-related activities.</p><p>Following Shanghai’s disqualification, the CBA league’s governing body ruled that the Shenzhen Aviators would advance to the final four in the CBA playoffs.</p><hr><h2 id="生词记录"><a href="#生词记录" class="headerlink" title="生词记录"></a>生词记录</h2><blockquote><p><em>throw sb out</em> 开除，赶走，解雇（某人）</p><p><em>disqualify</em> 取消资格</p><p><em>ongoing</em> 进行中的，不断发展的，持续存在的</p><p><em>suspicion</em> 怀疑，嫌疑</p><p><em>match-fixing</em> 假球</p><p><em>bemoan</em> 哀叹，悲叹</p><p><em>overtake</em> 大于，超过</p><p><em>playoff</em> 季后赛</p><p><em>quarter-final</em> 四分之一决赛</p><p><em>spark</em> 引发</p><p><em>fury</em> 狂怒，暴怒</p><p><em>allegation</em> 指控，指责</p><p><em>phrase</em> 短语，说法，用语，警句</p><p><em>slash</em> 斜杠；猛削；大幅削减，大幅减少</p><p><em>slap</em> 拍打，掌掴</p><p><em>be slapped with</em> 处罚，惩罚</p><p><em>suspension</em> 暂停，中止；暂令停止；车辆的悬架，减震装置</p><p><em>footage</em> 片段镜头</p><p><em>disciplinary</em> 纪律的，惩戒的</p><p><em>ethic</em> 道德规范，行为准则，伦理</p><p><em>commission</em> 委员会；委任…为军官；安排…做</p><p><em>contention</em> 论点，主张，看法；争论，口角</p><p><em>grave</em> 严重的，重大的，严峻的</p><p><em>sportsmanship</em> 体育精神</p><p><em>nullification</em> 无效，取消，废弃</p><p><em>counterpart</em> 相反的，相应的</p><p><em>bar</em> 禁止，阻止；条状物</p></blockquote><h2 id="个人感悟"><a href="#个人感悟" class="headerlink" title="个人感悟"></a>个人感悟</h2><blockquote><p>深圳这波win了，一场不打躺着进四强了，哈哈。</p><p>不过李春江指导糊涂啊，这波直接晚年不保，看来是要退休了；至于李楠指导本来执教江苏正有机会取得点成就，为自己正名，结果搞出这出好戏，毁了自己，可惜啊。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 每日阅读分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 英语提升 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BBC:我为什么不会看查尔斯国王加冕典礼</title>
      <link href="/2023/06/01/bbc-wo-wei-shi-me-bu-hui-kan-cha-er-si-guo-wang-jia-mian-dian-li/"/>
      <url>/2023/06/01/bbc-wo-wei-shi-me-bu-hui-kan-cha-er-si-guo-wang-jia-mian-dian-li/</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文地址：<a href="https://mp.weixin.qq.com/s/zwn4EnJinxGkf_Hlb3VOUQ">https://mp.weixin.qq.com/s/zwn4EnJinxGkf_Hlb3VOUQ</a></p></blockquote><h1 id="Why-I-won’t-be-watching-the-King’s-coronation"><a href="#Why-I-won’t-be-watching-the-King’s-coronation" class="headerlink" title="Why I won’t be watching the King’s coronation"></a><strong>Why I won’t be watching the King’s coronation</strong></h1><hr><p>Millions of people are expected to tune into the coronation of King Charles III on 6 May. While some might revel in the crowds, parties, pomp and ceremony, others will do everything they can to avoid the occasion.</p><p>BBC News spoke to four people who will not be watching.</p><p><strong>‘It’s a huge waste of public money’</strong></p><p>Oli in Stroud will not be following the events either.</p><p>“I think it’s a huge waste of public money,” says the 51-year-old midwife.</p><p>For Oli, a hereditary head of state is elitist and undemocratic.</p><p>“You’ve got this tiny little band of elite at the top of our society that are thriving and then everybody else is scrabbling around trying to make ends meet and put food on the table,” she says.</p><p>As an NHS worker, she says taxpayers’ money could be better spent.</p><p>“The Royal Family have their own personal wealth and yet we, the taxpayers, are having to fund this parade in the middle of a financial crisis,” she says.</p><p>Instead of watching, she will be on shift at hospital helping to deliver babies.</p><p><strong>‘I’d rather have a lie-in and eat some doughnuts’</strong></p><p>Tarek Ahmed says he does not “care enough to watch for hours”.</p><p>“I’d rather have a lie-in and eat some doughnuts”, explains the 21-year-old marketing executive from Kent.</p><p>Tarek says he has not decided whether or not he supports the Royal Family.</p><p>“If they make the country money, happy days. That means more money for things like the NHS and education. But if that’s not the case then I don’t want them. I don’t know the answer,” he says.</p><p>A YouGov poll commissioned by the BBC’s Panorama programme suggests broad support for keeping the monarchy, with 58% preferring it to an elected head of state - which was supported by 26%.</p><p>Tarek plans to spend Saturday morning watching the new Avatar film with his family instead. But he might catch a quick round-up of the Coronation afterwards.</p><p>“I’ll probably look at highlights with the moment the crown goes on his head - that’s a bit of history.”</p><p>Despite his views on the Coronation, Tarek is looking forward to the bank holiday.</p><p>“We get an extra day off and the entire country deserves that”, he says.</p><p><strong>‘I don’t feel like Charles deserves to be King’</strong></p><p>Joana Firmino says she does not like King Charles and does not want to see him being crowned.</p><p>“I don’t think he’s going to be a good role model,” says the 21-year-old waitress from Kent.</p><p>Joana was a fan of Queen Elizabeth II and was “extremely upset” when she passed away.</p><p>But she worries King Charles may “not make good decisions” because of his troubled relationship with his first wife, Diana, Princess of Wales. She says his son Prince William would be “a way better king”.</p><p>“If it was William being crowned, I would definitely watch. But I don’t want to spend hours watching someone I don’t really like getting crowned as King when I believe he doesn’t deserve to be,” she says.</p><p>Instead, Joana will be jetting off on holiday to the Philippines.</p><p>“I’m not going to be wasting my time. I’ll be enjoying the sunny weather and tropical beaches,” she adds.</p><p><strong>‘I’ll be busy working on Eurovision’</strong></p><p>Luke Dudley is working as a spotlight operator at the Eurovision Song Contest and says “back-to-back” rehearsals means he cannot watch the ceremony.</p><p>“It’s a very tightly packed schedule which we’ve been religiously sticking to,” he explains.</p><p>The 27-year-old from Manchester works in the lighting department, providing the key light for artists and presenters on the stage.</p><p>Luke is disappointed to be missing “a momentous period in our history”.</p><p>“Friends and family have parties planned, so it’s a massive shame. I love the pomp, ceremony and spectacle of it all,” he says.</p><p>Despite Luke not being able to participate in the coronation parties, he says he “couldn’t pass on an opportunity like Eurovision”.</p><p>“I couldn’t be more excited. There’s nothing like it.”</p><hr><h2 id="生词记录"><a href="#生词记录" class="headerlink" title="生词记录"></a>生词记录</h2><blockquote><p><em>tune into</em> 收看，收听</p><p><em>coronation</em> 加冕，加冕典礼</p><p><em>revel in sth</em> 陶醉于，着迷于，纵情于</p><p><em>pomp</em> 盛典，典礼，盛况</p><p><em>midwife</em> 助产士</p><p><em>hereditary</em> 遗传的，世袭的</p><p><em>elitist</em> 精英统治的，精英主义的</p><p><em>undemocratic</em> 不民主的</p><p><em>scrabble</em> 翻找；试图快速获得（不易得到之物）</p><p><em>make ends meet</em> 使收支相抵，勉强维持生计</p><p><em>put food on the table</em> 为了维持生活而不断努力工作挣钱</p><p><em>parade</em> 庆祝游行</p><p><em>deliver</em> 接生，分娩，给···助产</p><p><em>lie-in</em> 赖床，早上晚起床</p><p><em>doughnut</em> 炸面包圈，甜甜圈</p><p><em>commission</em> 委托···做；委员会；委任···为军官；在使用中的，在服役的</p><p><em>monarchy</em> 君主制，君主国，君主政体</p><p><em>round-up</em> 简报，综述，概要</p><p><em>crown</em> 为···加冕；使圆满，使完美；皇冠，王冠</p><p><em>bank holiday</em> 公休日</p><p><em>jet</em> 乘飞机旅行</p><p><em>tropical</em> 热带的，产于热带的</p><p><em>back-to-back</em> 一个接着一个的，连续的；背靠背的</p><p><em>rehearsal</em> 排练，彩排</p><p><em>religiously</em>  宗教上，宗教方面地；经常地，很有规律地</p><p><em>momentous</em> 重大的，重要的</p><p><em>spectacle</em> 壮观场面；不寻常的事，出人意料的情况</p><p><em>poll</em> 民意调查 </p></blockquote><h2 id="个人感悟"><a href="#个人感悟" class="headerlink" title="个人感悟"></a>个人感悟</h2><p>别说英国人不看了，反正我是不看的 😅</p>]]></content>
      
      
      <categories>
          
          <category> 每日阅读分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 英语提升 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>8小时睡眠理论可能是错的</title>
      <link href="/2023/06/01/8-xiao-shi-shui-mian-li-lun-ke-neng-shi-cuo-de/"/>
      <url>/2023/06/01/8-xiao-shi-shui-mian-li-lun-ke-neng-shi-cuo-de/</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文地址：</p><p><a href="https://mp.weixin.qq.com/s/wn1098St-eAz1-oSekMExw">https://mp.weixin.qq.com/s/wn1098St-eAz1-oSekMExw</a></p></blockquote><h1 id="Do-You-Really-Need-8-Hours-of-Sleep-Every-Night-Body-Stuff-with-Dr-Jen-Gunter"><a href="#Do-You-Really-Need-8-Hours-of-Sleep-Every-Night-Body-Stuff-with-Dr-Jen-Gunter" class="headerlink" title="Do You Really Need 8 Hours of Sleep Every Night? Body Stuff with Dr. Jen Gunter"></a>Do You Really Need 8 Hours of Sleep Every Night? Body Stuff with Dr. Jen Gunter</h1><h1 id="From-TED"><a href="#From-TED" class="headerlink" title="From: TED"></a>From: TED</h1><hr><p>Sleep is so important.</p><p>We need it to live.</p><p>And when we can’t sleep, we’re desperate for help.</p><p>But lately, our fascination with sleep feels as if it’s taken on an urgency.</p><p>Do a quick internet search for sleep and you’ll find a slew of articles about how to make your sleep perfect.</p><p>New gadgets, fancy alarm clocks, stay away from blue light.</p><p>There are lots of services, products and advice columns that tell us we’re sleeping wrong.</p><p>Not enough, not quality sleep, wrong position.</p><p>Even worse, you might find scary messaging claiming that if you’re not sleeping right, your life is going to be shorter. You’re going to get all kinds of diseases.</p><p>One of the biggest worries we have about our sleep is that we’re not getting enough and that anything less than seven hours a night means that we’re doomed to bad health, everything from high blood pressure to Alzheimer’s disease.</p><p>But there are two flaws with this kind of messaging.</p><p>The first flaw is that it’s not completely accurate.</p><p>Seven to eight hours of sleep, while recommended for adults, is just an average.</p><p>And while messages have to be simplified for health communication to the public, sometimes important nuances get lost.</p><p>So yes, it’s true that not getting enough sleep in the long term is associated with health problems like cardiovascular disease, diabetes, and depression.</p><p>But fixating solely on seven to eight hours ignores the fact that there’s a range of sleep that people need.</p><p>The duration of a good night’s sleep can be different for different people.</p><p>Some adults need eight, but some are just fine on six.</p><p>The second flaw with this kind of doomsday messaging is that it can be counterproductive, especially for people who do have trouble sleeping.</p><p>For instance, in 2019, it was estimated that 21 percent of adults in the US were wearing sleep tracking devices. And that number is probably growing.</p><p>And I get it.</p><p>It’s fascinating to see how much sleep you’ve gotten each night and to know what part of your night was spent in deep sleep or dreaming.</p><p>But having all of that sleep data is causing some people to become obsessed with it so much so that it’s leading to a condition some called orthosomnia - a preoccupation with the constant need to achieve perfect sleep.</p><p>And this condition, ironically, is causing more sleep problems.</p><p>Now orthosomnia might be an extreme example, but the anxiety of not getting enough sleep is keeping some of us up at night.</p><p>So here’s what some experts are saying. Stop fixating on the number because that can lead to unrealistic expectations of sleep.</p><p>According to Dr. Colleen Carney, a psychologist and the head of the Ryerson University Sleep Lab, the basic questions you should ask yourself are:</p><p>Do I feel reasonably well-rested during the day?</p><p>Do I generally sleep through the night without disturbances?</p><p>Or, if I wake, do I fall back asleep easily?</p><p>Can I stay awake through the day without involuntarily falling asleep?</p><p>If your answers are yes to all three, you probably don’t need to worry about your sleep.</p><p>And if you’re struggling with your sleep, instead of buying expensive blue light filters or fancy sleep trackers, try talking with your doctor to make sure there aren’t any medical conditions that need to be explored first.</p><p>Then try evidence-based recommendations laid out by the American Academy of Sleep Medicine.</p><p>What’s really cool is that there’s a highly effective therapy - called cognitive behavioral therapy for insomnia, or CBT-I. It doesn’t have any medications involved. And it has a really low failure rate.</p><hr><h2 id="生词记录"><a href="#生词记录" class="headerlink" title="生词记录"></a>生词记录</h2><blockquote><p><em>desperate</em> 非常需要的，（因绝望而）拼命的，不顾一切的</p><p><em>fascination</em>  入迷，着迷</p><p><em>gadget</em> 小装置，小器具</p><p><em>column</em> 列，专栏</p><p><em>scary</em> 吓人的，恐怖的</p><p><em>doomed</em> 注定失败（毁灭，灭亡）的</p><p><em>Alzheimer</em> 老年痴呆</p><p><em>nuances</em> 细微差别</p><p><em>cardiovascular</em> 心血管</p><p><em>depression</em> 抑郁症</p><p><em>diabete</em> 糖尿病</p><p><em>fixate</em> 使固定，使痴迷，依恋</p><p><em>doomsday</em> 世界末日</p><p><em>counterproductive</em> 事与愿违的，适得其反的</p><p><em>preoccupation</em> 当务之急，全神贯注</p><p><em>ironically</em>  具有讽刺意味地，出乎意料地，令人啼笑皆非地</p><p><em>keep sb up</em> 耽误睡觉</p><p><em>psychologist</em> 心理学家，心理医生</p><p><em>disturbance</em> 干扰，打扰，骚乱，暴乱，暴力事件，障碍，失调</p><p><em>involuntarily</em> 不由自主地，无意识地</p><p><em>insomnia</em> 失眠</p></blockquote><h2 id="文章概述"><a href="#文章概述" class="headerlink" title="文章概述"></a>文章概述</h2><blockquote><p>作者从两个方面指出8小时睡眠理论的错误：</p><ol><li>8小时是平均值，并非所有人都必须有8小时睡眠</li><li>过于追求完美睡眠可能适得其反</li></ol></blockquote><h2 id="个人感悟"><a href="#个人感悟" class="headerlink" title="个人感悟"></a>个人感悟</h2><blockquote><p>看来我的睡眠还是挺不错的，不过最近又开始有熬夜的苗头了，早上起来状态欠佳，亟需调整（<del>立flag</del>）。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 每日阅读分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 英语提升 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023年的6个人生建议</title>
      <link href="/2023/06/01/2023-nian-de-6-ge-ren-sheng-jian-yi/"/>
      <url>/2023/06/01/2023-nian-de-6-ge-ren-sheng-jian-yi/</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文地址：</p><p><a href="https://aliabdaal.com/newsletter/6-life-lessons-for-2023/">https://aliabdaal.com/newsletter/6-life-lessons-for-2023/</a></p></blockquote><h1 id="6-Life-Lessons-for-2023"><a href="#6-Life-Lessons-for-2023" class="headerlink" title="6 Life Lessons for 2023"></a>6 Life Lessons for 2023</h1><hr><p>Hey friends,</p><p>It’s that time of year where I sit down, have some tea, and reflect on what I’ve learned over the past 12 months.</p><p>So, here are six key lessons that I want to carry with me into 2023.</p><p><img src="https://embed.filekitcdn.com/e/dHG4aSRazwrs3LA9HPR1C/m6vn9dTzFqVRt1g2F6CWeo" alt="img"></p><h3 id="😓-1-Stop-Pressing-the-Try-Harder-Button"><a href="#😓-1-Stop-Pressing-the-Try-Harder-Button" class="headerlink" title="😓 1. Stop Pressing the Try Harder Button"></a><strong>😓 1. Stop Pressing the Try Harder Button</strong></h3><p>We all fall into the trap of thinking “I’ll just try harder next time” when we fail. But that approach isn’t usually effective.</p><p>Instead, it’s better to build a sustainable system for achieving our goals. That way, we won’t repeatedly fail or push yourself to burnout.</p><p>For example, if you’re a YouTuber and struggling to get your weekly video out on time, don’t just plan to work extra hours in the evening. Consider outsourcing your editing, making shorter videos, or replacing one video per month with a simple vlog.</p><p>Build a system that works for you.</p><h3 id="🔋2-Energisers-vs-Drainers"><a href="#🔋2-Energisers-vs-Drainers" class="headerlink" title="🔋2. Energisers vs Drainers"></a><strong>🔋2. Energisers vs Drainers</strong></h3><p>Next time you have to choose between two options, ask yourself which one will drain you and which one will energise you. Then choose the option that’ll energise you.</p><p>Some examples might include:</p><ul><li>Time with friends &gt; Netflix</li><li>Evening gym sesh &gt; morning gym sesh</li><li>Your dream work &gt; soulless corporate job that pays twice as much.</li></ul><h3 id="🛋️-3-Choose-to-Be-Satisfied"><a href="#🛋️-3-Choose-to-Be-Satisfied" class="headerlink" title="🛋️ 3. Choose to Be Satisfied"></a><strong>🛋️ 3. Choose to Be Satisfied</strong></h3><p>Don’t beat yourself up at the end of the day for not getting enough done. You can just choose to be satisfied with what you did.</p><p>This might sound a bit wishy-washy, but it genuinely works. You can even say to yourself, <em>Well done [insert name here], you wrote 200 words today. Now it’s time to take a break.</em></p><p>Give yourself permission to switch off and get enough rest so that you can perform properly the next day.</p><h3 id="📆-4-Planning-and-Doing-Are-Different-Modes-of-Being"><a href="#📆-4-Planning-and-Doing-Are-Different-Modes-of-Being" class="headerlink" title="📆 4. Planning and Doing Are Different Modes of Being"></a><strong>📆 4. Planning and Doing Are Different Modes of Being</strong></h3><p>Planning is fundamentally different to doing, and both require a totally different headspace.</p><p>So, plan out what you’re going to do at the start of the day. Then for the rest of the day, simply execute on that plan. Never try to <a href="https://aliabdaal.com/the-pilot-the-plane-the-engineer-258332/">plan and do</a> at the same time.</p><p>This is incredibly effective and works on a macro level as well. In 2022, my weeks where I planned everything in advance were much smoother and more productive.</p><h3 id="🌅-5-Wake-Up-at-the-Same-Time-Every-Day"><a href="#🌅-5-Wake-Up-at-the-Same-Time-Every-Day" class="headerlink" title="🌅 5. Wake Up at the Same Time Every Day"></a><strong>🌅 5. Wake Up at the Same Time Every Day</strong></h3><p>One of the best hacks for improving your sleep quality (and overall quality of life) is to wake up at the same time every day.</p><p>Choose a waking time like 7 or 7:30 that’ll let you get plenty of morning sunlight. Listening to the <a href="https://www.youtube.com/watch?v=nm1TxQj9IsQ">Huberman Lab episode on sleep</a> and <a href="https://www.youtube.com/watch?v=LBPYDEJ6qHc">talking to circadian rhythm specialist Russell Foster</a> made me focus a lot more on sleep last year.</p><p>I’ve been more rigorous about waking up at the same time, and feel way better for it.</p><iframe id="twitter-widget-0" scrolling="no" frameborder="0" allowtransparency="true" allowfullscreen="true" class="" title="Twitter Tweet" src="https://platform.twitter.com/embed/Tweet.html?dnt=false&amp;embedId=twitter-widget-0&amp;features=eyJ0ZndfdGltZWxpbmVfbGlzdCI6eyJidWNrZXQiOltdLCJ2ZXJzaW9uIjpudWxsfSwidGZ3X2ZvbGxvd2VyX2NvdW50X3N1bnNldCI6eyJidWNrZXQiOnRydWUsInZlcnNpb24iOm51bGx9LCJ0ZndfdHdlZXRfZWRpdF9iYWNrZW5kIjp7ImJ1Y2tldCI6Im9uIiwidmVyc2lvbiI6bnVsbH0sInRmd19yZWZzcmNfc2Vzc2lvbiI6eyJidWNrZXQiOiJvbiIsInZlcnNpb24iOm51bGx9LCJ0ZndfbWl4ZWRfbWVkaWFfMTU4OTciOnsiYnVja2V0IjoidHJlYXRtZW50IiwidmVyc2lvbiI6bnVsbH0sInRmd19leHBlcmltZW50c19jb29raWVfZXhwaXJhdGlvbiI6eyJidWNrZXQiOjEyMDk2MDAsInZlcnNpb24iOm51bGx9LCJ0ZndfZHVwbGljYXRlX3NjcmliZXNfdG9fc2V0dGluZ3MiOnsiYnVja2V0Ijoib24iLCJ2ZXJzaW9uIjpudWxsfSwidGZ3X3ZpZGVvX2hsc19keW5hbWljX21hbmlmZXN0c18xNTA4MiI6eyJidWNrZXQiOiJ0cnVlX2JpdHJhdGUiLCJ2ZXJzaW9uIjpudWxsfSwidGZ3X2xlZ2FjeV90aW1lbGluZV9zdW5zZXQiOnsiYnVja2V0Ijp0cnVlLCJ2ZXJzaW9uIjpudWxsfSwidGZ3X3R3ZWV0X2VkaXRfZnJvbnRlbmQiOnsiYnVja2V0Ijoib24iLCJ2ZXJzaW9uIjpudWxsfX0%3D&amp;frame=false&amp;hideCard=false&amp;hideThread=false&amp;id=1606453121726963715&amp;lang=en-gb&amp;origin=https%3A%2F%2Faliabdaal.com%2Fnewsletter%2F6-life-lessons-for-2023%2F&amp;sessionId=97aa5f4ab010075f5aafd17d5c904d0f3128ae03&amp;theme=light&amp;widgetsVersion=aaf4084522e3a%3A1674595607486&amp;width=550px" data-tweet-id="1606453121726963715" style="box-sizing: border-box; border: 0px; position: static; visibility: visible; width: 550px; height: 385px; display: block; flex-grow: 1;"></iframe><h3 id="🤔6-The-Pain-of-Rejection-is-Better-than-the-Pain-of-Regret"><a href="#🤔6-The-Pain-of-Rejection-is-Better-than-the-Pain-of-Regret" class="headerlink" title="🤔6. The Pain of Rejection is Better than the Pain of Regret"></a><strong>🤔6. The Pain of Rejection is Better than the Pain of Regret</strong></h3><p>Whatever you’re struggling to do, shoot your shot. Whether it’s asking someone out, starting a business, moving to a new country… 99% of the time, the pain of failure or rejection is 100 times better than living with ‘what if’ for the rest of your life.</p><p>There have been some bumps along the way… but if I hadn’t <a href="https://www.youtube.com/watch?v=gerkxmXAhdI">studied medicine</a>, <a href="https://www.youtube.com/watch?v=XpopyNZKYKw">started a YouTube channel</a>, or <a href="https://www.youtube.com/watch?v=ZazwqwjDY6M">moved to London</a>, I guarantee that I’d still be thinking about those things today with some mild regret.</p><p>So, <em>carpe diem</em>.</p><p>Have a great week!</p><p>Ali xx</p><hr><h2 id="生词记录"><a href="#生词记录" class="headerlink" title="生词记录"></a>生词记录</h2><blockquote><p><em>sustainable</em> 可持续性</p><p><em>burnout</em> 过度劳累，精疲力竭</p><p><em>outsource</em> 外包</p><p><em>soulless</em> 无情，无灵魂</p><p><em>corporate</em> 公司，法人</p><p><em>wishy-washy</em> 稀里糊涂的，空洞无物</p><p><em>fundamentally</em> 从根本上，基本上 </p><p><em>macro</em> 宏观</p><p><em>smooth</em> 平滑，流畅，顺畅</p><p><em>rigorous</em> 严谨，严格</p><p><em>Whether</em> 是否，无论</p><p><em>bumps</em> 凹凸，碰撞，颠簸</p><p><em>carpe diem</em> 及时行乐</p></blockquote><h2 id="文章概述"><a href="#文章概述" class="headerlink" title="文章概述"></a>文章概述</h2><blockquote><p>作者分享他过去的2022年中值得关注的6个人生建议：</p><ol><li>持续进步，不要想着一蹴而就</li><li>多做可以令你活力充沛且更具意义的事情</li><li>多些鼓励自己，少些责备自己，减少内耗，选择满足</li><li>先计划，后行动</li><li>保持规律作息，提升睡眠质量</li><li>不惧失败，多去尝试，以免将来活在“如果可以”的悔恨之中</li></ol></blockquote><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
      
      
      <categories>
          
          <category> 每日阅读分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 英语提升 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>少说多做，谦虚勤学</title>
      <link href="/2023/06/01/2022..5.1-gan-wu-jiao-se-zhuan-bian/"/>
      <url>/2023/06/01/2022..5.1-gan-wu-jiao-se-zhuan-bian/</url>
      
        <content type="html"><![CDATA[<p>​4月27日回到了家乡，转眼五一假期已经接近尾声了。若不是选择离职回家乡发展，应该明天就又要坐车回广州准备上班了，奔奔波波，年轻还好，不过长久以来不是办法。</p><p>​其实这次回来主要原因是为了应聘某学校的老师，这是在18线小县城里能够找到最合适的工作了。对我这种非师范非专业相关的小白来说，其实是一个重大的角色转变，因为没有太多相关经验，一切都从零开始。既然有机会出现在面前，还是要牢牢把握住的，因此在五一假期间还是做了不少的准备，不过等到真刀真枪实战试讲的时候，才发现与想象中的还是有不少差别的，我也充分明白了一个道理：<strong>台上一分钟，台下十年功</strong>。无论你在脑里演示了多少遍，都不如亲自实践一次，每一次都会发现不少的问题，切勿眼高手低！（<del>不要问我怎么知道的</del>）</p><p>​无论后续如何，既然选定了这条路，就要走到底，努力加油吧！最后附上最近看到的一句话共勉一下：</p><blockquote><p>少说多做，谦虚勤学</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 关于生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活随谈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构与算法-线性结构篇（一）（C语言版）</title>
      <link href="/2023/03/06/shu-ju-jie-gou-yu-suan-fa-xian-xing-jie-gou-pian-yi-c-yu-yan-ban/"/>
      <url>/2023/03/06/shu-ju-jie-gou-yu-suan-fa-xian-xing-jie-gou-pian-yi-c-yu-yan-ban/</url>
      
        <content type="html"><![CDATA[<h2 id="顺序表"><a href="#顺序表" class="headerlink" title="顺序表"></a>顺序表</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">List</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 顺序表的实现（利用数组）</span>    <span class="token keyword">int</span> <span class="token operator">*</span> arr<span class="token punctuation">;</span>    <span class="token comment">// 数组容量</span>    <span class="token keyword">int</span> capacity<span class="token punctuation">;</span>    <span class="token comment">// 当前存储元素个数</span>    <span class="token keyword">int</span> size<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token operator">*</span> ArrayList<span class="token punctuation">;</span><span class="token comment">/** * 初始化顺序表 * @param list 顺序表 */</span><span class="token keyword">_Bool</span> <span class="token function">initList</span><span class="token punctuation">(</span>ArrayList list<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 动态分配内存空间</span>    list<span class="token operator">-></span>arr <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 初始化失败</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>list<span class="token operator">-></span>arr <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    list<span class="token operator">-></span>capacity <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>    list<span class="token operator">-></span>size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">// 成功</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 顺序表插入操作 * @param list * @param index 位序，插入第几个位置 */</span><span class="token keyword">_Bool</span> <span class="token function">insertList</span><span class="token punctuation">(</span>ArrayList list<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token keyword">int</span> data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// index非法，插入失败</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token number">1</span> <span class="token operator">||</span> index <span class="token operator">></span> list<span class="token operator">-></span>size <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 扩容</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>list<span class="token operator">-></span>size <span class="token operator">==</span> list<span class="token operator">-></span>capacity<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 原来容量的1.5倍</span>        <span class="token keyword">int</span> newCapacity <span class="token operator">=</span> list<span class="token operator">-></span>capacity <span class="token operator">+</span> <span class="token punctuation">(</span>list<span class="token operator">-></span>capacity <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 使用函数realloc()扩大内存</span>        <span class="token keyword">int</span> <span class="token operator">*</span> newArr <span class="token operator">=</span> <span class="token function">realloc</span><span class="token punctuation">(</span>list<span class="token operator">-></span>arr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">*</span> newCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token operator">-></span>arr <span class="token operator">=</span> newArr<span class="token punctuation">;</span>        list<span class="token operator">-></span>capacity <span class="token operator">=</span> newCapacity<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> list<span class="token operator">-></span>size<span class="token punctuation">;</span> i <span class="token operator">></span> index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 从插入位置开始所有元素向后移动</span>        list<span class="token operator">-></span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> list<span class="token operator">-></span>arr<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 插入元素</span>    list<span class="token operator">-></span>arr<span class="token punctuation">[</span>index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">;</span>    <span class="token comment">// 记录元素个数</span>    list<span class="token operator">-></span>size<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 顺序表删除操作 * @param list * @param index 位序，从1开始 * @return */</span><span class="token keyword">_Bool</span> <span class="token function">deleteList</span><span class="token punctuation">(</span>ArrayList list<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//非法删除</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token number">1</span> <span class="token operator">||</span> index <span class="token operator">></span> list<span class="token operator">-></span>size<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 从删除位置开始，后面的往前移动</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> list<span class="token operator">-></span>size<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        list<span class="token operator">-></span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> list<span class="token operator">-></span>arr<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 长度减小</span>    list<span class="token operator">-></span>size<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 通过位序查找元素 * @param list * @param index 位序，从1开始 * @return 返回查找的元素 */</span><span class="token keyword">int</span> <span class="token function">getDataByIndex</span><span class="token punctuation">(</span>ArrayList list<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 非法位序</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token number">1</span> <span class="token operator">||</span> index <span class="token operator">></span> list<span class="token operator">-></span>size<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> INT_MAX<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> data <span class="token operator">=</span> list<span class="token operator">-></span>arr<span class="token punctuation">[</span>index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> data<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 顺序表当前长度 * @param list * @return 返回长度大小 */</span><span class="token keyword">int</span> <span class="token function">getListLength</span><span class="token punctuation">(</span>ArrayList list<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> list<span class="token operator">-></span>size<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 打印数据 * @param list */</span><span class="token keyword">void</span> <span class="token function">printList</span><span class="token punctuation">(</span>ArrayList list<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> list<span class="token operator">-></span>size<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> list<span class="token operator">-></span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 创建新的结构体变量（为什么不可以直接ArrayList list呢？）</span>    <span class="token keyword">struct</span> <span class="token class-name">List</span> list<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"开始初始化\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">initList</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>list<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">insertList</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>list<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">insertList</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>list<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">insertList</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>list<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">insertList</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>list<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">insertList</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>list<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">70</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">insertList</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>list<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">deleteList</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>list<span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printList</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"当前长度：%d\n"</span><span class="token punctuation">,</span> <span class="token function">getListLength</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"当前查找元素为：%d"</span><span class="token punctuation">,</span> <span class="token function">getDataByIndex</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>list<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"初始化失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><h3 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token comment">// 链表的结构体</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">LinkNode</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> data<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">LinkNode</span> <span class="token operator">*</span> next<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token operator">*</span> LinkList<span class="token punctuation">;</span><span class="token comment">/** * 初始化链表（带头节点） * @param lNode */</span><span class="token keyword">void</span> <span class="token function">initLinkNode</span><span class="token punctuation">(</span>LinkList lNode<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 头节点默认指向NULL, 头节点不存储数据</span>    <span class="token keyword">struct</span> <span class="token class-name">LinkNode</span> <span class="token operator">*</span> head <span class="token operator">=</span> lNode<span class="token punctuation">;</span>    head<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 链表插入操作 * @param head 头节点指针 * @param index 位序（从1开始） * @param data 插入的数据 * @return 0表示失败，1表示成功 */</span><span class="token keyword">_Bool</span> <span class="token function">insertNode</span><span class="token punctuation">(</span>LinkList head<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token keyword">int</span> data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 非法位序</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">struct</span> <span class="token class-name">LinkNode</span> <span class="token operator">*</span> p <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token comment">// --index 先减然后再操作</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">--</span>index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 当index为0时，p指向的恰好是插入位置的前一个节点</span>        p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token comment">// index越界</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 为插入的新节点分配内存</span>    LinkList newNode <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>LinkList<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    newNode<span class="token operator">-></span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>    newNode<span class="token operator">-></span>next <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>    p<span class="token operator">-></span>next <span class="token operator">=</span> newNode<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 链表删除操作 * @param head 头节点指针 * @param index 位序（从1开始） * @return */</span><span class="token keyword">_Bool</span> <span class="token function">deleteNode</span><span class="token punctuation">(</span>LinkList head<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//非法位序</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    LinkList p <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token comment">// 只有头节点的时候</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">-></span>next <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">--</span>index<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token comment">// index越界</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 记录要删除的节点后再删除</span>    <span class="token keyword">struct</span> <span class="token class-name">LinkNode</span> <span class="token operator">*</span> q <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>    p<span class="token operator">-></span>next <span class="token operator">=</span> q<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token comment">// 释放内存</span>    <span class="token function">free</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 根据位序查找元素 */</span><span class="token keyword">int</span> <span class="token function">findNodeData</span><span class="token punctuation">(</span>LinkList head<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//非法位序</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    LinkList p <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">-></span>next <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> INT_MAX<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">--</span>index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> INT_MAX<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> p<span class="token operator">-></span>next<span class="token operator">-></span>data<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 计算链表长度（除头节点） */</span><span class="token keyword">int</span> <span class="token function">getLinkListLength</span><span class="token punctuation">(</span>LinkList head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>head<span class="token operator">-></span>next<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        head <span class="token operator">=</span> head<span class="token operator">-></span>next<span class="token punctuation">;</span>        size<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> size<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 打印数据 */</span><span class="token keyword">void</span> <span class="token function">printLinkList</span><span class="token punctuation">(</span>LinkList linkList<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>linkList<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        linkList <span class="token operator">=</span> linkList<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\t"</span><span class="token punctuation">,</span> linkList<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">LinkNode</span> head<span class="token punctuation">;</span>    <span class="token function">initLinkNode</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">insertNode</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>head<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">insertNode</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>head<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">insertNode</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>head<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">deleteNode</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>head<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token function">findNodeData</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>head<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token function">getLinkListLength</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>head<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printLinkList</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="双向链表"><a href="#双向链表" class="headerlink" title="双向链表"></a>双向链表</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token comment">// 双向链表的结构体</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">DoubleLinkNode</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> data<span class="token punctuation">;</span>    <span class="token comment">// 指向下一个</span>    <span class="token keyword">struct</span> <span class="token class-name">DoubleLinkNode</span> <span class="token operator">*</span> next<span class="token punctuation">;</span>    <span class="token comment">// 指向上一个</span>    <span class="token keyword">struct</span> <span class="token class-name">DoubleLinkNode</span> <span class="token operator">*</span> prev<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token operator">*</span> DoubleLinkList<span class="token punctuation">;</span><span class="token comment">/** * 初始化双向链表 * @param head */</span><span class="token keyword">void</span> <span class="token function">initLinkNode</span><span class="token punctuation">(</span>DoubleLinkList head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 头节点默认指向NULL, 头节点不存储数据</span>    head<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    head<span class="token operator">-></span>prev <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 双向链表插入操作 * @param head 头节点指针 * @param index 位序（从1开始） * @param data 插入的数据 * @return 0表示失败，1表示成功 */</span><span class="token keyword">_Bool</span> <span class="token function">insertNode</span><span class="token punctuation">(</span>DoubleLinkList head<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token keyword">int</span> data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 非法位序</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">struct</span> <span class="token class-name">DoubleLinkNode</span> <span class="token operator">*</span> p <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token comment">// --index 先减然后再操作</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">--</span>index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 当index为0时，p指向的恰好是插入位置的前一个节点</span>        p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token comment">// index越界</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 为插入的新节点分配内存</span>    DoubleLinkList newNode <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>DoubleLinkList<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 内存分配失败</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>newNode <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    newNode<span class="token operator">-></span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>    <span class="token comment">// 后继节点可能不存在</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">-></span>next<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        newNode<span class="token operator">-></span>next <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token comment">// 不判断，此处可能会空指针异常</span>        p<span class="token operator">-></span>next<span class="token operator">-></span>prev <span class="token operator">=</span> newNode<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        newNode<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    p<span class="token operator">-></span>next <span class="token operator">=</span> newNode<span class="token punctuation">;</span>    newNode<span class="token operator">-></span>prev <span class="token operator">=</span> p<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 双向链表删除操作 * @param head 头节点指针 * @param index 位序（从1开始） * @return */</span><span class="token keyword">_Bool</span> <span class="token function">deleteNode</span><span class="token punctuation">(</span>DoubleLinkList head<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//非法位序</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    DoubleLinkList p <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token comment">// 只有头节点的时候</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">-></span>next <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">--</span>index<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token comment">// index越界</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 记录要删除的节点后再删除</span>    <span class="token keyword">struct</span> <span class="token class-name">DoubleLinkNode</span> <span class="token operator">*</span> q <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>q<span class="token operator">-></span>next<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        p<span class="token operator">-></span>next <span class="token operator">=</span> q<span class="token operator">-></span>next<span class="token punctuation">;</span>        q<span class="token operator">-></span>next<span class="token operator">-></span>prev <span class="token operator">=</span> p<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 删除最后一个节点</span>        p<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 释放内存</span>    <span class="token function">free</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 根据位序查找元素 */</span><span class="token keyword">int</span> <span class="token function">findNodeData</span><span class="token punctuation">(</span>DoubleLinkList head<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//非法位序</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    DoubleLinkList p <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">-></span>next <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> INT_MAX<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">--</span>index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> INT_MAX<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> p<span class="token operator">-></span>next<span class="token operator">-></span>data<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 计算链表长度（除头节点） */</span><span class="token keyword">int</span> <span class="token function">getDoubleLinkListLength</span><span class="token punctuation">(</span>DoubleLinkList head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>head<span class="token operator">-></span>next<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        head <span class="token operator">=</span> head<span class="token operator">-></span>next<span class="token punctuation">;</span>        size<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> size<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 关于学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构与算法-哈希表篇（C语言版）</title>
      <link href="/2023/03/03/shu-ju-jie-gou-yu-suan-fa-ha-xi-biao-pian-c-yu-yan-ban/"/>
      <url>/2023/03/03/shu-ju-jie-gou-yu-suan-fa-ha-xi-biao-pian-c-yu-yan-ban/</url>
      
        <content type="html"><![CDATA[<h2 id="实现一个简单的哈希表"><a href="#实现一个简单的哈希表" class="headerlink" title="实现一个简单的哈希表"></a>实现一个简单的哈希表</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SIZE</span> <span class="token expression"><span class="token number">9</span></span></span><span class="token comment">// 将数组元素封装成 key</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">Element</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> key<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token operator">*</span> Element<span class="token punctuation">;</span><span class="token comment">// 利用数组实现哈希表</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">HashTable</span><span class="token punctuation">&#123;</span>    Element<span class="token operator">*</span> table<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token operator">*</span> HashTable<span class="token punctuation">;</span><span class="token comment">/** * 哈希函数，计算对应的哈希值 */</span><span class="token keyword">int</span> <span class="token function">hash</span><span class="token punctuation">(</span><span class="token keyword">int</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> key <span class="token operator">%</span> SIZE<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 初始化哈希表</span><span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span>HashTable hashTable<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    hashTable<span class="token operator">-></span>table <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">Element</span><span class="token punctuation">)</span> <span class="token operator">*</span> SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> SIZE<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        hashTable<span class="token operator">-></span>table<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 往哈希表中插入元素（此处暂未考虑装满的情况）</span><span class="token keyword">void</span> <span class="token function">put</span><span class="token punctuation">(</span>HashTable hashTable<span class="token punctuation">,</span> Element element<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 计算哈希值</span>    <span class="token keyword">int</span> hashCode <span class="token operator">=</span> <span class="token function">hash</span><span class="token punctuation">(</span>element<span class="token operator">-></span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 对号入座</span>    hashTable<span class="token operator">-></span>table<span class="token punctuation">[</span>hashCode<span class="token punctuation">]</span> <span class="token operator">=</span> element<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 查找</span><span class="token keyword">int</span> <span class="token function">get</span><span class="token punctuation">(</span>HashTable hashTable<span class="token punctuation">,</span> <span class="token keyword">int</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> hashCode <span class="token operator">=</span> <span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>hashTable<span class="token operator">-></span>table<span class="token punctuation">[</span>hashCode<span class="token punctuation">]</span><span class="token operator">-></span>key <span class="token operator">==</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 创建一个新元素</span><span class="token keyword">struct</span> <span class="token class-name">Element</span><span class="token operator">*</span> <span class="token function">createElement</span><span class="token punctuation">(</span><span class="token keyword">int</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">Element</span><span class="token operator">*</span> element <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">Element</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    element<span class="token operator">-></span>key <span class="token operator">=</span> key<span class="token punctuation">;</span>    <span class="token keyword">return</span> element<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="冲突处理"><a href="#冲突处理" class="headerlink" title="冲突处理"></a>冲突处理</h2><h3 id="线性探测法"><a href="#线性探测法" class="headerlink" title="线性探测法"></a>线性探测法</h3><p>当前有冲突就往后查找空闲位置</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SIZE</span> <span class="token expression"><span class="token number">9</span></span></span><span class="token comment">// 将数组元素封装成 key</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">Element</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> key<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token operator">*</span> Element<span class="token punctuation">;</span><span class="token comment">// 利用数组实现哈希表</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">HashTable</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 此处是指针的指针，数组中存放的是地址</span>    Element<span class="token operator">*</span> table<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token operator">*</span> HashTable<span class="token punctuation">;</span><span class="token comment">/** * 哈希函数，计算对应的哈希值 */</span><span class="token keyword">int</span> <span class="token function">hash</span><span class="token punctuation">(</span><span class="token keyword">int</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> key <span class="token operator">%</span> SIZE<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 初始化哈希表</span><span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span>HashTable hashTable<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    hashTable<span class="token operator">-></span>table <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">Element</span><span class="token punctuation">)</span> <span class="token operator">*</span> SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> SIZE<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        hashTable<span class="token operator">-></span>table<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 往哈希表中插入元素（此处暂未考虑装满的情况）</span><span class="token keyword">void</span> <span class="token function">put</span><span class="token punctuation">(</span>HashTable hashTable<span class="token punctuation">,</span> Element element<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 计算哈希值</span>    <span class="token keyword">int</span> hashCode <span class="token operator">=</span> <span class="token function">hash</span><span class="token punctuation">(</span>element<span class="token operator">-></span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">// 若当前哈希值对应位置已有元素则向后寻找</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>hashTable<span class="token operator">-></span>table<span class="token punctuation">[</span>hashCode<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 重新计算哈希值，不能单纯 hashCode++，这样很可能会数组下标越界</span>        hashCode <span class="token operator">=</span> <span class="token function">hash</span><span class="token punctuation">(</span>element<span class="token operator">-></span>key <span class="token operator">+</span> <span class="token operator">++</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 对号入座</span>    hashTable<span class="token operator">-></span>table<span class="token punctuation">[</span>hashCode<span class="token punctuation">]</span> <span class="token operator">=</span> element<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 查找</span><span class="token keyword">int</span> <span class="token function">get</span><span class="token punctuation">(</span>HashTable hashTable<span class="token punctuation">,</span> <span class="token keyword">int</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> hashCode <span class="token operator">=</span> <span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">// 记录最初的位置，目的是方便后面判断 hashcode 是否已经走了一圈回来</span>    <span class="token keyword">int</span> startIndex <span class="token operator">=</span> hashCode<span class="token punctuation">;</span>    <span class="token keyword">do</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> cur <span class="token operator">=</span> hashTable<span class="token operator">-></span>table<span class="token punctuation">[</span>hashCode<span class="token punctuation">]</span><span class="token operator">-></span>key<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>cur <span class="token operator">==</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 没找到则重新计算哈希值</span>        hashCode <span class="token operator">=</span> <span class="token function">hash</span><span class="token punctuation">(</span>key <span class="token operator">+</span> <span class="token operator">++</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>startIndex <span class="token operator">!=</span> hashCode <span class="token operator">&amp;&amp;</span> hashTable<span class="token operator">-></span>table<span class="token punctuation">[</span>hashCode<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 创建一个新元素</span><span class="token keyword">struct</span> <span class="token class-name">Element</span><span class="token operator">*</span> <span class="token function">createElement</span><span class="token punctuation">(</span><span class="token keyword">int</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">Element</span><span class="token operator">*</span> element <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">Element</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    element<span class="token operator">-></span>key <span class="token operator">=</span> key<span class="token punctuation">;</span>    <span class="token keyword">return</span> element<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">HashTable</span> hashTable<span class="token punctuation">;</span>    <span class="token function">init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>hashTable<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">9</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">put</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>hashTable<span class="token punctuation">,</span> <span class="token function">createElement</span><span class="token punctuation">(</span>i <span class="token operator">*</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">9</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> hashTable<span class="token punctuation">.</span>table<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-></span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="链地址法"><a href="#链地址法" class="headerlink" title="链地址法"></a>链地址法</h3><p>当前有冲突则将其变成链表连接起来</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SIZE</span> <span class="token expression"><span class="token number">9</span></span></span><span class="token comment">// 链表结构</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">LinkNode</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> key<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">LinkNode</span><span class="token operator">*</span> next<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token operator">*</span> LinkNode<span class="token punctuation">;</span><span class="token comment">// 数组模拟哈希表</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">HashTable</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 此处数组存放的是struct LinkNode类型节点</span>    <span class="token keyword">struct</span> <span class="token class-name">LinkNode</span><span class="token operator">*</span> node<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token operator">*</span> HashTable<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">hash</span><span class="token punctuation">(</span><span class="token keyword">int</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> key <span class="token operator">%</span> SIZE<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span>HashTable hashTable<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    hashTable<span class="token operator">-></span>node <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">LinkNode</span><span class="token punctuation">)</span> <span class="token operator">*</span> SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 将哈希表中的所有头节点初始化</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> SIZE<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// hashtable->node[i] 指的是数组中第 i 个的 struct LinkNode 节点，而不是指针（地址），故后面是用 . 来引出其结构体变量</span>        hashTable<span class="token operator">-></span>node<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>key <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        hashTable<span class="token operator">-></span>node<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>LinkNode <span class="token function">createNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    LinkNode node <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">LinkNode</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    node<span class="token operator">-></span>key <span class="token operator">=</span> key<span class="token punctuation">;</span>    node<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> node<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">put</span><span class="token punctuation">(</span>HashTable hashTable<span class="token punctuation">,</span> <span class="token keyword">int</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> hashCode <span class="token operator">=</span> <span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    LinkNode head <span class="token operator">=</span> <span class="token operator">&amp;</span>hashTable<span class="token operator">-></span>node<span class="token punctuation">[</span>hashCode<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// 若已有元素占领该位置，则继续直至链表尾，然后插入</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>head<span class="token operator">-></span>next<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        head <span class="token operator">=</span> head<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    head<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token function">createNode</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">get</span><span class="token punctuation">(</span>HashTable hashTable<span class="token punctuation">,</span> <span class="token keyword">int</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> hashCode <span class="token operator">=</span> <span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    LinkNode head <span class="token operator">=</span> <span class="token operator">&amp;</span>hashTable<span class="token operator">-></span>node<span class="token punctuation">[</span>hashCode<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// 此处设计的哈希表中的链表头节点默认全为 -1（类似于虚拟头节点），故真正的节点在head->next上</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>head<span class="token operator">-></span>next<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>head<span class="token operator">-></span>next<span class="token operator">-></span>key <span class="token operator">==</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        head <span class="token operator">=</span> head<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">HashTable</span> table<span class="token punctuation">;</span>    <span class="token function">init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>table<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">put</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>table<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">put</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>table<span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">put</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>table<span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>table<span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>table<span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>table<span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 关于学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《MySQL必知必会》学习记录</title>
      <link href="/2023/03/02/mysql-bi-zhi-bi-hui-xue-xi-ji-lu/"/>
      <url>/2023/03/02/mysql-bi-zhi-bi-hui-xue-xi-ji-lu/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL必知必会"><a href="#MySQL必知必会" class="headerlink" title="MySQL必知必会"></a>MySQL必知必会</h1><h2 id="使用MySQL"><a href="#使用MySQL" class="headerlink" title="使用MySQL"></a>使用MySQL</h2><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 返回可用数据库列表show databases;# 返回当前选择的数据库内的可用表show tables;# 显示表列show columns from 表名;describe 表名;# 显示对应的SQL语句show create database 数据库名;show create table 表名;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="检索数据"><a href="#检索数据" class="headerlink" title="检索数据"></a>检索数据</h2><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 查询所有列select * from 表名;# 查询指定列select 指定列名 from 表名;# 查询不同的行(distinct去重)select distinct 列名 from 表名;# 限制结果, 查询前5行数据select * from 表名 limit 5;# 第一个数为开始位置（从0开始），第二个数是查询的行数select * from 表名 limit 5， 5;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="排序检索数据"><a href="#排序检索数据" class="headerlink" title="排序检索数据"></a>排序检索数据</h2><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 排序(order by)默认升序select * from 表名 order by 指定列名;# 排序(order by desc）降序select * from 表名 order by 指定列名 desc;# 按多个列排序select * from 表名 order by 指定列名1, 指定列名2;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="过滤数据"><a href="#过滤数据" class="headerlink" title="过滤数据"></a>过滤数据</h2><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 操作符：大于：&gt; 小于：&lt; 大于等于：&gt;&#x3D; 小于等于：&lt;&#x3D; 不等于：!&#x3D; &lt;&gt; 等于：&#x3D; 在指定两个值之间：between空值检查：IS NULL# 条件筛选(where)select * from 表名 where 指定列名 操作符 指定条件;# order by 需用在 where 后select * from 表名 where 指定列名 操作符 指定条件 order by 指定列名1, 指定列名2;# and 或 or 增加过滤条件(and 的计算优先级比 or 高，故可使用括号避免错误组合)select * from 表名 where 指定列名 操作符 指定条件 and ···;select * from 表名 where 指定列名 操作符 指定条件 or ···;# in(条件1, 条件2) in 比 or 更高效select * from 表名 where 指定列名 in (指定条件1, 指定条件2···);# not 否定后续条件select * from 表名 where 指定列名 not in (指定条件1, 指定条件2···);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="通配符过滤"><a href="#通配符过滤" class="headerlink" title="通配符过滤"></a>通配符过滤</h2><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># like 和 %（匹配多个字符，不能匹配NULL）select * from 表名 where 指定列名 like &#39;zh%&#39;; # 查询指定列以zh为开头的所有列select * from 表名 where 指定列名 like &#39;%zh%&#39;; # 查询中间存在zh字符的列# _ 下划线与 % 类似，但只匹配单个字符select * from 表名 where 指定列名 like &#39;_zh&#39;; # 查询zh前只有一个字符的所有列<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="起别名"><a href="#起别名" class="headerlink" title="起别名"></a>起别名</h2><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select 指定列名 as 别名 from 表名; # as 起别名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="使用数据处理函数"><a href="#使用数据处理函数" class="headerlink" title="使用数据处理函数"></a>使用数据处理函数</h2><h3 id="常用文本处理函数"><a href="#常用文本处理函数" class="headerlink" title="常用文本处理函数"></a>常用文本处理函数</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">left() # 截取并返回左边的字符串right() # 截取并返回右边的字符串concat() # 拼接字段length() # 返回传的长度locate() # 找出串的一个字串lower() # 转小写upper() # 转大写ltrim() # 去除左空格rtrim() # 去除右空格substring() # 返回字串的字符soundex() # 返回串的soundex值(对串的发音相似比较)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="日期和时间处理函数"><a href="#日期和时间处理函数" class="headerlink" title="日期和时间处理函数"></a>日期和时间处理函数</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">addDate() # 增加一个日期（天，周等）addTime() # 增加一个时间（时，分等）curDate() # 返回当前日期curTime() # 返回当前时间Now() # 返回当前日期和时间Date() # 返回日期时间中的日期部分Time() # 返回一个日期时间的时间部分DateDiff() # 计算两个日期之间的差Date_Add() # 高度灵活的日期运算函数Date_Format() # 返回一个格式化的日期或时间串DayOfWeek() # 对于一个日期，返回对应的星期几Hour() # 返回一个时间的小时部分Minute() # 返回一个时间的分钟部分Second() # 返回一个时间的秒部分Year() # 返回一个日期的年份部分Month() # 返回一个日期的月份部分Day() # 返回一个日期的天数部分<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="数值处理函数"><a href="#数值处理函数" class="headerlink" title="数值处理函数"></a>数值处理函数</h3><pre class="line-numbers language-MySQL" data-language="MySQL"><code class="language-MySQL">Abs() # 返回一个数的绝对值Cos() # 返回一个角度的余弦Exp() # 返回一个数的指数值Mod() # 返回除操作的余数Pi() # 返回圆周率Rand() # 返回一个随机数Sin() # 返回一个角度的正弦Sqrt() # 返回一个数的平方根Tan() # 返回一个角度的正切<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="汇总数据"><a href="#汇总数据" class="headerlink" title="汇总数据"></a>汇总数据</h2><h3 id="聚集函数"><a href="#聚集函数" class="headerlink" title="聚集函数"></a>聚集函数</h3><pre class="line-numbers language-MySQL" data-language="MySQL"><code class="language-MySQL">AVG() # 返回某列的平均值(忽略列值为NULL的行)COUNT() # 返回某列的行数# (1.使用COUNT(*)对表中行的数目进行计数，不管表列中包含的是空值（NULL）还是非空值。2.使用COUNT(column)对特定列中具有值的行进行计数，忽略NULL值。)MAX() # 返回某列的最大值(忽略列值为NULL的行)MIN() # 返回某列的最小值(忽略列值为NULL的行)SUM() # 返回某列值之和(忽略列值为NULL的行)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="聚集不同值"><a href="#聚集不同值" class="headerlink" title="聚集不同值"></a>聚集不同值</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">avg(distinct column)# distinct 不能用于count(*), 故没有 count(distinct)# distinct 必须使用列名，不能用于计算或表达式<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="组合聚集函数"><a href="#组合聚集函数" class="headerlink" title="组合聚集函数"></a>组合聚集函数</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select avg(column) as avgs,count(*) as counts,min(column) as mins,max(column) as maxsfrom table_name;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="分组数据"><a href="#分组数据" class="headerlink" title="分组数据"></a>分组数据</h2><h3 id="创建分组（group-by）"><a href="#创建分组（group-by）" class="headerlink" title="创建分组（group by）"></a>创建分组（group by）</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select products_id, count(*) as nums_prodsfrom productsgroup by products_id;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>注意事项：</p><ol><li>group by 子句可以包含任意数目列</li><li>group by 子句中列出的每一个列都必须是检索列或有效的表达式（但不能是聚合函数）。若在select中使用表达式则必须在group by子句中指定相同的表达式，不能使用别名</li><li>select语句中每一个列都必须在group by子句中给出</li><li>若分组中具有NULL值，则NULL将作为一个分组返回。若有多行NULL值，它们将分为一组</li><li>group by 子句必须在where子句之后，order by子句之前</li></ol><h3 id="过滤分组（having）"><a href="#过滤分组（having）" class="headerlink" title="过滤分组（having）"></a>过滤分组（having）</h3><p>与where的区别：</p><ol><li>where过滤行，having过滤分组</li><li>where在分组前过滤，having在分组后过滤</li></ol><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select product_id, count(*) as num_prodsfrom productswhere product_price &lt; 12group by product_idhaving count(*) &gt; 2;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="分组和排序"><a href="#分组和排序" class="headerlink" title="分组和排序"></a>分组和排序</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select product_id, count(*) as num_prodsfrom productswhere product_price &lt; 12group by product_idhaving count(*) &gt; 2 # 必须用表达式，不能用别名order by num_prods;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="使用子查询"><a href="#使用子查询" class="headerlink" title="使用子查询"></a>使用子查询</h2><h3 id="使用子查询过滤"><a href="#使用子查询过滤" class="headerlink" title="使用子查询过滤"></a>使用子查询过滤</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select product_idfrom productswhere product_price in (select product_price    from product_items    where item_id &#x3D; &#39;1&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="联结表"><a href="#联结表" class="headerlink" title="联结表"></a>联结表</h2><p>外键：某表中的一列，包含另一个表的主键值</p><h3 id="创建联结"><a href="#创建联结" class="headerlink" title="创建联结"></a>创建联结</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select vend_name, product_namefrom vendors, productswhere vendors.vend_id &#x3D; products.vend_id<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>笛卡尔积：由没有联结条件的表关系返回的结果，其检索出的结果将是第一个表的行数乘于第二个表的行数</p><h3 id="内部联结（等值联结）"><a href="#内部联结（等值联结）" class="headerlink" title="内部联结（等值联结）"></a>内部联结（等值联结）</h3><p>取出两张表中匹配到的数据，匹配不到的不保留</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select vend_name, product_namefrom vendors inner join productson vendors.vend_id &#x3D; products.vend_id<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="创建高级联结"><a href="#创建高级联结" class="headerlink" title="创建高级联结"></a>创建高级联结</h2><h3 id="自联结"><a href="#自联结" class="headerlink" title="自联结"></a>自联结</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select p1.product_id, p2.product_idfrom products as p1, products as p2where p1.vend_id &#x3D; p2.vend_id;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="外部联结"><a href="#外部联结" class="headerlink" title="外部联结"></a>外部联结</h3><p>取出连接表中匹配到的数据，匹配不到的也会保留，其值为NULL</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 包含左表的所有行select customers.cust_id, orders.order_numfrom customers left join orderson customers.cust_id &#x3D; orders.cust_id;# 包含右表的所有行select customers.cust_id, orders.order_numfrom customers right join orderson customers.cust_id &#x3D; orders.cust_id;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="组合查询"><a href="#组合查询" class="headerlink" title="组合查询"></a>组合查询</h2><h3 id="创建组合查询"><a href="#创建组合查询" class="headerlink" title="创建组合查询"></a>创建组合查询</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select vend_id, prod_id, prod_pricefrom productswhere prod_price &lt;&#x3D; 5union # 使用union将输出结果组合成单个查询结果集，会自动去除重复的行select vend_id, prod_id, prod_pricefrom productswhere vend_id in (1001, 1002);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>union使用规则：</p><ol><li>union必须由两条或以上的select语句组成，语句之间使用union做分隔</li><li>union中每个查询必须包含相同的列，表达式或聚集函数</li><li>列数据类型必须兼容（可以不完全相同，但应能够隐式转换）</li></ol><h3 id="包含或取消重复的行"><a href="#包含或取消重复的行" class="headerlink" title="包含或取消重复的行"></a>包含或取消重复的行</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select vend_id, prod_id, prod_pricefrom productswhere prod_price &lt;&#x3D; 5union all# 不会去除重复的行，而是返回所有匹配的行select vend_id, prod_id, prod_pricefrom productswhere vend_id in (1001, 1002);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="对组合查询结果排序"><a href="#对组合查询结果排序" class="headerlink" title="对组合查询结果排序"></a>对组合查询结果排序</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select vend_id, prod_id, prod_pricefrom productswhere prod_price &lt;&#x3D; 5union # 使用union将输出结果组合成单个查询结果集，会自动去除重复的行select vend_id, prod_id, prod_pricefrom productswhere vend_id in (1001, 1002)order by vend_id, prod_price; # 实际上是对整个结果进行排序，并非最后一个select<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="全文本搜索"><a href="#全文本搜索" class="headerlink" title="全文本搜索"></a>全文本搜索</h2><p>MyISAM：支持全文本搜索</p><p>InnoDB：不支持</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select note_textfrom productnoteswhere Match(note_text) Against(&#39;rabbit&#39;);# Match(指定被搜索的列)# Against(指定要搜索的表达式)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h2><h3 id="插入单条或多条数据"><a href="#插入单条或多条数据" class="headerlink" title="插入单条或多条数据"></a>插入单条或多条数据</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 插入完整的行insert into customersvalues(&#39;Jack&#39;, # 每一个值的顺序都必须与列的顺序一致    20,    &#39;LA&#39;);# 更安全写法，可以省略部分列insert into customers(name, age, address)values (&#39;Jack&#39;, 20, &#39;LA&#39;);# 插入多个行insert into customers(name, age, address)values (&#39;Jack&#39;, 20, &#39;LA&#39;), (&#39;Mary&#39;, 23, &#39;NY&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="插入检索出的数据"><a href="#插入检索出的数据" class="headerlink" title="插入检索出的数据"></a>插入检索出的数据</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">insert into customers(name, age, address)select name, age, address from customersnew;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="更新和删除数据"><a href="#更新和删除数据" class="headerlink" title="更新和删除数据"></a>更新和删除数据</h2><p>注意：更新和删除务必小心谨慎，避免更新或删除了全表，养成带where的习惯</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 更新所有行update customers set age &#x3D; 26;# 更新指定行update customers set age &#x3D; 26 where name &#x3D; &#39;Jack&#39;;# 更新多行时发生错误也继续更新后续的update ignore customers...# 删除所有行delete from customers;# 删除指定行delete from customers where age &#x3D; &#39;23&#39;;# 更快的删除，删除原来的表并重建一个表truncate table<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="创建和操纵表"><a href="#创建和操纵表" class="headerlink" title="创建和操纵表"></a>创建和操纵表</h2><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 创建表create table customers if not exists(    cust_id int not null auto_increment, # 自动增量cust_name varchar(50) not null,    cust_age int null,    cust_address varchar(100) null,    cust_country varchar(20) not null default &#39;China&#39;, # 默认值    primary key(cust_id) # 主键)engine &#x3D; innodb; # innodb引擎，支持事务# 获取返回的最后一个auto_incrementselect last_insert_id();# 更新表（谨慎使用）alter table customersadd cust_phone varchar(20); # 增加一列alter table customersdrop column cust_phone; # 删除一列# 删除表drop table customers;# 重命名rename table customers to cust;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h2><p>视图是虚拟的表。与包含数据的表不一样，视图只包含使用时动态检索数据的查询。视图一般用于检索而不用于更新</p><ol><li>重用SQL语句，简化操作</li><li>使用表的组成部分而不是整个表</li><li>可以给用户授予表的特定部分的访问权限而不是整个表的访问权限</li></ol><p>视图的使用规则：</p><ol><li>必须唯一命名</li><li>可创建的视图数目没有限制</li><li>视图也可以嵌套</li><li>视图可以和表一起使用</li><li>视图不能索引</li><li>Order by 可以用于视图中，但若从该视图检索数据的select中也包含order by 则视图中的order by 将会被覆盖</li></ol><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 创建或更新视图create or replace view viewname# 查看创建视图的语句show create view viewname;# 删除视图drop view viewname;# 使用视图create view productcustomers asselect cust_name, cust_age, prod_idfrom customers, orderswhere customers.cust_id &#x3D; orders.cust_id;select * from productcustomers;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h2><h3 id="执行存储过程"><a href="#执行存储过程" class="headerlink" title="执行存储过程"></a>执行存储过程</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 执行名为productpricing的存储过程，它计算并返回产品的最低、最高和平均价格call productpricing(@pricelow,                    @pricehigh,                    @priceaverage                   )<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="创建存储过程"><a href="#创建存储过程" class="headerlink" title="创建存储过程"></a>创建存储过程</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># BEGIN和END语句用来限定存储过程体create procedure productpricing()begin select avg(prod_price) as priceaveragefrom products;end;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="删除存储过程"><a href="#删除存储过程" class="headerlink" title="删除存储过程"></a>删除存储过程</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">drop procedure productpricing;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="使用参数"><a href="#使用参数" class="headerlink" title="使用参数"></a>使用参数</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># out 从存储过程传出，in 传入存储过程create procedure productpricing(out pl decimal(8, 2),    out ph decimal(8, 2),    out pa decimal(8, 2))beginselect min(prod_price)into p1from products;select max(prod_price)into phfrom products;select avg(prod_price)into pafrom products;end;# 所有MySQL变量必须以@开头, 使用变量接存储过程输出的内容call productpricing(@pricelow,    @pricehigh,    @priceaverage);select @pricelow, @pricehigh, @priceaverage;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="触发器"><a href="#触发器" class="headerlink" title="触发器"></a>触发器</h2><p>MySQL在响应以下任意语句而自动执行的一条MySQL语句（或位于begin和end之间的一组语句）：</p><ol><li>delete</li><li>insert</li><li>update</li></ol><p>仅有表支持触发器，视图和临时表均不支持</p><h3 id="创建触发器"><a href="#创建触发器" class="headerlink" title="创建触发器"></a>创建触发器</h3><p>CREATE TRIGGER用来创建名为newproduct的新触发器。触发器可在一个操作发生之前或之后执行，这里给出了AFTER INSERT，所以此触发器将在INSERT语句成功执行后执行。这个触发器还指定FOR EACH ROW，因此代码对每个插入行执行。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 每插入成功一次就显示&#39;product added&#39;create trigger newproduct after insert on productsfor each row select &#39;product added&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="删除触发器"><a href="#删除触发器" class="headerlink" title="删除触发器"></a>删除触发器</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">drop trigger newproduct;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="使用触发器"><a href="#使用触发器" class="headerlink" title="使用触发器"></a>使用触发器</h3><ol><li>insert触发器</li></ol><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">create trigger newproduct after insert on productsfor each row select &#39;product added&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="2"><li>delete触发器</li></ol><p>在任意订单被删除前将执行此触发器。它使用一条INSERT语句将OLD中的值（要被删除的订单）保存到一个名为archive_orders的存档表中</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">create trigger deleteorder before delete on ordersfor each rowbegininsert into archive_orders(order_num, order_date, cust_id)values(OLD.order_num, OLD.order_date, OLD.cust_id);end;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>update触发器</li></ol><p>每次更新一个行时，NEW.vend_state中的值（将用来更新表行的值）都用Upper(NEW.vend_state)替换</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">create trigger updatevendor before update on vendors for each row set NEW.vend_state &#x3D; Upper(NEW.vend_state);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="事务管理"><a href="#事务管理" class="headerlink" title="事务管理"></a>事务管理</h2><p>保证成批MySQL操作要么完全执行，要么完全不执行</p><ol><li>事务（Transaction）：指一组SQL语句</li><li>回退（rollback）：指撤销指定SQL语句的过程</li><li>提交（commit）：指将未存储的SQL语句结果写入数据库表</li><li>保留点（savepoint）：指事务处理中设置的临时占位符，可对其发布回退</li></ol><h3 id="控制事务处理"><a href="#控制事务处理" class="headerlink" title="控制事务处理"></a>控制事务处理</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 开始事务start transaction;delete from products where prod_id &#x3D; 1011;select * from products;# 回退rollback;select * from products;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用commit"><a href="#使用commit" class="headerlink" title="使用commit"></a>使用commit</h3><p>平时未开启事务的时候，执行SQL语句已有隐式commit</p><p>当开启事务后，需要进行明确的提交，SQL语句才会真正地执行</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 开始事务start transaction;delete from products where prod_id &#x3D; 1011;select * from products;# 提交（之后事务会隐式关闭）commit;select * from products;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用保留点"><a href="#使用保留点" class="headerlink" title="使用保留点"></a>使用保留点</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">savepoint delete1;rollback to delete1;# 释放保留点release savepoint;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="修改默认的提交行为"><a href="#修改默认的提交行为" class="headerlink" title="修改默认的提交行为"></a>修改默认的提交行为</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 0 为false 即设置为不自动提交，默认为1set autocommit &#x3D; 0;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="数据库管理"><a href="#数据库管理" class="headerlink" title="数据库管理"></a>数据库管理</h2><h3 id="备份数据"><a href="#备份数据" class="headerlink" title="备份数据"></a>备份数据</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">backup table;或select into outfile; # 转存在外部文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="数据库维护"><a href="#数据库维护" class="headerlink" title="数据库维护"></a>数据库维护</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 检查表键是否正确analyze table;# 在myisam上针对索引进行检查check table;# 回收空间，优化性能optimize table;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="查看日志文件"><a href="#查看日志文件" class="headerlink" title="查看日志文件"></a>查看日志文件</h3><ol><li>错误日志：<code>data\hostname.err</code></li><li>查询日志：<code>data\hostname.log</code></li><li>二进制日志：<code>data\hostname-bin</code></li><li>缓慢查询日志：<code>data\hostname-slow.log</code>（对确定数据库在何处需要优化有很大的作用）</li></ol><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 刷新并重新开始所有的日志文件flush logs;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 关于学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题学习-链表篇</title>
      <link href="/2023/03/01/leetcode-shua-ti-xue-xi-lian-biao-pian/"/>
      <url>/2023/03/01/leetcode-shua-ti-xue-xi-lian-biao-pian/</url>
      
        <content type="html"><![CDATA[<h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><h3 id="移除链表元素"><a href="#移除链表元素" class="headerlink" title="移除链表元素"></a><a href="https://leetcode.cn/problems/remove-linked-list-elements/">移除链表元素</a></h3><p>方法一：在原链表的基础上解决，需要对头节点做单独的处理</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/** * Definition for singly-linked list. * struct ListNode &#123; *     int val; *     struct ListNode *next; * &#125;; */</span><span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> <span class="token function">removeElements</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> head<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> temp<span class="token punctuation">;</span>    <span class="token comment">// 头节点单独处理</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>head <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> head<span class="token operator">-></span>val <span class="token operator">==</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        temp <span class="token operator">=</span> head<span class="token punctuation">;</span>        head <span class="token operator">=</span> head<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token function">free</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 中间节点的处理</span>    <span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> currentNode <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> prev <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>currentNode <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>currentNode<span class="token operator">-></span>val <span class="token operator">==</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            prev<span class="token operator">-></span>next <span class="token operator">=</span> currentNode<span class="token operator">-></span>next<span class="token punctuation">;</span>            <span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> deleteNode <span class="token operator">=</span> currentNode<span class="token punctuation">;</span>            currentNode <span class="token operator">=</span> currentNode<span class="token operator">-></span>next<span class="token punctuation">;</span>            <span class="token function">free</span><span class="token punctuation">(</span>deleteNode<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            prev <span class="token operator">=</span> currentNode<span class="token punctuation">;</span>            currentNode <span class="token operator">=</span> currentNode<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> head<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>方法二：创建一个虚拟头节点，这样所有节点的处理都可以像中间节点一样，而无需对头节点进行单独的处理了</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/** * Definition for singly-linked list. * struct ListNode &#123; *     int val; *     struct ListNode *next; * &#125;; */</span><span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> <span class="token function">removeElements</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> head<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 起别名</span>    <span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">ListNode</span> ListNode<span class="token punctuation">;</span>    <span class="token comment">// 建立虚拟头节点</span>    ListNode<span class="token operator">*</span> tempHead <span class="token operator">=</span> <span class="token punctuation">(</span>ListNode<span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>ListNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    tempHead<span class="token operator">-></span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token comment">// 遍历指针</span>    <span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> cur <span class="token operator">=</span> tempHead<span class="token punctuation">;</span>        <span class="token comment">// 像处理中间节点一样，统一操作</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>next<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>next<span class="token operator">-></span>val <span class="token operator">==</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> temp <span class="token operator">=</span> cur<span class="token operator">-></span>next<span class="token punctuation">;</span>            cur<span class="token operator">-></span>next <span class="token operator">=</span> cur<span class="token operator">-></span>next<span class="token operator">-></span>next<span class="token punctuation">;</span>            <span class="token function">free</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            cur <span class="token operator">=</span> cur<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 最后记得返回真正的头节点</span>    head <span class="token operator">=</span> tempHead<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token keyword">return</span> head<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="设计链表"><a href="#设计链表" class="headerlink" title="设计链表"></a><a href="https://leetcode.cn/problems/design-linked-list/">设计链表</a></h3><p>需要注意的是 index 是从0开始的</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">MyLinkedList</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> val<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">MyLinkedList</span><span class="token operator">*</span> next<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> MyLinkedList<span class="token punctuation">;</span><span class="token comment">// 题中给出的是虚拟头节点的解法，会简单很多</span>MyLinkedList<span class="token operator">*</span> <span class="token function">myLinkedListCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    MyLinkedList<span class="token operator">*</span> head <span class="token operator">=</span> <span class="token punctuation">(</span>MyLinkedList<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>MyLinkedList<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    head<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> head<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">myLinkedListGet</span><span class="token punctuation">(</span>MyLinkedList<span class="token operator">*</span> obj<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>obj <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>obj<span class="token operator">-></span>next<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        obj <span class="token operator">=</span> obj<span class="token operator">-></span>next<span class="token punctuation">;</span>        count<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>count <span class="token operator">==</span> index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> obj<span class="token operator">-></span>val<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">myLinkedListAddAtHead</span><span class="token punctuation">(</span>MyLinkedList<span class="token operator">*</span> obj<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        MyLinkedList<span class="token operator">*</span> newNode <span class="token operator">=</span> <span class="token punctuation">(</span>MyLinkedList<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>MyLinkedList<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        newNode<span class="token operator">-></span>val <span class="token operator">=</span> val<span class="token punctuation">;</span>        newNode<span class="token operator">-></span>next <span class="token operator">=</span> obj<span class="token operator">-></span>next<span class="token punctuation">;</span>        obj<span class="token operator">-></span>next <span class="token operator">=</span> newNode<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">myLinkedListAddAtTail</span><span class="token punctuation">(</span>MyLinkedList<span class="token operator">*</span> obj<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>obj<span class="token operator">-></span>next<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        obj <span class="token operator">=</span> obj<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    MyLinkedList<span class="token operator">*</span> newNode <span class="token operator">=</span> <span class="token punctuation">(</span>MyLinkedList<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>MyLinkedList<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    newNode<span class="token operator">-></span>val <span class="token operator">=</span> val<span class="token punctuation">;</span>    obj<span class="token operator">-></span>next <span class="token operator">=</span> newNode<span class="token punctuation">;</span>    newNode<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">myLinkedListAddAtIndex</span><span class="token punctuation">(</span>MyLinkedList<span class="token operator">*</span> obj<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    MyLinkedList<span class="token operator">*</span> newNode <span class="token operator">=</span> <span class="token punctuation">(</span>MyLinkedList<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>MyLinkedList<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    newNode<span class="token operator">-></span>val <span class="token operator">=</span> val<span class="token punctuation">;</span>    <span class="token comment">// 头插</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        newNode<span class="token operator">-></span>next <span class="token operator">=</span> obj<span class="token operator">-></span>next<span class="token punctuation">;</span>        obj<span class="token operator">-></span>next <span class="token operator">=</span> newNode<span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 中间正常位置插入</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>obj<span class="token operator">-></span>next<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        MyLinkedList<span class="token operator">*</span> prev <span class="token operator">=</span> obj<span class="token punctuation">;</span>        obj <span class="token operator">=</span> obj<span class="token operator">-></span>next<span class="token punctuation">;</span>        count<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>count <span class="token operator">==</span> index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            newNode<span class="token operator">-></span>next <span class="token operator">=</span> obj<span class="token punctuation">;</span>            prev<span class="token operator">-></span>next <span class="token operator">=</span> newNode<span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 尾插</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>obj<span class="token operator">-></span>next <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> count<span class="token operator">+</span><span class="token number">1</span> <span class="token operator">==</span> index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        obj<span class="token operator">-></span>next <span class="token operator">=</span> newNode<span class="token punctuation">;</span>        newNode<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">myLinkedListDeleteAtIndex</span><span class="token punctuation">(</span>MyLinkedList<span class="token operator">*</span> obj<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>obj<span class="token operator">-></span>next<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        MyLinkedList<span class="token operator">*</span> prev <span class="token operator">=</span> obj<span class="token punctuation">;</span>        obj <span class="token operator">=</span> obj<span class="token operator">-></span>next<span class="token punctuation">;</span>        count<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>count <span class="token operator">==</span> index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            MyLinkedList<span class="token operator">*</span> temp <span class="token operator">=</span> obj<span class="token punctuation">;</span>            prev<span class="token operator">-></span>next <span class="token operator">=</span> obj<span class="token operator">-></span>next<span class="token punctuation">;</span>            <span class="token function">free</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">myLinkedListFree</span><span class="token punctuation">(</span>MyLinkedList<span class="token operator">*</span> obj<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        MyLinkedList<span class="token operator">*</span> prev <span class="token operator">=</span> obj<span class="token punctuation">;</span>        obj <span class="token operator">=</span> obj<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token function">free</span><span class="token punctuation">(</span>prev<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * Your MyLinkedList struct will be instantiated and called as such: * MyLinkedList* obj = myLinkedListCreate(); * int param_1 = myLinkedListGet(obj, index);  * myLinkedListAddAtHead(obj, val);  * myLinkedListAddAtTail(obj, val);  * myLinkedListAddAtIndex(obj, index, val);  * myLinkedListDeleteAtIndex(obj, index);  * myLinkedListFree(obj);*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="反转链表"><a href="#反转链表" class="headerlink" title="反转链表"></a><a href="https://leetcode.cn/problems/reverse-linked-list/">反转链表</a></h3><p>和数组反转类似，都可以利用双指针法（需要注意的细节是原头节点反转后变尾节点，其next需要指向NULL）</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/** * Definition for singly-linked list. * struct ListNode &#123; *     int val; *     struct ListNode *next; * &#125;; */</span><span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> <span class="token function">reverseList</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> head<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> prev <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>     <span class="token comment">// 临时保存</span>    <span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> temp<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> cur <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 保存好方便更新cur</span>        temp <span class="token operator">=</span> cur<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token comment">// 开始反转</span>        cur<span class="token operator">-></span>next <span class="token operator">=</span> prev<span class="token punctuation">;</span>        <span class="token comment">// 更新指针</span>        prev <span class="token operator">=</span> cur<span class="token punctuation">;</span>        cur <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> prev<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="两两交换链表中的节点"><a href="#两两交换链表中的节点" class="headerlink" title="两两交换链表中的节点"></a><a href="https://leetcode.cn/problems/swap-nodes-in-pairs/">两两交换链表中的节点</a></h3><p><img src="https://s3.bmp.ovh/imgs/2023/02/28/7a3efec7504991ab.png"></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/** * Definition for singly-linked list. * struct ListNode &#123; *     int val; *     struct ListNode *next; * &#125;; */</span><span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> <span class="token function">swapPairs</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> head<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">ListNode</span> ListNode<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> head<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 虚拟头节点</span>    ListNode<span class="token operator">*</span> tempNode <span class="token operator">=</span> <span class="token punctuation">(</span>ListNode<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>ListNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    tempNode<span class="token operator">-></span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> first <span class="token operator">=</span> tempNode<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> second<span class="token punctuation">,</span> <span class="token operator">*</span> third<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>first <span class="token operator">&amp;&amp;</span> first<span class="token operator">-></span>next <span class="token operator">&amp;&amp;</span> first<span class="token operator">-></span>next<span class="token operator">-></span>next<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        second <span class="token operator">=</span> first<span class="token operator">-></span>next<span class="token punctuation">;</span>        third <span class="token operator">=</span> first<span class="token operator">-></span>next<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token comment">// 开始交换</span>        first<span class="token operator">-></span>next <span class="token operator">=</span> third<span class="token punctuation">;</span>        second<span class="token operator">-></span>next <span class="token operator">=</span> third<span class="token operator">-></span>next<span class="token punctuation">;</span>        third<span class="token operator">-></span>next <span class="token operator">=</span> second<span class="token punctuation">;</span>        <span class="token comment">// 向后移动</span>        first <span class="token operator">=</span> first<span class="token operator">-></span>next<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> tempNode<span class="token operator">-></span>next<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="删除链表的倒数第几个结点"><a href="#删除链表的倒数第几个结点" class="headerlink" title="删除链表的倒数第几个结点"></a><a href="https://leetcode.cn/problems/remove-nth-node-from-end-of-list/">删除链表的倒数第几个结点</a></h3><p>方法一：将倒数转成顺数。先遍历一次链表找到链表的长度 len，然后可以发现，倒数第 n 个恰好是顺数的 len - n + 1 个，然后再遍历执行删除操作即可</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/** * Definition for singly-linked list. * struct ListNode &#123; *     int val; *     struct ListNode *next; * &#125;; */</span><span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> <span class="token function">removeNthFromEnd</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> head<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">ListNode</span> ListNode<span class="token punctuation">;</span>    ListNode<span class="token operator">*</span> tempHead <span class="token operator">=</span> <span class="token punctuation">(</span>ListNode<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>ListNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    tempHead<span class="token operator">-></span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    ListNode<span class="token operator">*</span> cur <span class="token operator">=</span> tempHead<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>next<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cur <span class="token operator">=</span> cur<span class="token operator">-></span>next<span class="token punctuation">;</span>        len<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    cur <span class="token operator">=</span> tempHead<span class="token punctuation">;</span>    <span class="token keyword">int</span> index <span class="token operator">=</span> len <span class="token operator">-</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    ListNode<span class="token operator">*</span> prev<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>next<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        prev <span class="token operator">=</span> cur<span class="token punctuation">;</span>        cur <span class="token operator">=</span> cur<span class="token operator">-></span>next<span class="token punctuation">;</span>        count<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>count <span class="token operator">==</span> index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            prev<span class="token operator">-></span>next <span class="token operator">=</span> cur<span class="token operator">-></span>next<span class="token punctuation">;</span>            <span class="token function">free</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> tempHead<span class="token operator">-></span>next<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>方法二：（一次遍历完成所有操作）双指针操作。定义<code>fast</code>和<code>slow</code>指针，让 fast 指针先走，当 fast 指向与 slow 指向中间相隔 n 个节点时，两指针再同时移动，直到 fast 指针指向 NULL 时，此时 slow 指针指向的下一个节点即需要删除的节点</p><p><img src="https://s3.bmp.ovh/imgs/2023/02/28/7cd0818378a97d99.png" alt="image-20230228155804627"></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/** * Definition for singly-linked list. * struct ListNode &#123; *     int val; *     struct ListNode *next; * &#125;; */</span><span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> <span class="token function">removeNthFromEnd</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> head<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">ListNode</span> ListNode<span class="token punctuation">;</span>    ListNode<span class="token operator">*</span> tempHead <span class="token operator">=</span> <span class="token punctuation">(</span>ListNode<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>ListNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    tempHead<span class="token operator">-></span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>        ListNode<span class="token operator">*</span> fast <span class="token operator">=</span> head<span class="token punctuation">;</span>    ListNode<span class="token operator">*</span> slow <span class="token operator">=</span> tempHead<span class="token punctuation">;</span>    <span class="token comment">// 先让快指针走，等中间相隔 n 个元素后，快慢指针同时走</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token operator">--</span> <span class="token operator">&amp;&amp;</span> fast <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        fast <span class="token operator">=</span> fast<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>fast<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        slow <span class="token operator">=</span> slow<span class="token operator">-></span>next<span class="token punctuation">;</span>        fast <span class="token operator">=</span> fast<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 快指针指向为 NULL 的时候， 慢指针指向的下一个节点就是需要删除的节点</span>    ListNode<span class="token operator">*</span> temp <span class="token operator">=</span> slow<span class="token operator">-></span>next<span class="token punctuation">;</span>    slow<span class="token operator">-></span>next <span class="token operator">=</span> slow<span class="token operator">-></span>next<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> tempHead<span class="token operator">-></span>next<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="链表相交"><a href="#链表相交" class="headerlink" title="链表相交"></a><a href="https://leetcode.cn/problems/intersection-of-two-linked-lists-lcci/">链表相交</a></h3><p>与某年408的真题相类似，双指针法。关键在于先获取两个链表之间的长度差，然后判断长度，让长的先移动，等到两者在同一起跑线后同时移动，当两指针位置相同的时候，就是交汇点，否则就没有交汇点。</p><p><img src="https://s3.bmp.ovh/imgs/2023/02/28/69844119894665ad.png" alt="image-20230228200258201"></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/** * Definition for singly-linked list. * struct ListNode &#123; *     int val; *     struct ListNode *next; * &#125;; */</span><span class="token keyword">struct</span> <span class="token class-name">ListNode</span> <span class="token operator">*</span><span class="token function">getIntersectionNode</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ListNode</span> <span class="token operator">*</span>headA<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">ListNode</span> <span class="token operator">*</span>headB<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">ListNode</span> ListNode<span class="token punctuation">;</span>    <span class="token keyword">int</span> len_A <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> len_B <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">// 指向A</span>    ListNode<span class="token operator">*</span> p <span class="token operator">=</span> headA<span class="token punctuation">;</span>    <span class="token comment">// 指向B</span>    ListNode<span class="token operator">*</span> q <span class="token operator">=</span> headB<span class="token punctuation">;</span>    <span class="token comment">// 获取 A 长度</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        len_A<span class="token operator">++</span><span class="token punctuation">;</span>        p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>     <span class="token comment">// 获取 B 长度</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        len_B<span class="token operator">++</span><span class="token punctuation">;</span>        q <span class="token operator">=</span> q<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 长度差</span>    <span class="token keyword">int</span> substract <span class="token operator">=</span> len_A <span class="token operator">></span> len_B <span class="token operator">?</span> len_A <span class="token operator">-</span> len_B <span class="token operator">:</span> len_B <span class="token operator">-</span> len_A<span class="token punctuation">;</span>    <span class="token comment">// 更新回来，开始准备工作</span>    p <span class="token operator">=</span> headA<span class="token punctuation">;</span>    q <span class="token operator">=</span> headB<span class="token punctuation">;</span>        <span class="token comment">// 长的先移动</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>substract<span class="token operator">--</span> <span class="token operator">&amp;&amp;</span> p <span class="token operator">&amp;&amp;</span> q<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>len_A <span class="token operator">></span> len_B<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>len_A <span class="token operator">&lt;</span> len_B<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            q <span class="token operator">=</span> q<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 此时同一起跑位置</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>p <span class="token operator">&amp;&amp;</span> q<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>p <span class="token operator">==</span> q<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> q<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>        q <span class="token operator">=</span> q<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="环形链表II"><a href="#环形链表II" class="headerlink" title="环形链表II"></a><a href="https://leetcode.cn/problems/linked-list-cycle-ii/">环形链表II</a></h3><ol><li>先判断是否有环：初始化双指针slow与fast，fast 每次走两步， slow 每次走一步，当 slow &#x3D;&#x3D; fast 的时候说明有环</li><li>再判断初始环入口：fast 回到头节点重新出发，slow继续在原位置继续出发，当两者再次相遇时就是入口位置</li></ol><p><img src="https://s3.bmp.ovh/imgs/2023/03/01/59d2abca98dff26d.png" alt="作者：chefyuan，链接：https://leetcode.cn/problems/linked-list-cycle-ii/solution/yi-yan-jiu-kan-dong-de-ti-jie-shuang-zhi-4sag/"></p><p>图例解释：</p><p>上图黄色节点为快慢指针相遇的节点，此时快指针走的距离：<code>a+(b+c)n+b</code></p><p>很容易理解b+c为环的长度，a为直线距离，b为绕了n圈之后又走了一段距离才相遇，所以相遇时走的总路程为<code>a+(b+c)n+b</code>，合并同类项得<code>a+(n+1)b+nc</code>。</p><p>慢指针走的距离：<code>a+(b+c)m+b</code>,m代表圈数。</p><p>然后我们设快指针得速度是慢指针的2倍,含义为相同时间内，快指针走过的距离是慢指针的2倍。</p><p><code>a+(n+1)b+nc=2[a+(m+1)b+mc]</code>整理得<code>a+b=(n-2m)(b+c)</code>，那么我们可以从这个等式上面发现什么呢？<code>b+c</code>为一圈的长度。也就是说<code>a+b</code>等于<code>n-2m</code>个环的长度。</p><p>为了便于理解我们看一种特殊情况，当<code>n-2m</code>等于<code>1</code>，那么<code>a+b=b+c</code>整理得，<code>a=c</code></p><p>此时我们只需重新释放两个指针，一个从head释放，一个从相遇点释放，速度相同，因为<code>a=c</code>，所以他俩必会在环入口处相遇，则求得入口节点索引。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/** * Definition for singly-linked list. * struct ListNode &#123; *     int val; *     struct ListNode *next; * &#125;; */</span><span class="token keyword">struct</span> <span class="token class-name">ListNode</span> <span class="token operator">*</span><span class="token function">detectCycle</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ListNode</span> <span class="token operator">*</span>head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">ListNode</span> ListNode<span class="token punctuation">;</span>    ListNode<span class="token operator">*</span> slow <span class="token operator">=</span> head<span class="token punctuation">;</span>    ListNode<span class="token operator">*</span> fast <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 无环</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>fast <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">||</span> fast<span class="token operator">-></span>next <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        fast <span class="token operator">=</span> fast<span class="token operator">-></span>next<span class="token operator">-></span>next<span class="token punctuation">;</span>        slow <span class="token operator">=</span> slow<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token comment">// 说明有环</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>slow <span class="token operator">==</span> fast<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// fast 重新出发， slow 继续在原位置上出发，当两者再次相遇时，其位置就是入口</span>    fast <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>fast <span class="token operator">!=</span> slow<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        fast <span class="token operator">=</span> fast<span class="token operator">-></span>next<span class="token punctuation">;</span>        slow <span class="token operator">=</span> slow<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> slow<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 关于学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题学习-数组篇</title>
      <link href="/2023/03/01/leetcode-shua-ti-xue-xi-shu-zu-pian/"/>
      <url>/2023/03/01/leetcode-shua-ti-xue-xi-shu-zu-pian/</url>
      
        <content type="html"><![CDATA[<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a><a href="https://leetcode.cn/problems/binary-search/">二分查找</a></h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> right <span class="token operator">=</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>left <span class="token operator">&lt;=</span> right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> mid<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">></span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                right <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="移除元素"><a href="#移除元素" class="headerlink" title="移除元素"></a><a href="https://leetcode.cn/problems/remove-element/">移除元素</a></h3><p>提示：</p><p><strong>要知道数组的元素在内存地址中是连续的，不能单独删除数组中的某个元素，只能覆盖。</strong></p><p>双指针解法：</p><ol><li><p>fast指针遍历数组元素</p></li><li><p>slow指针记录剩余的元素</p></li><li><p>当fast指针指向的元素不等于目标值时，将fast指针的元素赋给slow指针，然后同时向后移动；</p><p>若fast指针指向的元素等于目标值时，只需移动fast指针即可，slow指针原地不动</p></li><li><p>最后slow的值即为数组剩余元素的长度</p></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">removeElement</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> slow <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>  fast <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span> fast <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> fast<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>fast<span class="token punctuation">]</span> <span class="token operator">!=</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                nums<span class="token punctuation">[</span>slow<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>fast<span class="token punctuation">]</span><span class="token punctuation">;</span>                slow<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> slow<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="有序数组的平方"><a href="#有序数组的平方" class="headerlink" title="有序数组的平方"></a><a href="https://leetcode.cn/problems/squares-of-a-sorted-array/">有序数组的平方</a></h3><p>暴力解法：</p><ol><li>将原数组中所有元素平方后赋值给新数组</li><li>给新数组进行排序</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">sortedSquares</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> newArr<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            newArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment">// newArr[i] = (int)Math.pow(nums[i], 2);  注意pow返回值是double，有类型转换问题需要考虑</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>newArr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> newArr<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>双指针解法：</p><ol><li>因原数组的元素均已有序（升序）。</li><li>唯一的变数就是负数平方后可能会变最大值，则最大值肯定位于数组的左边或右边，而不可能在中间了</li><li>利用双指针。原数组起始位置指针 low, 终止位置指针 high。</li><li>新建一个数组接收平方后的元素。定义一个临时指针 temp 位于该数组的终止位置</li></ol><p><img src="https://s3.bmp.ovh/imgs/2023/02/22/7e56a92b699bd8f8.png" alt="image-20230222213945503"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">sortedSquares</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> newArr<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> low <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> high <span class="token operator">=</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> temp <span class="token operator">=</span> newArr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>low <span class="token operator">&lt;=</span> high<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> lowNum <span class="token operator">=</span> nums<span class="token punctuation">[</span>low<span class="token punctuation">]</span> <span class="token operator">*</span> nums<span class="token punctuation">[</span>low<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> highNum <span class="token operator">=</span> nums<span class="token punctuation">[</span>high<span class="token punctuation">]</span> <span class="token operator">*</span> nums<span class="token punctuation">[</span>high<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>lowNum <span class="token operator">&lt;</span> highNum<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                newArr<span class="token punctuation">[</span>temp<span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">=</span> highNum<span class="token punctuation">;</span>                high<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                newArr<span class="token punctuation">[</span>temp<span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">=</span> lowNum<span class="token punctuation">;</span>                low<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> newArr<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="长度最小的子数组"><a href="#长度最小的子数组" class="headerlink" title="长度最小的子数组"></a><a href="https://leetcode.cn/problems/minimum-size-subarray-sum/">长度最小的子数组</a></h3><p>滑动窗口法（双指针法的一种）。</p><p>滑动窗口法需要思考的问题：</p><ol><li>窗口内是什么</li><li>如何移动窗口的起始位置</li><li>如何移动窗口的结束位置</li></ol><p>针对此题：</p><ol><li>窗口内就是可能的最小的子数组</li><li>若窗口内元素和大于 target， 则初始位置向右移动</li><li>若窗口内元素和小于 target， 则终止位置继续向右移动</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">minSubArrayLen</span><span class="token punctuation">(</span><span class="token keyword">int</span> target<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> start <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> end <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> minLength <span class="token operator">=</span> nums<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span> end <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> end<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 结束位置向右移动</span>            sum <span class="token operator">+=</span> nums<span class="token punctuation">[</span>end<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment">// 当大于或等于Target时，先记录下当前符合要求的子数组长度，然后初始位置再移动</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>sum <span class="token operator">>=</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">int</span> currentLength <span class="token operator">=</span> end <span class="token operator">-</span> start <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>currentLength <span class="token operator">&lt;</span> minLength<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    minLength <span class="token operator">=</span> currentLength<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                sum <span class="token operator">-=</span> nums<span class="token punctuation">[</span>start<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> minLength <span class="token operator">==</span> nums<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> minLength<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="螺旋矩阵-II"><a href="#螺旋矩阵-II" class="headerlink" title="螺旋矩阵 II"></a><a href="https://leetcode.cn/problems/spiral-matrix-ii/">螺旋矩阵 II</a></h3><ol><li>找准边界值</li><li>建立一个二维数组，往里填充数据</li></ol><p><img src="https://s3.bmp.ovh/imgs/2023/02/23/d493b0ebe1e7799d.png" alt="图例"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">generateMatrix</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> matrix <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">// 左右</span>        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment">// 上下</span>        <span class="token keyword">int</span> top <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> bottom <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> target <span class="token operator">=</span> n <span class="token operator">*</span> n<span class="token punctuation">;</span>        <span class="token comment">// 填充</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>num <span class="token operator">&lt;=</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 从左往右</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> left<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> right<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                matrix<span class="token punctuation">[</span>top<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> num<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>              top<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// 最右边的一个已经被填充，边界往下移动</span>            <span class="token comment">// 从上往下</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> top<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> bottom<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">=</span> num<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            right<span class="token operator">--</span><span class="token punctuation">;</span> <span class="token comment">// 最底下的一个已经被填充，边界往左移动</span>            <span class="token comment">// 从右往左</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> right<span class="token punctuation">;</span> i <span class="token operator">>=</span> left<span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                matrix<span class="token punctuation">[</span>bottom<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> num<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            bottom<span class="token operator">--</span><span class="token punctuation">;</span> <span class="token comment">// 最左边的一个已经被填充，边界往上移动</span>            <span class="token comment">// 从下往上</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> bottom<span class="token punctuation">;</span> i <span class="token operator">>=</span> top<span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">=</span> num<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            left<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// 最上边的一个已经被填充，边界往右移动</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> matrix<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 关于学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入理解Java虚拟机之自己编译JDK</title>
      <link href="/2021/12/29/shen-ru-li-jie-java-xu-ni-ji-zhi-zi-ji-bian-yi-jdk/"/>
      <url>/2021/12/29/shen-ru-li-jie-java-xu-ni-ji-zhi-zi-ji-bian-yi-jdk/</url>
      
        <content type="html"><![CDATA[<h1 id="一、Windows-10-WSL-ubuntu-20-04-CLion-编译JDK12"><a href="#一、Windows-10-WSL-ubuntu-20-04-CLion-编译JDK12" class="headerlink" title="一、Windows 10 + WSL(ubuntu 20.04) + CLion 编译JDK12"></a>一、Windows 10 + WSL(ubuntu 20.04) + CLion 编译JDK12</h1><h2 id="前置准备"><a href="#前置准备" class="headerlink" title="前置准备"></a>前置准备</h2><p>平台及工具：<code>Windows 10 + WSL(ubuntu 20.04) + CLion（2021.2.2）</code></p><p>OpenJDK12下载地址：<a href="https://hg.openjdk.java.net/jdk/jdk12/">https://hg.openjdk.java.net/jdk/jdk12/</a></p><ul><li>下载安装解压即可</li></ul><p><img src="https://s3.bmp.ovh/imgs/2022/04/20/ca394787fe04bbef.png" alt="image-20211222155041543"></p><p>编译工具版本推荐：</p><ul><li><p><code>GCC 7.4及以上</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># Ubuntu上安装GCC命令，该命令默认安装9.3版本（2021年）</span><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> build-essential<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><p>编译依赖库：</p><table><thead><tr><th>工具</th><th>库名称</th><th>安装命令</th></tr></thead><tbody><tr><td>FreeType</td><td>The FreeType Project</td><td>sudo apt-get install libfreetype6-dev</td></tr><tr><td>CUPS</td><td>Common UNIX Printing System</td><td>sudo apt-get install libcups2-dev</td></tr><tr><td>X11</td><td>X Window System</td><td>sudo apt-get install libx11-dev libxext-dev libxrender-dev libxrandr-dev libxtst-dev libxt-dev</td></tr><tr><td>ALSA</td><td>Advanced Linux Sound Architecture</td><td>sudo apt-get install libasound2-dev</td></tr><tr><td>libffi</td><td>Portable Foreign Function Interface Library</td><td>sudo apt-get install libffi-dev</td></tr><tr><td>Autoconf</td><td>Extensible Package of M4 Macros</td><td>sudo apt-get install autoconf</td></tr></tbody></table><p>Bootstrap JDK 准备：</p><ul><li><p>OpenJDK11</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> openjdk-11-jdk<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h2 id="开始编译"><a href="#开始编译" class="headerlink" title="开始编译"></a>开始编译</h2><p>编译FastDebug版，仅含Server模式的HotSpot虚拟机命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">bash</span> configure --enable-debug --with-jvm-variants<span class="token operator">=</span>server<span class="token comment"># 嫌写那么多麻烦，直接用下面这个👇，不过这个是生成release版本的，不利于debug</span><span class="token function">bash</span> configure<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>configure命令会进行依赖项检查，参数配置和构建输出目录结构等操作，所以依赖缺失会得到明确提示：</p><p><img src="https://s3.bmp.ovh/imgs/2022/04/20/ffeb827c089cd0d5.png" alt="image-20211222161109380"></p><p>ZIP安装命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> <span class="token function">zip</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>继续检查…继续安装缺失的依赖…</p><p><img src="https://s3.bmp.ovh/imgs/2022/04/20/61da08c4eb3e83b7.png" alt="image-20211222161330959"></p><p>成功界面：</p><p><img src="https://s3.bmp.ovh/imgs/2022/04/20/69545568bf2d8ece.png" alt="image-20211222161453331"></p><p>依赖检查通过后，执行<code>make images</code>命令执行整个OpenJDK的编译，作用是编译出整个JDK镜像</p><p>不出所料，编译报错：</p><p><img src="https://s3.bmp.ovh/imgs/2022/04/20/8dfbccdae822c22e.png" alt="image-20211222171107334"></p><p>充分利用了搜索引擎，以及认真阅读了<code>building.md</code>文件后，发现应该是gcc的版本问题，默认安装的是9，但实际需要的是7，于是把9给卸载了，重新安装了个7</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 卸载命令</span><span class="token function">sudo</span> <span class="token function">apt-get</span> remove gcc-9<span class="token comment"># 安装7</span><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> gcc-7<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> g++-7<span class="token comment"># 如果上述命令安装后，gcc --version能查出版本而不会报错，就无需使用以下命令</span><span class="token comment"># 或者已有7和9两个版本，但默认用的是9，也可用以下命令修改为7</span><span class="token comment"># 设置默认选项</span><span class="token function">sudo</span> update-alternatives <span class="token parameter variable">--install</span> /usr/bin/gcc gcc /usr/bin/gcc-7 <span class="token number">100</span><span class="token function">sudo</span> update-alternatives <span class="token parameter variable">--config</span> gcc<span class="token function">sudo</span> update-alternatives <span class="token parameter variable">--install</span> /usr/bin/g++ g++ /usr/bin/g++-7 <span class="token number">100</span><span class="token function">sudo</span> update-alternatives <span class="token parameter variable">--config</span> g++<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s3.bmp.ovh/imgs/2022/04/20/b842e4b5083f80eb.png" alt="image-20211223090952034"></p><hr><p>万事俱备只欠东风。先<code>make dist-clean</code>清理一波编译生成的临时文件，接着一波流：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">bash</span> configure --enable-debug --with-jvm-variants<span class="token operator">=</span>server<span class="token function">make</span> images<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>漫长的等待后…没有报错！！！</p><p>测试一波：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./build/*/images/jdk/bin/java <span class="token parameter variable">-version</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编译成功：</p><p><img src="https://s3.bmp.ovh/imgs/2022/04/20/6e1392796a337b93.png" alt="image-20211223092145605"></p><p>目录结构：</p><p><img src="https://s3.bmp.ovh/imgs/2022/04/20/05f5257d7959971d.png" alt="image-20211224103019948"></p><h2 id="在IDE工具上调试"><a href="#在IDE工具上调试" class="headerlink" title="在IDE工具上调试"></a>在IDE工具上调试</h2><p>导入JDK源码文件，open file 选择<code>MakeFile</code>，有弹窗清除<code>clean</code>，然后一直确认即可</p><p><img src="https://s3.bmp.ovh/imgs/2022/04/20/c58254030c853b24.png" alt="image-20211224101624591"></p><p>等待导入……</p><p>接着会发现帮你生成了一堆的<code>targets</code>，将根目录Mark Directory as 一下</p><p><img src="https://s3.bmp.ovh/imgs/2022/04/20/a6b395473627e7a3.png" alt="image-20211224100343289"></p><p>然后选<code>all</code>即可，打开编辑，Executable选择编译出来的<code>java</code>命令，Before launch移除<code>Build</code></p><p>具体设置各项参数如图：</p><p><img src="https://s3.bmp.ovh/imgs/2022/04/20/fa32ebcdaf46da66.png" alt="image-20211224100649074"></p><p>找到<code>java.c</code>文件，打个断点，直接<code>Debug</code>启动（开始你的表演）：</p><p><img src="https://s3.bmp.ovh/imgs/2022/04/20/3a19cf66c156852a.png" alt="image-20211223155145250"></p><p>配置<code>-version</code>只是测试一下是不是真的能够调试了而已，如果想要调试某个Java类呢</p><p><img src="https://s3.bmp.ovh/imgs/2022/04/20/dbb2bd61434f5b77.png" alt="image-20211224100937882"></p><h2 id="IDEA配合Clion远程调试"><a href="#IDEA配合Clion远程调试" class="headerlink" title="IDEA配合Clion远程调试"></a>IDEA配合Clion远程调试</h2><h3 id="IDEA配置"><a href="#IDEA配置" class="headerlink" title="IDEA配置"></a>IDEA配置</h3><ul><li>添加Configuration，选择Remote JVM Debug即可:</li></ul><p><img src="https://s3.bmp.ovh/imgs/2022/04/20/b78d7b12cb8898da.png" alt="image-20211223172433235"></p><h3 id="Clion配置"><a href="#Clion配置" class="headerlink" title="Clion配置"></a>Clion配置</h3><ul><li><p>添加Configuration，选择Custom Build Configuration</p></li><li><p>Target 需要添加一下，</p><ul><li><p>make编译配置</p><p><img src="https://s3.bmp.ovh/imgs/2022/04/20/a775935e3805ad6b.png" alt="image-20211223173513065"></p></li><li><p>make clean配置</p><p><img src="https://s3.bmp.ovh/imgs/2022/04/20/3a34ee2933aca3d0.png" alt="image-20211223173602305"></p></li></ul></li><li><p>Executable依然选择编译出来的Java命令</p></li><li><p>Program arguments填写：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token parameter variable">-jar</span><span class="token parameter variable">-Xdebug</span><span class="token parameter variable">-Xrunjdwp:transport</span><span class="token operator">=</span>dt_socket,server<span class="token operator">=</span>y,suspend<span class="token operator">=</span>n,address<span class="token operator">=</span><span class="token number">5008</span>xxx.jar<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>Working directory选择：上述jar包生成位置</p></li></ul><p>最终配置如图：</p><p><img src="https://s3.bmp.ovh/imgs/2022/04/20/b5030390fea26da1.png" alt="image-20211223180324539"></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><p>《深入理解Java虚拟机：JVM高级特性与最佳实践》（第三版）1.6实战：自己编译JDK</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 深入理解Java虚拟机系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 深入理解Java虚拟机 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
